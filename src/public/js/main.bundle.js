/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,r)=>{"use strict";r.r(t);var a=r("./src/js/data/config.js"),n=r("./src/js/utils/detector.js"),s=r("./src/js/app/main.js");r("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),a.default.isDev=!0,function(){if(n.default.webgl){var e=document.getElementById("appContainer");new s.default(e)}else n.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var a=r("./node_modules/three/build/three.module.js"),n=r("./src/js/data/config.js");function s(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var s=t.domElement.width,i=t.domElement.height;this.threeCamera=new a.PerspectiveCamera(n.default.camera.fov,s/i,n.default.camera.near,n.default.camera.far),this.threeCamera.position.set(n.default.camera.posX,n.default.camera.posY,n.default.camera.posZ),this.updateSize(t),window.addEventListener("resize",(function(){return r.updateSize(t)}),!1)}var t,r,i;return t=e,(r=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./src/js/app/components/light.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var a=r("./node_modules/three/build/three.module.js"),n=r("./src/js/data/config.js");function s(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,r,i;return t=e,(r=[{key:"init",value:function(){this.ambientLight=new a.AmbientLight(n.default.ambientLight.color),this.ambientLight.visible=n.default.ambientLight.enabled,this.pointLight=new a.PointLight(n.default.pointLight.color,n.default.pointLight.intensity,n.default.pointLight.distance),this.pointLight.position.set(n.default.pointLight.x,n.default.pointLight.y,n.default.pointLight.z),this.pointLight.visible=n.default.pointLight.enabled,this.directionalLight=new a.DirectionalLight(n.default.directionalLight.color,n.default.directionalLight.intensity),this.directionalLight.position.set(n.default.directionalLight.x,n.default.directionalLight.y,n.default.directionalLight.z),this.directionalLight.visible=n.default.directionalLight.enabled,this.directionalLight.castShadow=n.default.shadow.enabled,this.directionalLight.shadow.bias=n.default.shadow.bias,this.directionalLight.shadow.camera.near=n.default.shadow.near,this.directionalLight.shadow.camera.far=n.default.shadow.far,this.directionalLight.shadow.camera.left=n.default.shadow.left,this.directionalLight.shadow.camera.right=n.default.shadow.right,this.directionalLight.shadow.camera.top=n.default.shadow.top,this.directionalLight.shadow.camera.bottom=n.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=n.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=n.default.shadow.mapHeight,n.default.isDev&&(this.directionalLightHelper=new a.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=n.default.shadow.helperEnabled),this.hemiLight=new a.HemisphereLight(n.default.hemiLight.color,n.default.hemiLight.groundColor,n.default.hemiLight.intensity),this.hemiLight.position.set(n.default.hemiLight.x,n.default.hemiLight.y,n.default.hemiLight.z),this.hemiLight.visible=n.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),n.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./src/js/app/components/material.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var a=r("./node_modules/three/build/three.module.js");var n=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new a.MeshBasicMaterial({color:t,side:a.DoubleSide}),this.standard=new a.MeshStandardMaterial({color:t,shading:a.FlatShading,roughness:1,metalness:0,side:a.DoubleSide}),this.wire=new a.MeshBasicMaterial({wireframe:!0})}},"./src/js/app/components/renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var a=r("./node_modules/three/build/three.module.js"),n=r("./src/js/data/config.js");function s(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t,r){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=r,this.threeRenderer=new a.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),r.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=a.PCFSoftShadowMap,n.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return s.updateSize()}),!1),window.addEventListener("resize",(function(){return s.updateSize()}),!1)}var t,r,i;return t=e,(r=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./src/js/app/helpers/stats.js":(e,t,r)=>{"use strict";function a(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var n,s,i,o;r.r(t),r.d(t,{default:()=>l});var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t}var t,r,l;return t=e,l=[{key:"start",value:function(){n("frame").start(),i.start(),n("rAF").tick(),n("FPS").frame(),n("render").start()}},{key:"end",value:function(){n("render").end(),n("frame").end(),n("rStats").start(),n().update(),n("rStats").end()}}],(r=[{key:"setUp",value:function(){s=new BrowserStats,i=new glStats,o=new threeStats(this.renderer.threeRenderer),n=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[s,o]})}}])&&a(t.prototype,r),l&&a(t,l),e}()},"./src/js/app/loaders/GLTFLoader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{GLTFLoader:()=>s});var a=r("./node_modules/three/build/three.module.js");function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var s=function(){function e(e){a.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,r){e[t]=r},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(a.Loader.prototype),{constructor:e,load:function(e,t,r,n){var s,i=this;s=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:a.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var o=function(t){n?n(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new a.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(r){try{i.parse(r,s,(function(r){t(r),i.manager.itemEnd(e)}),o)}catch(e){o(e)}}),r,o)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,n,c){var d,m={};if("string"==typeof e)d=e;else if(a.LoaderUtils.decodeText(new Uint8Array(e,0,4))===u){try{m[r.KHR_BINARY_GLTF]=new h(e)}catch(e){return void(c&&c(e))}d=m[r.KHR_BINARY_GLTF].content}else d=a.LoaderUtils.decodeText(new Uint8Array(e));var y=JSON.parse(d);if(void 0===y.asset||y.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(y.extensionsUsed)for(var b=0;b<y.extensionsUsed.length;++b){var w=y.extensionsUsed[b],T=y.extensionsRequired||[];switch(w){case r.KHR_LIGHTS_PUNCTUAL:m[w]=new i(y);break;case r.KHR_MATERIALS_CLEARCOAT:m[w]=new l;break;case r.KHR_MATERIALS_UNLIT:m[w]=new o;break;case r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:m[w]=new g;break;case r.KHR_DRACO_MESH_COMPRESSION:m[w]=new f(y,this.dracoLoader);break;case r.MSFT_TEXTURE_DDS:m[w]=new s(this.ddsLoader);break;case r.KHR_TEXTURE_TRANSFORM:m[w]=new p;break;case r.KHR_MESH_QUANTIZATION:m[w]=new v;break;default:T.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new N(y,m,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(n,c)}}});var r={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function s(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=r.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=r.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[r.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function o(){this.name=r.KHR_MATERIALS_UNLIT}function l(){this.name=r.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,r=this.lightDefs[e],n=new a.Color(16777215);void 0!==r.color&&n.fromArray(r.color);var s=void 0!==r.range?r.range:0;switch(r.type){case"directional":(t=new a.DirectionalLight(n)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new a.PointLight(n)).distance=s;break;case"spot":(t=new a.SpotLight(n)).distance=s,r.spot=r.spot||{},r.spot.innerConeAngle=void 0!==r.spot.innerConeAngle?r.spot.innerConeAngle:0,r.spot.outerConeAngle=void 0!==r.spot.outerConeAngle?r.spot.outerConeAngle:Math.PI/4,t.angle=r.spot.outerConeAngle,t.penumbra=1-r.spot.innerConeAngle/r.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+r.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==r.intensity&&(t.intensity=r.intensity),t.name=r.name||"light_"+e,Promise.resolve(t)},o.prototype.getMaterialType=function(){return a.MeshBasicMaterial},o.prototype.extendParams=function(e,t,r){var n=[];e.color=new a.Color(1,1,1),e.opacity=1;var s=t.pbrMetallicRoughness;if(s){if(Array.isArray(s.baseColorFactor)){var i=s.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==s.baseColorTexture&&n.push(r.assignTexture(e,"map",s.baseColorTexture))}return Promise.all(n)},l.prototype.getMaterialType=function(){return a.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,r){var n=[],s=t.extensions[this.name];if(void 0!==s.clearcoatFactor&&(e.clearcoat=s.clearcoatFactor),void 0!==s.clearcoatTexture&&n.push(r.assignTexture(e,"clearcoatMap",s.clearcoatTexture)),void 0!==s.clearcoatRoughnessFactor&&(e.clearcoatRoughness=s.clearcoatRoughnessFactor),void 0!==s.clearcoatRoughnessTexture&&n.push(r.assignTexture(e,"clearcoatRoughnessMap",s.clearcoatRoughnessTexture)),void 0!==s.clearcoatNormalTexture&&(n.push(r.assignTexture(e,"clearcoatNormalMap",s.clearcoatNormalTexture)),void 0!==s.clearcoatNormalTexture.scale)){var i=s.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new a.Vector2(i,i)}return Promise.all(n)};var u="glTF",c=1313821514,d=5130562;function h(e){this.name=r.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:a.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==u)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var n=new DataView(e,12),s=0;s<n.byteLength;){var i=n.getUint32(s,!0);s+=4;var o=n.getUint32(s,!0);if(s+=4,o===c){var l=new Uint8Array(e,12+s,i);this.content=a.LoaderUtils.decodeText(l)}else if(o===d){var h=12+s;this.body=e.slice(h,h+i)}s+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function f(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=r.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function p(){this.name=r.KHR_TEXTURE_TRANSFORM}function m(e){a.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),r=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),n=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),s=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),o={specular:{value:(new a.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=o,this.onBeforeCompile=function(e){for(var a in o)e.uniforms[a]=o[a];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",n),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",s),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return o.specular.value},set:function(e){o.specular.value=e}},specularMap:{get:function(){return o.specularMap.value},set:function(e){o.specularMap.value=e}},glossiness:{get:function(){return o.glossiness.value},set:function(e){o.glossiness.value=e}},glossinessMap:{get:function(){return o.glossinessMap.value},set:function(e){o.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return m},extendParams:function(e,t,r){var n=t.extensions[this.name];e.color=new a.Color(1,1,1),e.opacity=1;var s=[];if(Array.isArray(n.diffuseFactor)){var i=n.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==n.diffuseTexture&&s.push(r.assignTexture(e,"map",n.diffuseTexture)),e.emissive=new a.Color(0,0,0),e.glossiness=void 0!==n.glossinessFactor?n.glossinessFactor:1,e.specular=new a.Color(1,1,1),Array.isArray(n.specularFactor)&&e.specular.fromArray(n.specularFactor),void 0!==n.specularGlossinessTexture){var o=n.specularGlossinessTexture;s.push(r.assignTexture(e,"glossinessMap",o)),s.push(r.assignTexture(e,"specularMap",o))}return Promise.all(s)},createMaterial:function(e){var t=new m(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=a.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function v(){this.name=r.KHR_MESH_QUANTIZATION}function y(e,t,r,n){a.Interpolant.call(this,e,t,r,n)}f.prototype.decodePrimitive=function(e,t){var r=this.json,a=this.dracoLoader,n=e.extensions[this.name].bufferView,s=e.extensions[this.name].attributes,i={},o={},l={};for(var u in s){var c=j[u]||u.toLowerCase();i[c]=s[u]}for(u in e.attributes){c=j[u]||u.toLowerCase();if(void 0!==s[u]){var d=r.accessors[e.attributes[u]],h=x[d.componentType];l[c]=h,o[c]=!0===d.normalized}}return t.getDependency("bufferView",n).then((function(e){return new Promise((function(t){a.decodeDracoFile(e,(function(e){for(var r in e.attributes){var a=e.attributes[r],n=o[r];void 0!==n&&(a.normalized=n)}t(e)}),i,l)}))}))},p.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},m.prototype=Object.create(a.MeshStandardMaterial.prototype),m.prototype.constructor=m,m.prototype.copy=function(e){return a.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},y.prototype=Object.create(a.Interpolant.prototype),y.prototype.constructor=y,y.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,r=this.sampleValues,a=this.valueSize,n=e*a*3+a,s=0;s!==a;s++)t[s]=r[n+s];return t},y.prototype.beforeStart_=y.prototype.copySampleValue_,y.prototype.afterEnd_=y.prototype.copySampleValue_,y.prototype.interpolate_=function(e,t,r,a){for(var n=this.resultBuffer,s=this.sampleValues,i=this.valueSize,o=2*i,l=3*i,u=a-t,c=(r-t)/u,d=c*c,h=d*c,f=e*l,p=f-l,m=-2*h+3*d,g=h-d,v=1-m,y=g-d+c,b=0;b!==i;b++){var w=s[p+b+i],T=s[p+b+o]*u,M=s[f+b+i],S=s[f+b]*u;n[b]=v*w+y*T+m*M+g*S}return n};var b=0,w=1,T=2,M=3,S=4,L=5,E=6,x={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},R={9728:a.NearestFilter,9729:a.LinearFilter,9984:a.NearestMipmapNearestFilter,9985:a.LinearMipmapNearestFilter,9986:a.NearestMipmapLinearFilter,9987:a.LinearMipmapLinearFilter},A={33071:a.ClampToEdgeWrapping,33648:a.MirroredRepeatWrapping,10497:a.RepeatWrapping},_={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},j={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},C={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},P={CUBICSPLINE:void 0,LINEAR:a.InterpolateLinear,STEP:a.InterpolateDiscrete},k="OPAQUE",I="MASK",U="BLEND",G={"image/png":a.RGBAFormat,"image/jpeg":a.RGBFormat};function F(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function O(e,t,r){for(var a in r.extensions)void 0===e[a]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[a]=r.extensions[a])}function D(e,t){void 0!==t.extras&&("object"===n(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function H(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var r=0,a=t.weights.length;r<a;r++)e.morphTargetInfluences[r]=t.weights[r];if(t.extras&&Array.isArray(t.extras.targetNames)){var n=t.extras.targetNames;if(e.morphTargetInfluences.length===n.length){e.morphTargetDictionary={};for(r=0,a=n.length;r<a;r++)e.morphTargetDictionary[n[r]]=r}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function B(e){for(var t="",r=Object.keys(e).sort(),a=0,n=r.length;a<n;a++)t+=r[a]+":"+e[r[a]]+";";return t}function N(e,r,n){this.json=e||{},this.extensions=r||{},this.options=n||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new a.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new a.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function V(e,t,r){var n=t.attributes,s=[];function i(t,a){return r.getDependency("accessor",t).then((function(t){e.setAttribute(a,t)}))}for(var o in n){var l=j[o]||o.toLowerCase();l in e.attributes||s.push(i(n[o],l))}if(void 0!==t.indices&&!e.index){var u=r.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));s.push(u)}return D(e,t),function(e,t,r){var n=t.attributes,s=new a.Box3;if(void 0!==n.POSITION){var i=(f=r.json.accessors[n.POSITION]).min,o=f.max;if(void 0!==i&&void 0!==o){s.set(new a.Vector3(i[0],i[1],i[2]),new a.Vector3(o[0],o[1],o[2]));var l=t.targets;if(void 0!==l){for(var u=new a.Vector3,c=new a.Vector3,d=0,h=l.length;d<h;d++){var f,p=l[d];if(void 0!==p.POSITION)i=(f=r.json.accessors[p.POSITION]).min,o=f.max,void 0!==i&&void 0!==o?(c.setX(Math.max(Math.abs(i[0]),Math.abs(o[0]))),c.setY(Math.max(Math.abs(i[1]),Math.abs(o[1]))),c.setZ(Math.max(Math.abs(i[2]),Math.abs(o[2]))),u.max(c)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}s.expandByVector(u)}e.boundingBox=s;var m=new a.Sphere;s.getCenter(m.center),m.radius=s.min.distanceTo(s.max)/2,e.boundingSphere=m}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,r),Promise.all(s).then((function(){return void 0!==t.targets?function(e,t,r){for(var a=!1,n=!1,s=0,i=t.length;s<i&&(void 0!==(u=t[s]).POSITION&&(a=!0),void 0!==u.NORMAL&&(n=!0),!a||!n);s++);if(!a&&!n)return Promise.resolve(e);var o=[],l=[];for(s=0,i=t.length;s<i;s++){var u=t[s];if(a){var c=void 0!==u.POSITION?r.getDependency("accessor",u.POSITION):e.attributes.position;o.push(c)}n&&(c=void 0!==u.NORMAL?r.getDependency("accessor",u.NORMAL):e.attributes.normal,l.push(c))}return Promise.all([Promise.all(o),Promise.all(l)]).then((function(t){var r=t[0],s=t[1];return a&&(e.morphAttributes.position=r),n&&(e.morphAttributes.normal=s),e.morphTargetsRelative=!0,e}))}(e,t.targets,r):e}))}function K(e,t){var r=e.getIndex();if(null===r){var n=[],s=e.getAttribute("position");if(void 0===s)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<s.count;i++)n.push(i);e.setIndex(n),r=e.getIndex()}var o=r.count-2,l=[];if(t===a.TriangleFanDrawMode)for(i=1;i<=o;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<o;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==o&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u}return N.prototype.parse=function(e,t){var r=this,a=this.json,n=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var s={scene:t[0][a.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:a.asset,parser:r,userData:{}};O(n,s,a),D(s,a),e(s)})).catch(t)},N.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],r=this.json.meshes||[],a={},n={},s=0,i=t.length;s<i;s++)for(var o=t[s].joints,l=0,u=o.length;l<u;l++)e[o[l]].isBone=!0;for(var c=0,d=e.length;c<d;c++){var h=e[c];void 0!==h.mesh&&(void 0===a[h.mesh]&&(a[h.mesh]=n[h.mesh]=0),a[h.mesh]++,void 0!==h.skin&&(r[h.mesh].isSkinnedMesh=!0))}this.json.meshReferences=a,this.json.meshUses=n},N.prototype.getDependency=function(e,t){var a=e+":"+t,n=this.cache.get(a);if(!n){switch(e){case"scene":n=this.loadScene(t);break;case"node":n=this.loadNode(t);break;case"mesh":n=this.loadMesh(t);break;case"accessor":n=this.loadAccessor(t);break;case"bufferView":n=this.loadBufferView(t);break;case"buffer":n=this.loadBuffer(t);break;case"material":n=this.loadMaterial(t);break;case"texture":n=this.loadTexture(t);break;case"skin":n=this.loadSkin(t);break;case"animation":n=this.loadAnimation(t);break;case"camera":n=this.loadCamera(t);break;case"light":n=this.extensions[r.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(a,n)}return n},N.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var r=this,a=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(a.map((function(t,a){return r.getDependency(e,a)}))),this.cache.add(e,t)}return t},N.prototype.loadBuffer=function(e){var t=this.json.buffers[e],a=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[r.KHR_BINARY_GLTF].body);var n=this.options;return new Promise((function(e,r){a.load(F(t.uri,n.path),e,void 0,(function(){r(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},N.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var r=t.byteLength||0,a=t.byteOffset||0;return e.slice(a,a+r)}))},N.prototype.loadAccessor=function(e){var t=this,r=this.json,n=this.json.accessors[e];if(void 0===n.bufferView&&void 0===n.sparse)return Promise.resolve(null);var s=[];return void 0!==n.bufferView?s.push(this.getDependency("bufferView",n.bufferView)):s.push(null),void 0!==n.sparse&&(s.push(this.getDependency("bufferView",n.sparse.indices.bufferView)),s.push(this.getDependency("bufferView",n.sparse.values.bufferView))),Promise.all(s).then((function(e){var s,i,o=e[0],l=_[n.type],u=x[n.componentType],c=u.BYTES_PER_ELEMENT,d=c*l,h=n.byteOffset||0,f=void 0!==n.bufferView?r.bufferViews[n.bufferView].byteStride:void 0,p=!0===n.normalized;if(f&&f!==d){var m=Math.floor(h/f),g="InterleavedBuffer:"+n.bufferView+":"+n.componentType+":"+m+":"+n.count,v=t.cache.get(g);v||(s=new u(o,m*f,n.count*f/c),v=new a.InterleavedBuffer(s,f/c),t.cache.add(g,v)),i=new a.InterleavedBufferAttribute(v,l,h%f/c,p)}else s=null===o?new u(n.count*l):new u(o,h,n.count*l),i=new a.BufferAttribute(s,l,p);if(void 0!==n.sparse){var y=_.SCALAR,b=x[n.sparse.indices.componentType],w=n.sparse.indices.byteOffset||0,T=n.sparse.values.byteOffset||0,M=new b(e[1],w,n.sparse.count*y),S=new u(e[2],T,n.sparse.count*l);null!==o&&(i=new a.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var L=0,E=M.length;L<E;L++){var R=M[L];if(i.setX(R,S[L*l]),l>=2&&i.setY(R,S[L*l+1]),l>=3&&i.setZ(R,S[L*l+2]),l>=4&&i.setW(R,S[L*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},N.prototype.loadTexture=function(e){var t,n=this,s=this.json,i=this.options,o=this.textureLoader,l=self.URL||self.webkitURL,u=s.textures[e],c=u.extensions||{},d=(t=c[r.MSFT_TEXTURE_DDS]?s.images[c[r.MSFT_TEXTURE_DDS].source]:s.images[u.source]).uri,h=!1;return void 0!==t.bufferView&&(d=n.getDependency("bufferView",t.bufferView).then((function(e){h=!0;var r=new Blob([e],{type:t.mimeType});return d=l.createObjectURL(r)}))),Promise.resolve(d).then((function(e){var t=i.manager.getHandler(e);return t||(t=c[r.MSFT_TEXTURE_DDS]?n.extensions[r.MSFT_TEXTURE_DDS].ddsLoader:o),new Promise((function(r,a){t.load(F(e,i.path),r,void 0,a)}))})).then((function(e){!0===h&&l.revokeObjectURL(d),e.flipY=!1,u.name&&(e.name=u.name),t.mimeType in G&&(e.format=G[t.mimeType]);var r=(s.samplers||{})[u.sampler]||{};return e.magFilter=R[r.magFilter]||a.LinearFilter,e.minFilter=R[r.minFilter]||a.LinearMipmapLinearFilter,e.wrapS=A[r.wrapS]||a.RepeatWrapping,e.wrapT=A[r.wrapT]||a.RepeatWrapping,e}))},N.prototype.assignTexture=function(e,t,n){var s=this;return this.getDependency("texture",n.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=a.RGBFormat}if(void 0===n.texCoord||0==n.texCoord||"aoMap"===t&&1==n.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+n.texCoord+" for texture "+t+" not yet supported."),s.extensions[r.KHR_TEXTURE_TRANSFORM]){var o=void 0!==n.extensions?n.extensions[r.KHR_TEXTURE_TRANSFORM]:void 0;o&&(i=s.extensions[r.KHR_TEXTURE_TRANSFORM].extendTexture(i,o))}e[t]=i}))},N.prototype.assignFinalMaterial=function(e){var t=e.geometry,r=e.material,n=void 0!==t.attributes.tangent,s=void 0!==t.attributes.color,i=void 0===t.attributes.normal,o=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,u=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var c="PointsMaterial:"+r.uuid,d=this.cache.get(c);d||(d=new a.PointsMaterial,a.Material.prototype.copy.call(d,r),d.color.copy(r.color),d.map=r.map,d.sizeAttenuation=!1,this.cache.add(c,d)),r=d}else if(e.isLine){c="LineBasicMaterial:"+r.uuid;var h=this.cache.get(c);h||(h=new a.LineBasicMaterial,a.Material.prototype.copy.call(h,r),h.color.copy(r.color),this.cache.add(c,h)),r=h}if(n||s||i||o||l){c="ClonedMaterial:"+r.uuid+":";r.isGLTFSpecularGlossinessMaterial&&(c+="specular-glossiness:"),o&&(c+="skinning:"),n&&(c+="vertex-tangents:"),s&&(c+="vertex-colors:"),i&&(c+="flat-shading:"),l&&(c+="morph-targets:"),u&&(c+="morph-normals:");var f=this.cache.get(c);f||(f=r.clone(),o&&(f.skinning=!0),n&&(f.vertexTangents=!0),s&&(f.vertexColors=!0),i&&(f.flatShading=!0),l&&(f.morphTargets=!0),u&&(f.morphNormals=!0),this.cache.add(c,f)),r=f}r.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),r.normalScale&&!n&&(r.normalScale.y=-r.normalScale.y),r.clearcoatNormalScale&&!n&&(r.clearcoatNormalScale.y=-r.clearcoatNormalScale.y),e.material=r},N.prototype.loadMaterial=function(e){var t,n=this,s=this.json,i=this.extensions,o=s.materials[e],l={},u=o.extensions||{},c=[];if(u[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),c.push(d.extendParams(l,o,n))}else if(u[r.KHR_MATERIALS_UNLIT]){var h=i[r.KHR_MATERIALS_UNLIT];t=h.getMaterialType(),c.push(h.extendParams(l,o,n))}else{t=a.MeshStandardMaterial;var f=o.pbrMetallicRoughness||{};if(l.color=new a.Color(1,1,1),l.opacity=1,Array.isArray(f.baseColorFactor)){var p=f.baseColorFactor;l.color.fromArray(p),l.opacity=p[3]}void 0!==f.baseColorTexture&&c.push(n.assignTexture(l,"map",f.baseColorTexture)),l.metalness=void 0!==f.metallicFactor?f.metallicFactor:1,l.roughness=void 0!==f.roughnessFactor?f.roughnessFactor:1,void 0!==f.metallicRoughnessTexture&&(c.push(n.assignTexture(l,"metalnessMap",f.metallicRoughnessTexture)),c.push(n.assignTexture(l,"roughnessMap",f.metallicRoughnessTexture)))}!0===o.doubleSided&&(l.side=a.DoubleSide);var g=o.alphaMode||k;if(g===U?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,g===I&&(l.alphaTest=void 0!==o.alphaCutoff?o.alphaCutoff:.5)),void 0!==o.normalTexture&&t!==a.MeshBasicMaterial&&(c.push(n.assignTexture(l,"normalMap",o.normalTexture)),l.normalScale=new a.Vector2(1,1),void 0!==o.normalTexture.scale&&l.normalScale.set(o.normalTexture.scale,o.normalTexture.scale)),void 0!==o.occlusionTexture&&t!==a.MeshBasicMaterial&&(c.push(n.assignTexture(l,"aoMap",o.occlusionTexture)),void 0!==o.occlusionTexture.strength&&(l.aoMapIntensity=o.occlusionTexture.strength)),void 0!==o.emissiveFactor&&t!==a.MeshBasicMaterial&&(l.emissive=(new a.Color).fromArray(o.emissiveFactor)),void 0!==o.emissiveTexture&&t!==a.MeshBasicMaterial&&c.push(n.assignTexture(l,"emissiveMap",o.emissiveTexture)),u[r.KHR_MATERIALS_CLEARCOAT]){var v=i[r.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),c.push(v.extendParams(l,{extensions:u},n))}return Promise.all(c).then((function(){var e;return e=t===m?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),o.name&&(e.name=o.name),e.map&&(e.map.encoding=a.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=a.sRGBEncoding),D(e,o),o.extensions&&O(i,e,o),e}))},N.prototype.loadGeometries=function(e){var t=this,n=this.extensions,s=this.primitiveCache;function i(e){return n[r.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(r){return V(r,e,t)}))}for(var o,l,u=[],c=0,d=e.length;c<d;c++){var h,f=e[c],p=(l=void 0,(l=(o=f).extensions&&o.extensions[r.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+B(l.attributes):o.indices+":"+B(o.attributes)+":"+o.mode),m=s[p];if(m)u.push(m.promise);else h=f.extensions&&f.extensions[r.KHR_DRACO_MESH_COMPRESSION]?i(f):V(new a.BufferGeometry,f,t),s[p]={primitive:f,promise:h},u.push(h)}return Promise.all(u)},N.prototype.loadMesh=function(e){for(var t,r=this,n=this.json.meshes[e],s=n.primitives,i=[],o=0,l=s.length;o<l;o++){var u=void 0===s[o].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new a.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:a.FrontSide})),t.DefaultMaterial):this.getDependency("material",s[o].material);i.push(u)}return i.push(r.loadGeometries(s)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),o=t[t.length-1],l=[],u=0,c=o.length;u<c;u++){var d,h=o[u],f=s[u],p=i[u];if(f.mode===S||f.mode===L||f.mode===E||void 0===f.mode)!0!==(d=!0===n.isSkinnedMesh?new a.SkinnedMesh(h,p):new a.Mesh(h,p)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),f.mode===L?d.geometry=K(d.geometry,a.TriangleStripDrawMode):f.mode===E&&(d.geometry=K(d.geometry,a.TriangleFanDrawMode));else if(f.mode===w)d=new a.LineSegments(h,p);else if(f.mode===M)d=new a.Line(h,p);else if(f.mode===T)d=new a.LineLoop(h,p);else{if(f.mode!==b)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+f.mode);d=new a.Points(h,p)}Object.keys(d.geometry.morphAttributes).length>0&&H(d,n),d.name=n.name||"mesh_"+e,o.length>1&&(d.name+="_"+u),D(d,n),r.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var m=new a.Group;for(u=0,c=l.length;u<c;u++)m.add(l[u]);return m}))},N.prototype.loadCamera=function(e){var t,r=this.json.cameras[e],n=r[r.type];if(n)return"perspective"===r.type?t=new a.PerspectiveCamera(a.MathUtils.radToDeg(n.yfov),n.aspectRatio||1,n.znear||1,n.zfar||2e6):"orthographic"===r.type&&(t=new a.OrthographicCamera(-n.xmag,n.xmag,n.ymag,-n.ymag,n.znear,n.zfar)),r.name&&(t.name=r.name),D(t,r),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},N.prototype.loadSkin=function(e){var t=this.json.skins[e],r={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(r):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return r.inverseBindMatrices=e,r}))},N.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],r=[],n=[],s=[],i=[],o=[],l=0,u=t.channels.length;l<u;l++){var c=t.channels[l],d=t.samplers[c.sampler],h=c.target,f=void 0!==h.node?h.node:h.id,p=void 0!==t.parameters?t.parameters[d.input]:d.input,m=void 0!==t.parameters?t.parameters[d.output]:d.output;r.push(this.getDependency("node",f)),n.push(this.getDependency("accessor",p)),s.push(this.getDependency("accessor",m)),i.push(d),o.push(h)}return Promise.all([Promise.all(r),Promise.all(n),Promise.all(s),Promise.all(i),Promise.all(o)]).then((function(r){for(var n=r[0],s=r[1],i=r[2],o=r[3],l=r[4],u=[],c=0,d=n.length;c<d;c++){var h=n[c],f=s[c],p=i[c],m=o[c],g=l[c];if(void 0!==h){var v;switch(h.updateMatrix(),h.matrixAutoUpdate=!0,C[g.path]){case C.weights:v=a.NumberKeyframeTrack;break;case C.rotation:v=a.QuaternionKeyframeTrack;break;case C.position:case C.scale:default:v=a.VectorKeyframeTrack}var b=h.name?h.name:h.uuid,w=void 0!==m.interpolation?P[m.interpolation]:a.InterpolateLinear,T=[];C[g.path]===C.weights?h.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&T.push(e.name?e.name:e.uuid)})):T.push(b);var M=p.array;if(p.normalized){var S;if(M.constructor===Int8Array)S=1/127;else if(M.constructor===Uint8Array)S=1/255;else if(M.constructor==Int16Array)S=1/32767;else{if(M.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");S=1/65535}for(var L=new Float32Array(M.length),E=0,x=M.length;E<x;E++)L[E]=M[E]*S;M=L}for(E=0,x=T.length;E<x;E++){var R=new v(T[E]+"."+C[g.path],f.array,M,w);"CUBICSPLINE"===m.interpolation&&(R.createInterpolant=function(e){return new y(this.times,this.values,this.getValueSize()/3,e)},R.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),u.push(R)}}}var A=t.name?t.name:"animation_"+e;return new a.AnimationClip(A,void 0,u)}))},N.prototype.loadNode=function(e){var t,n=this.json,s=this.extensions,i=this,o=n.meshReferences,l=n.meshUses,u=n.nodes[e];return(t=[],void 0!==u.mesh&&t.push(i.getDependency("mesh",u.mesh).then((function(e){var t;if(o[u.mesh]>1){var r=l[u.mesh]++;(t=e.clone()).name+="_instance_"+r}else t=e;return void 0!==u.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,r=u.weights.length;t<r;t++)e.morphTargetInfluences[t]=u.weights[t]})),t}))),void 0!==u.camera&&t.push(i.getDependency("camera",u.camera)),u.extensions&&u.extensions[r.KHR_LIGHTS_PUNCTUAL]&&void 0!==u.extensions[r.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",u.extensions[r.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===u.isBone?new a.Bone:e.length>1?new a.Group:1===e.length?e[0]:new a.Object3D)!==e[0])for(var r=0,n=e.length;r<n;r++)t.add(e[r]);if(u.name&&(t.userData.name=u.name,t.name=a.PropertyBinding.sanitizeNodeName(u.name)),D(t,u),u.extensions&&O(s,t,u),void 0!==u.matrix){var i=new a.Matrix4;i.fromArray(u.matrix),t.applyMatrix4(i)}else void 0!==u.translation&&t.position.fromArray(u.translation),void 0!==u.rotation&&t.quaternion.fromArray(u.rotation),void 0!==u.scale&&t.scale.fromArray(u.scale);return t}))},N.prototype.loadScene=function(){function e(t,r,n,s){var i=n.nodes[t];return s.getDependency("node",t).then((function(e){return void 0===i.skin?e:s.getDependency("skin",i.skin).then((function(e){for(var r=[],a=0,n=(t=e).joints.length;a<n;a++)r.push(s.getDependency("node",t.joints[a]));return Promise.all(r)})).then((function(r){return e.traverse((function(e){if(e.isMesh){for(var n=[],s=[],i=0,o=r.length;i<o;i++){var l=r[i];if(l){n.push(l);var u=new a.Matrix4;void 0!==t.inverseBindMatrices&&u.fromArray(t.inverseBindMatrices.array,16*i),s.push(u)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new a.Skeleton(n,s),e.matrixWorld)}})),e}));var t})).then((function(t){r.add(t);var a=[];if(i.children)for(var o=i.children,l=0,u=o.length;l<u;l++){var c=o[l];a.push(e(c,t,n,s))}return Promise.all(a)}))}return function(t){var r=this.json,n=this.extensions,s=this.json.scenes[t],i=new a.Group;s.name&&(i.name=s.name),D(i,s),s.extensions&&O(n,i,s);for(var o=s.nodes||[],l=[],u=0,c=o.length;u<c;u++)l.push(e(o[u],i,r,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/main.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>p});var a=r("./node_modules/three/build/three.module.js"),n=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),s=r("./src/js/app/components/renderer.js"),i=r("./src/js/app/components/camera.js"),o=r("./src/js/app/components/light.js"),l=r("./src/js/app/helpers/stats.js"),u=r("./src/js/app/model/texture.js"),c=r("./src/js/app/model/model.js"),d=r("./src/js/app/managers/interaction.js"),h=r("./src/js/data/config.js");function f(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var p=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new a.Clock,this.scene=new a.Scene,this.scene.fog=new a.FogExp2(h.default.fog.color,h.default.fog.near),window.devicePixelRatio&&(h.default.dpr=window.devicePixelRatio),this.renderer=new s.default(this.scene,t),this.camera=new i.default(this.renderer.threeRenderer),this.light=new o.default(this.scene);["ambient","directional","point","hemi"].forEach((function(e){return r.light.place(e)})),h.default.isDev&&h.default.isShowingStats&&(this.stats=new l.default(this.renderer),this.stats.setUp()),this.texture=new u.default,this.texture.load().then((function(){r.manager=new a.LoadingManager,r.playerModel=new c.default(r.scene,r.manager,r.texture.textures),r.playerModel.load(h.default.models.player),r.manager.onProgress=function(e,t,r){console.log("".concat(e,": ").concat(t," ").concat(r))},r.manager.onLoad=function(){new d.default(r.renderer.threeRenderer,r.scene,r.camera.threeCamera),h.default.isLoaded=!0,r.container.querySelector("#loading").style.display="none"}})),this.render()}var t,r,p;return t=e,(r=[{key:"render",value:function(){h.default.isDev&&h.default.isShowingStats&&l.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),h.default.isDev&&h.default.isShowingStats&&l.default.end(),n.default.update(),requestAnimationFrame(this.render.bind(this))}}])&&f(t.prototype,r),p&&f(t,p),e}()},"./src/js/app/managers/interaction.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var a=r("./src/js/utils/keyboard.js"),n=r("./src/js/utils/helpers.js"),s=r("./src/js/data/config.js");function i(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(t,r,s){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=r,this.camera=s,this.timeout=null,this.keyboard=new a.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return n.default.throttle(i.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return i.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return i.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||i.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,r,o;return t=e,(r=[{key:"onMouseOver",value:function(e){e.preventDefault(),s.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),s.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){s.default.isMouseMoving=!1}),200),s.default.isMouseMoving=!0}}])&&i(t.prototype,r),o&&i(t,o),e}()},"./src/js/app/model/model.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var a=r("./node_modules/three/build/three.module.js"),n=(r("./src/js/app/components/material.js"),r("./src/js/utils/helpers.js")),s=r("./src/js/utils/bufferGeometryUtils.js"),i=r("./src/js/app/loaders/GLTFLoader.js"),o=r("./src/js/data/config.js");function l(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var u=function(){function e(t,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.textures=a,this.manager=r,this.obj=null,this.ref=null}var t,r,u;return t=e,(r=[{key:"load",value:function(e){var t=this;new i.GLTFLoader(this.manager).load(e.path,(function(r){var n,i=r.scene;o.default.shadow.enabled&&i.traverse((function(t){(t.isMesh||t.isLight)&&(t.castShadow=!0),t.isMesh&&(t.material.wireframe=o.default.mesh.wireframe,(n=t).scale.multiplyScalar(e.scale))})),t.obj=n,s.BufferGeometryUtils.computeTangents(n.geometry);var l=new a.Group;l.scale.multiplyScalar(.25),t.scene.add(l),t.ref=l,l.updateMatrixWorld(!0),l.add(n),t.scene.add(i)}),n.default.logProgress(),n.default.logError())}},{key:"unload",value:function(){this.scene.remove(this.ref)}}])&&l(t.prototype,r),u&&l(t,u),e}()},"./src/js/app/model/texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var a=r("./node_modules/three/build/three.module.js"),n=r("./node_modules/es6-promise/dist/es6-promise.js"),s=r("./src/js/utils/helpers.js"),i=r("./src/js/data/config.js");function o(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,r,l;return t=e,(r=[{key:"load",value:function(){var e=this,t=new a.TextureLoader,r=i.default.maxAnisotropy,o=i.default.texture.imageFiles,l=[];return t.setPath(i.default.texture.path),o.forEach((function(e){l.push(new n.Promise((function(n,i){t.load(e.image,(function(t){t.anisotropy=r;var s={};s[e.name]=t,s[e.name]instanceof a.Texture&&n(s)}),s.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),n.Promise.all(l).then((function(t){for(var r=0;r<t.length;r++)e.textures[Object.keys(t[r])[0]]=t[r][Object.keys(t[r])[0]]}),(function(e){return console.log(e)}))}}])&&o(t.prototype,r),l&&o(t,l),e}()},"./src/js/data/config.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,models:{player:{path:"./assets/models/playerSpaceship.glb",scale:1}},texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!1,wireframe:!1,translucent:!0,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:35,near:2,far:1e3,aspect:16/9,posX:0,posY:5,posZ:-15},controls:{autoRotate:!1,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/bufferGeometryUtils.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BufferGeometryUtils:()=>n});var a=r("./node_modules/three/build/three.module.js"),n={computeTangents:function(e){var t=e.index,r=e.attributes;if(null!==t&&void 0!==r.position&&void 0!==r.normal&&void 0!==r.uv){var n=t.array,s=r.position.array,i=r.normal.array,o=r.uv.array,l=s.length/3;void 0===r.tangent&&e.setAttribute("tangent",new a.BufferAttribute(new Float32Array(4*l),4));for(var u=r.tangent.array,c=[],d=[],h=0;h<l;h++)c[h]=new a.Vector3,d[h]=new a.Vector3;var f=new a.Vector3,p=new a.Vector3,m=new a.Vector3,g=new a.Vector2,v=new a.Vector2,y=new a.Vector2,b=new a.Vector3,w=new a.Vector3,T=e.groups;0===T.length&&(T=[{start:0,count:n.length}]);h=0;for(var M=T.length;h<M;++h)for(var S=k=(P=T[h]).start,L=k+P.count;S<L;S+=3)I(n[S+0],n[S+1],n[S+2]);var E,x,R,A=new a.Vector3,_=new a.Vector3,j=new a.Vector3,C=new a.Vector3;for(h=0,M=T.length;h<M;++h){var P,k;for(S=k=(P=T[h]).start,L=k+P.count;S<L;S+=3)U(n[S+0]),U(n[S+1]),U(n[S+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function I(e,t,r){f.fromArray(s,3*e),p.fromArray(s,3*t),m.fromArray(s,3*r),g.fromArray(o,2*e),v.fromArray(o,2*t),y.fromArray(o,2*r),p.sub(f),m.sub(f),v.sub(g),y.sub(g);var a=1/(v.x*y.y-y.x*v.y);isFinite(a)&&(b.copy(p).multiplyScalar(y.y).addScaledVector(m,-v.y).multiplyScalar(a),w.copy(m).multiplyScalar(v.x).addScaledVector(p,-y.x).multiplyScalar(a),c[e].add(b),c[t].add(b),c[r].add(b),d[e].add(w),d[t].add(w),d[r].add(w))}function U(e){j.fromArray(i,3*e),C.copy(j),x=c[e],A.copy(x),A.sub(j.multiplyScalar(j.dot(x))).normalize(),_.crossVectors(C,x),R=_.dot(d[e]),E=R<0?-1:1,u[4*e]=A.x,u[4*e+1]=A.y,u[4*e+2]=A.z,u[4*e+3]=E}},mergeBufferGeometries:function(e,t){for(var r=null!==e[0].index,n=new Set(Object.keys(e[0].attributes)),s=new Set(Object.keys(e[0].morphAttributes)),i={},o={},l=e[0].morphTargetsRelative,u=new a.BufferGeometry,c=0,d=0;d<e.length;++d){var h=e[d],f=0;if(r!==(null!==h.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var p in h.attributes){if(!n.has(p))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+p+'" attribute exists among all geometries, or in none of them.'),null;void 0===i[p]&&(i[p]=[]),i[p].push(h.attributes[p]),f++}if(f!==n.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==h.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var p in h.morphAttributes){if(!s.has(p))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===o[p]&&(o[p]=[]),o[p].push(h.morphAttributes[p])}if(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(h.userData),t){var m;if(r)m=h.index.count;else{if(void 0===h.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;m=h.attributes.position.count}u.addGroup(c,m,d),c+=m}}if(r){var g=0,v=[];for(d=0;d<e.length;++d){for(var y=e[d].index,b=0;b<y.count;++b)v.push(y.getX(b)+g);g+=e[d].attributes.position.count}u.setIndex(v)}for(var p in i){var w=this.mergeBufferAttributes(i[p]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+p+" attribute."),null;u.setAttribute(p,w)}for(var p in o){var T=o[p][0].length;if(0===T)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[p]=[];for(d=0;d<T;++d){var M=[];for(b=0;b<o[p].length;++b)M.push(o[p][b][d]);var S=this.mergeBufferAttributes(M);if(!S)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+p+" morphAttribute."),null;u.morphAttributes[p].push(S)}}return u},mergeBufferAttributes:function(e){for(var t,r,n,s=0,i=0;i<e.length;++i){var o=e[i];if(o.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=o.array.constructor),t!==o.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=o.itemSize),r!==o.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===n&&(n=o.normalized),n!==o.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;s+=o.array.length}var l=new t(s),u=0;for(i=0;i<e.length;++i)l.set(e[i].array,u),u+=e[i].array.length;return new a.BufferAttribute(l,r,n)},interleaveAttributes:function(e){for(var t,r=0,n=0,s=0,i=e.length;s<i;++s){var o=e[s];if(void 0===t&&(t=o.array.constructor),t!==o.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;r+=o.array.length,n+=o.itemSize}var l=new a.InterleavedBuffer(new t(r),n),u=0,c=[],d=["getX","getY","getZ","getW"],h=["setX","setY","setZ","setW"],f=0;for(i=e.length;f<i;f++){var p=(o=e[f]).itemSize,m=o.count,g=new a.InterleavedBufferAttribute(l,p,u,o.normalized);c.push(g),u+=p;for(var v=0;v<m;v++)for(var y=0;y<p;y++)g[h[y]](v,o[d[y]](v))}return c},estimateBytesUsed:function(e){var t=0;for(var r in e.attributes){var a=e.getAttribute(r);t+=a.count*a.itemSize*a.array.BYTES_PER_ELEMENT}var n=e.getIndex();return t+=n?n.count*n.itemSize*n.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var r={},n=e.getIndex(),s=e.getAttribute("position"),i=n?n.count:s.count,o=0,l=Object.keys(e.attributes),u={},c={},d=[],h=["getX","getY","getZ","getW"],f=0,p=l.length;f<p;f++){u[w=l[f]]=[],(L=e.morphAttributes[w])&&(c[w]=new Array(L.length).fill().map((function(){return[]})))}var m=Math.log10(1/t),g=Math.pow(10,m);for(f=0;f<i;f++){var v=n?n.getX(f):f,y="",b=0;for(p=l.length;b<p;b++)for(var w=l[b],T=(S=e.getAttribute(w)).itemSize,M=0;M<T;M++)y+="".concat(~~(S[h[M]](v)*g),",");if(y in r)d.push(r[y]);else{for(b=0,p=l.length;b<p;b++){w=l[b];var S=e.getAttribute(w),L=e.morphAttributes[w],E=(T=S.itemSize,u[w]),x=c[w];for(M=0;M<T;M++){var R=h[M];if(E.push(S[R](v)),L)for(var A=0,_=L.length;A<_;A++)x[A].push(L[A][R](v))}}r[y]=o,d.push(o),o++}}var j=e.clone();for(f=0,p=l.length;f<p;f++){w=l[f];var C=e.getAttribute(w),P=new C.array.constructor(u[w]);S=new a.BufferAttribute(P,C.itemSize,C.normalized);if(j.setAttribute(w,S),w in c)for(b=0;b<c[w].length;b++){var k=e.morphAttributes[w][b],I=(P=new k.array.constructor(c[w][b]),new a.BufferAttribute(P,k.itemSize,k.normalized));j.morphAttributes[w][b]=I}}return j.setIndex(d),j},toTrianglesDrawMode:function(e,t){if(t===a.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===a.TriangleFanDrawMode||t===a.TriangleStripDrawMode){var r=e.getIndex();if(null===r){var n=[],s=e.getAttribute("position");if(void 0===s)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<s.count;i++)n.push(i);e.setIndex(n),r=e.getIndex()}var o=r.count-2,l=[];if(t===a.TriangleFanDrawMode)for(i=1;i<=o;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<o;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==o&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u.clearGroups(),u}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,r,a;t=void 0!==(e=e||{}).parent?e.parent:document.body,r=void 0!==e.id?e.id:"oldie",(a=this.getWebGLErrorMessage()).id=r,t.appendChild(a)}}},"./src/js/utils/helpers.js":(e,t,r)=>{"use strict";function a(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}r.r(t),r.d(t,{default:()=>n});var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,n=[{key:"throttle",value:function(e,t,r){var a,n;return t||(t=250),function(){var s=r||this,i=+new Date,o=arguments;a&&i<a+t?(clearTimeout(n),n=setTimeout((function(){a=i,e.apply(s,o)}),t)):(a=i,e.apply(s,o))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,r){return function(a){e[t]=r[a],e.needsUpdate=!0}}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}()},"./src/js/utils/keyboard.js":(e,t,r)=>{"use strict";function a(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}r.r(t),r.d(t,{default:()=>s});var n={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},s=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return r.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return r.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return r.onBlur}),!1)}var t,r,s;return t=e,(r=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),r=0;r<t.length;r++){var a=t[r],s=!1;if(s=-1!=Object.keys(n).indexOf(a)?this.keyCodes[n[a]]:this.keyCodes[a.toUpperCase().charCodeAt(0)],!s)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var r=n,a=Object.keys(r),s=t.split("+"),i=0;i<s.length;i++){var o=s[i],l=!1;if("shift"===o?l=!!e.shiftKey:"ctrl"===o?l=!!e.ctrlKey:"alt"===o?l=!!e.altKey:"meta"===o?l=!!e.metaKey:-1!==a.indexOf(o)?l=e.keyCode===r[o]:e.keyCode===o.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&a(t.prototype,r),s&&a(t,s),e}()},"./src/css/app.scss":(e,t,r)=>{"use strict";r.r(t)}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,