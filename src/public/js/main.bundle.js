/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,r)=>{"use strict";r.r(t);var n=r("./src/js/data/config.js"),a=r("./src/js/utils/detector.js"),o=r("./src/js/app/main.js");r("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),n.default.isDev=!0,function(){if(a.default.webgl){var e=document.getElementById("appContainer");new o.default(e)}else a.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/data/config.js");function o(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t){var r,s,i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var l=t.domElement.width,u=t.domElement.height;this.threeCamera=new n.PerspectiveCamera(a.default.camera.fov,l/u,a.default.camera.near,a.default.camera.far),(r=this.threeCamera.position).set.apply(r,o(a.default.camera.position)),(s=this.threeCamera).lookAt.apply(s,o(a.default.camera.lookAt)),this.updateSize(t),window.addEventListener("resize",(function(){return i.updateSize(t)}),!1)}var t,r,s;return t=e,(r=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&i(t.prototype,r),s&&i(t,s),e}()},"./src/js/app/components/geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/data/config.js");function o(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.geo=null}var t,r,s;return t=e,(r=[{key:"make",value:function(e){var t=this;return"plane"===e?function(e,r){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.geo=new n.PlaneGeometry(e,r,a,o)}:"sphere"===e?function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:32;t.geo=new n.SphereGeometry(e,r,a)}:"cylinder"===e?function(e,r){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:32,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.geo=new n.CylinderGeometry(e,e,r,a,o)}:void 0}},{key:"place",value:function(e,t,r){var s,i;this.mesh=new n.Mesh(this.geo,r),(s=this.mesh.position).set.apply(s,o(e)),(i=this.mesh.rotation).set.apply(i,o(t)),a.default.shadow.enabled&&(this.mesh.receiveShadow=!0),this.scene.add(this.mesh)}},{key:"unload",value:function(){this.scene.remove(this.mesh),this.mesh.geometry.dispose()}}])&&i(t.prototype,r),s&&i(t,s),e}()},"./src/js/app/components/light.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/data/config.js");function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,r,s;return t=e,(r=[{key:"init",value:function(){this.ambientLight=new n.AmbientLight(a.default.ambientLight.color),this.ambientLight.visible=a.default.ambientLight.enabled,this.pointLight=new n.PointLight(a.default.pointLight.color,a.default.pointLight.intensity,a.default.pointLight.distance),this.pointLight.position.set(a.default.pointLight.x,a.default.pointLight.y,a.default.pointLight.z),this.pointLight.visible=a.default.pointLight.enabled,this.directionalLight=new n.DirectionalLight(a.default.directionalLight.color,a.default.directionalLight.intensity),this.directionalLight.position.set(a.default.directionalLight.x,a.default.directionalLight.y,a.default.directionalLight.z),this.directionalLight.visible=a.default.directionalLight.enabled,this.directionalLight.castShadow=a.default.shadow.enabled,this.directionalLight.shadow.bias=a.default.shadow.bias,this.directionalLight.shadow.camera.near=a.default.shadow.near,this.directionalLight.shadow.camera.far=a.default.shadow.far,this.directionalLight.shadow.camera.left=a.default.shadow.left,this.directionalLight.shadow.camera.right=a.default.shadow.right,this.directionalLight.shadow.camera.top=a.default.shadow.top,this.directionalLight.shadow.camera.bottom=a.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=a.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=a.default.shadow.mapHeight,a.default.isDev&&(this.directionalLightHelper=new n.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=a.default.shadow.helperEnabled),this.hemiLight=new n.HemisphereLight(a.default.hemiLight.color,a.default.hemiLight.groundColor,a.default.hemiLight.intensity),this.hemiLight.position.set(a.default.hemiLight.x,a.default.hemiLight.y,a.default.hemiLight.z),this.hemiLight.visible=a.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),a.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&o(t.prototype,r),s&&o(t,s),e}()},"./src/js/app/components/material.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/three/build/three.module.js");var a=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new n.MeshBasicMaterial({color:t,side:n.DoubleSide}),this.standard=new n.MeshStandardMaterial({color:t,roughness:1,metalness:0,side:n.DoubleSide}),this.wire=new n.MeshBasicMaterial({wireframe:!0})}},"./src/js/app/components/renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/data/config.js");function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=r,this.threeRenderer=new n.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),r.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=n.PCFSoftShadowMap,a.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return o.updateSize()}),!1),window.addEventListener("resize",(function(){return o.updateSize()}),!1)}var t,r,s;return t=e,(r=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&o(t.prototype,r),s&&o(t,s),e}()},"./src/js/app/helpers/stats.js":(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a,o,s,i;r.r(t),r.d(t,{default:()=>l});var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t}var t,r,l;return t=e,l=[{key:"start",value:function(){a("frame").start(),s.start(),a("rAF").tick(),a("FPS").frame(),a("render").start()}},{key:"end",value:function(){a("render").end(),a("frame").end(),a("rStats").start(),a().update(),a("rStats").end()}}],(r=[{key:"setUp",value:function(){o=new BrowserStats,s=new glStats,i=new threeStats(this.renderer.threeRenderer),a=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[o,i]})}}])&&n(t.prototype,r),l&&n(t,l),e}()},"./src/js/app/loaders/GLTFLoader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{GLTFLoader:()=>o});var n=r("./node_modules/three/build/three.module.js");function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=function(){function e(e){n.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,r){e[t]=r},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(n.Loader.prototype),{constructor:e,load:function(e,t,r,a){var o,s=this;o=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:n.LoaderUtils.extractUrlBase(e),s.manager.itemStart(e);var i=function(t){a?a(t):console.error(t),s.manager.itemError(e),s.manager.itemEnd(e)},l=new n.FileLoader(s.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===s.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(r){try{s.parse(r,o,(function(r){t(r),s.manager.itemEnd(e)}),i)}catch(e){i(e)}}),r,i)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,a,c){var f,m={};if("string"==typeof e)f=e;else if(n.LoaderUtils.decodeText(new Uint8Array(e,0,4))===u){try{m[r.KHR_BINARY_GLTF]=new d(e)}catch(e){return void(c&&c(e))}f=m[r.KHR_BINARY_GLTF].content}else f=n.LoaderUtils.decodeText(new Uint8Array(e));var y=JSON.parse(f);if(void 0===y.asset||y.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(y.extensionsUsed)for(var b=0;b<y.extensionsUsed.length;++b){var w=y.extensionsUsed[b],S=y.extensionsRequired||[];switch(w){case r.KHR_LIGHTS_PUNCTUAL:m[w]=new s(y);break;case r.KHR_MATERIALS_CLEARCOAT:m[w]=new l;break;case r.KHR_MATERIALS_UNLIT:m[w]=new i;break;case r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:m[w]=new g;break;case r.KHR_DRACO_MESH_COMPRESSION:m[w]=new p(y,this.dracoLoader);break;case r.MSFT_TEXTURE_DDS:m[w]=new o(this.ddsLoader);break;case r.KHR_TEXTURE_TRANSFORM:m[w]=new h;break;case r.KHR_MESH_QUANTIZATION:m[w]=new v;break;default:S.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new N(y,m,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(a,c)}}});var r={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function o(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=r.MSFT_TEXTURE_DDS,this.ddsLoader=e}function s(e){this.name=r.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[r.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function i(){this.name=r.KHR_MATERIALS_UNLIT}function l(){this.name=r.KHR_MATERIALS_CLEARCOAT}s.prototype.loadLight=function(e){var t,r=this.lightDefs[e],a=new n.Color(16777215);void 0!==r.color&&a.fromArray(r.color);var o=void 0!==r.range?r.range:0;switch(r.type){case"directional":(t=new n.DirectionalLight(a)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new n.PointLight(a)).distance=o;break;case"spot":(t=new n.SpotLight(a)).distance=o,r.spot=r.spot||{},r.spot.innerConeAngle=void 0!==r.spot.innerConeAngle?r.spot.innerConeAngle:0,r.spot.outerConeAngle=void 0!==r.spot.outerConeAngle?r.spot.outerConeAngle:Math.PI/4,t.angle=r.spot.outerConeAngle,t.penumbra=1-r.spot.innerConeAngle/r.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+r.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==r.intensity&&(t.intensity=r.intensity),t.name=r.name||"light_"+e,Promise.resolve(t)},i.prototype.getMaterialType=function(){return n.MeshBasicMaterial},i.prototype.extendParams=function(e,t,r){var a=[];e.color=new n.Color(1,1,1),e.opacity=1;var o=t.pbrMetallicRoughness;if(o){if(Array.isArray(o.baseColorFactor)){var s=o.baseColorFactor;e.color.fromArray(s),e.opacity=s[3]}void 0!==o.baseColorTexture&&a.push(r.assignTexture(e,"map",o.baseColorTexture))}return Promise.all(a)},l.prototype.getMaterialType=function(){return n.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,r){var a=[],o=t.extensions[this.name];if(void 0!==o.clearcoatFactor&&(e.clearcoat=o.clearcoatFactor),void 0!==o.clearcoatTexture&&a.push(r.assignTexture(e,"clearcoatMap",o.clearcoatTexture)),void 0!==o.clearcoatRoughnessFactor&&(e.clearcoatRoughness=o.clearcoatRoughnessFactor),void 0!==o.clearcoatRoughnessTexture&&a.push(r.assignTexture(e,"clearcoatRoughnessMap",o.clearcoatRoughnessTexture)),void 0!==o.clearcoatNormalTexture&&(a.push(r.assignTexture(e,"clearcoatNormalMap",o.clearcoatNormalTexture)),void 0!==o.clearcoatNormalTexture.scale)){var s=o.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new n.Vector2(s,s)}return Promise.all(a)};var u="glTF",c=1313821514,f=5130562;function d(e){this.name=r.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:n.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==u)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var a=new DataView(e,12),o=0;o<a.byteLength;){var s=a.getUint32(o,!0);o+=4;var i=a.getUint32(o,!0);if(o+=4,i===c){var l=new Uint8Array(e,12+o,s);this.content=n.LoaderUtils.decodeText(l)}else if(i===f){var d=12+o;this.body=e.slice(d,d+s)}o+=s}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function p(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=r.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function h(){this.name=r.KHR_TEXTURE_TRANSFORM}function m(e){n.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),r=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),a=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),o=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),s=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),i={specular:{value:(new n.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=i,this.onBeforeCompile=function(e){for(var n in i)e.uniforms[n]=i[n];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",a),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",o),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",s)},Object.defineProperties(this,{specular:{get:function(){return i.specular.value},set:function(e){i.specular.value=e}},specularMap:{get:function(){return i.specularMap.value},set:function(e){i.specularMap.value=e}},glossiness:{get:function(){return i.glossiness.value},set:function(e){i.glossiness.value=e}},glossinessMap:{get:function(){return i.glossinessMap.value},set:function(e){i.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return m},extendParams:function(e,t,r){var a=t.extensions[this.name];e.color=new n.Color(1,1,1),e.opacity=1;var o=[];if(Array.isArray(a.diffuseFactor)){var s=a.diffuseFactor;e.color.fromArray(s),e.opacity=s[3]}if(void 0!==a.diffuseTexture&&o.push(r.assignTexture(e,"map",a.diffuseTexture)),e.emissive=new n.Color(0,0,0),e.glossiness=void 0!==a.glossinessFactor?a.glossinessFactor:1,e.specular=new n.Color(1,1,1),Array.isArray(a.specularFactor)&&e.specular.fromArray(a.specularFactor),void 0!==a.specularGlossinessTexture){var i=a.specularGlossinessTexture;o.push(r.assignTexture(e,"glossinessMap",i)),o.push(r.assignTexture(e,"specularMap",i))}return Promise.all(o)},createMaterial:function(e){var t=new m(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=n.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function v(){this.name=r.KHR_MESH_QUANTIZATION}function y(e,t,r,a){n.Interpolant.call(this,e,t,r,a)}p.prototype.decodePrimitive=function(e,t){var r=this.json,n=this.dracoLoader,a=e.extensions[this.name].bufferView,o=e.extensions[this.name].attributes,s={},i={},l={};for(var u in o){var c=_[u]||u.toLowerCase();s[c]=o[u]}for(u in e.attributes){c=_[u]||u.toLowerCase();if(void 0!==o[u]){var f=r.accessors[e.attributes[u]],d=j[f.componentType];l[c]=d,i[c]=!0===f.normalized}}return t.getDependency("bufferView",a).then((function(e){return new Promise((function(t){n.decodeDracoFile(e,(function(e){for(var r in e.attributes){var n=e.attributes[r],a=i[r];void 0!==a&&(n.normalized=a)}t(e)}),s,l)}))}))},h.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},m.prototype=Object.create(n.MeshStandardMaterial.prototype),m.prototype.constructor=m,m.prototype.copy=function(e){return n.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},y.prototype=Object.create(n.Interpolant.prototype),y.prototype.constructor=y,y.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,a=e*n*3+n,o=0;o!==n;o++)t[o]=r[a+o];return t},y.prototype.beforeStart_=y.prototype.copySampleValue_,y.prototype.afterEnd_=y.prototype.copySampleValue_,y.prototype.interpolate_=function(e,t,r,n){for(var a=this.resultBuffer,o=this.sampleValues,s=this.valueSize,i=2*s,l=3*s,u=n-t,c=(r-t)/u,f=c*c,d=f*c,p=e*l,h=p-l,m=-2*d+3*f,g=d-f,v=1-m,y=g-f+c,b=0;b!==s;b++){var w=o[h+b+s],S=o[h+b+i]*u,T=o[p+b+s],M=o[p+b]*u;a[b]=v*w+y*S+m*T+g*M}return a};var b=0,w=1,S=2,T=3,M=4,E=5,L=6,j={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},x={9728:n.NearestFilter,9729:n.LinearFilter,9984:n.NearestMipmapNearestFilter,9985:n.LinearMipmapNearestFilter,9986:n.NearestMipmapLinearFilter,9987:n.LinearMipmapLinearFilter},A={33071:n.ClampToEdgeWrapping,33648:n.MirroredRepeatWrapping,10497:n.RepeatWrapping},R={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},_={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},O={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},C={CUBICSPLINE:void 0,LINEAR:n.InterpolateLinear,STEP:n.InterpolateDiscrete},I="OPAQUE",P="MASK",k="BLEND",U={"image/png":n.RGBAFormat,"image/jpeg":n.RGBFormat};function G(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function F(e,t,r){for(var n in r.extensions)void 0===e[n]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[n]=r.extensions[n])}function B(e,t){void 0!==t.extras&&("object"===a(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function H(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var r=0,n=t.weights.length;r<n;r++)e.morphTargetInfluences[r]=t.weights[r];if(t.extras&&Array.isArray(t.extras.targetNames)){var a=t.extras.targetNames;if(e.morphTargetInfluences.length===a.length){e.morphTargetDictionary={};for(r=0,n=a.length;r<n;r++)e.morphTargetDictionary[a[r]]=r}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function D(e){for(var t="",r=Object.keys(e).sort(),n=0,a=r.length;n<a;n++)t+=r[n]+":"+e[r[n]]+";";return t}function N(e,r,a){this.json=e||{},this.extensions=r||{},this.options=a||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new n.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new n.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,r){var a=t.attributes,o=[];function s(t,n){return r.getDependency("accessor",t).then((function(t){e.setAttribute(n,t)}))}for(var i in a){var l=_[i]||i.toLowerCase();l in e.attributes||o.push(s(a[i],l))}if(void 0!==t.indices&&!e.index){var u=r.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));o.push(u)}return B(e,t),function(e,t,r){var a=t.attributes,o=new n.Box3;if(void 0!==a.POSITION){var s=(p=r.json.accessors[a.POSITION]).min,i=p.max;if(void 0!==s&&void 0!==i){o.set(new n.Vector3(s[0],s[1],s[2]),new n.Vector3(i[0],i[1],i[2]));var l=t.targets;if(void 0!==l){for(var u=new n.Vector3,c=new n.Vector3,f=0,d=l.length;f<d;f++){var p,h=l[f];if(void 0!==h.POSITION)s=(p=r.json.accessors[h.POSITION]).min,i=p.max,void 0!==s&&void 0!==i?(c.setX(Math.max(Math.abs(s[0]),Math.abs(i[0]))),c.setY(Math.max(Math.abs(s[1]),Math.abs(i[1]))),c.setZ(Math.max(Math.abs(s[2]),Math.abs(i[2]))),u.max(c)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}o.expandByVector(u)}e.boundingBox=o;var m=new n.Sphere;o.getCenter(m.center),m.radius=o.min.distanceTo(o.max)/2,e.boundingSphere=m}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,r),Promise.all(o).then((function(){return void 0!==t.targets?function(e,t,r){for(var n=!1,a=!1,o=0,s=t.length;o<s&&(void 0!==(u=t[o]).POSITION&&(n=!0),void 0!==u.NORMAL&&(a=!0),!n||!a);o++);if(!n&&!a)return Promise.resolve(e);var i=[],l=[];for(o=0,s=t.length;o<s;o++){var u=t[o];if(n){var c=void 0!==u.POSITION?r.getDependency("accessor",u.POSITION):e.attributes.position;i.push(c)}a&&(c=void 0!==u.NORMAL?r.getDependency("accessor",u.NORMAL):e.attributes.normal,l.push(c))}return Promise.all([Promise.all(i),Promise.all(l)]).then((function(t){var r=t[0],o=t[1];return n&&(e.morphAttributes.position=r),a&&(e.morphAttributes.normal=o),e.morphTargetsRelative=!0,e}))}(e,t.targets,r):e}))}function V(e,t){var r=e.getIndex();if(null===r){var a=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var s=0;s<o.count;s++)a.push(s);e.setIndex(a),r=e.getIndex()}var i=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(s=1;s<=i;s++)l.push(r.getX(0)),l.push(r.getX(s)),l.push(r.getX(s+1));else for(s=0;s<i;s++)s%2==0?(l.push(r.getX(s)),l.push(r.getX(s+1)),l.push(r.getX(s+2))):(l.push(r.getX(s+2)),l.push(r.getX(s+1)),l.push(r.getX(s)));l.length/3!==i&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u}return N.prototype.parse=function(e,t){var r=this,n=this.json,a=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var o={scene:t[0][n.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:n.asset,parser:r,userData:{}};F(a,o,n),B(o,n),e(o)})).catch(t)},N.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],r=this.json.meshes||[],n={},a={},o=0,s=t.length;o<s;o++)for(var i=t[o].joints,l=0,u=i.length;l<u;l++)e[i[l]].isBone=!0;for(var c=0,f=e.length;c<f;c++){var d=e[c];void 0!==d.mesh&&(void 0===n[d.mesh]&&(n[d.mesh]=a[d.mesh]=0),n[d.mesh]++,void 0!==d.skin&&(r[d.mesh].isSkinnedMesh=!0))}this.json.meshReferences=n,this.json.meshUses=a},N.prototype.getDependency=function(e,t){var n=e+":"+t,a=this.cache.get(n);if(!a){switch(e){case"scene":a=this.loadScene(t);break;case"node":a=this.loadNode(t);break;case"mesh":a=this.loadMesh(t);break;case"accessor":a=this.loadAccessor(t);break;case"bufferView":a=this.loadBufferView(t);break;case"buffer":a=this.loadBuffer(t);break;case"material":a=this.loadMaterial(t);break;case"texture":a=this.loadTexture(t);break;case"skin":a=this.loadSkin(t);break;case"animation":a=this.loadAnimation(t);break;case"camera":a=this.loadCamera(t);break;case"light":a=this.extensions[r.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(n,a)}return a},N.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var r=this,n=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(n.map((function(t,n){return r.getDependency(e,n)}))),this.cache.add(e,t)}return t},N.prototype.loadBuffer=function(e){var t=this.json.buffers[e],n=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[r.KHR_BINARY_GLTF].body);var a=this.options;return new Promise((function(e,r){n.load(G(t.uri,a.path),e,void 0,(function(){r(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},N.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var r=t.byteLength||0,n=t.byteOffset||0;return e.slice(n,n+r)}))},N.prototype.loadAccessor=function(e){var t=this,r=this.json,a=this.json.accessors[e];if(void 0===a.bufferView&&void 0===a.sparse)return Promise.resolve(null);var o=[];return void 0!==a.bufferView?o.push(this.getDependency("bufferView",a.bufferView)):o.push(null),void 0!==a.sparse&&(o.push(this.getDependency("bufferView",a.sparse.indices.bufferView)),o.push(this.getDependency("bufferView",a.sparse.values.bufferView))),Promise.all(o).then((function(e){var o,s,i=e[0],l=R[a.type],u=j[a.componentType],c=u.BYTES_PER_ELEMENT,f=c*l,d=a.byteOffset||0,p=void 0!==a.bufferView?r.bufferViews[a.bufferView].byteStride:void 0,h=!0===a.normalized;if(p&&p!==f){var m=Math.floor(d/p),g="InterleavedBuffer:"+a.bufferView+":"+a.componentType+":"+m+":"+a.count,v=t.cache.get(g);v||(o=new u(i,m*p,a.count*p/c),v=new n.InterleavedBuffer(o,p/c),t.cache.add(g,v)),s=new n.InterleavedBufferAttribute(v,l,d%p/c,h)}else o=null===i?new u(a.count*l):new u(i,d,a.count*l),s=new n.BufferAttribute(o,l,h);if(void 0!==a.sparse){var y=R.SCALAR,b=j[a.sparse.indices.componentType],w=a.sparse.indices.byteOffset||0,S=a.sparse.values.byteOffset||0,T=new b(e[1],w,a.sparse.count*y),M=new u(e[2],S,a.sparse.count*l);null!==i&&(s=new n.BufferAttribute(s.array.slice(),s.itemSize,s.normalized));for(var E=0,L=T.length;E<L;E++){var x=T[E];if(s.setX(x,M[E*l]),l>=2&&s.setY(x,M[E*l+1]),l>=3&&s.setZ(x,M[E*l+2]),l>=4&&s.setW(x,M[E*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return s}))},N.prototype.loadTexture=function(e){var t,a=this,o=this.json,s=this.options,i=this.textureLoader,l=self.URL||self.webkitURL,u=o.textures[e],c=u.extensions||{},f=(t=c[r.MSFT_TEXTURE_DDS]?o.images[c[r.MSFT_TEXTURE_DDS].source]:o.images[u.source]).uri,d=!1;return void 0!==t.bufferView&&(f=a.getDependency("bufferView",t.bufferView).then((function(e){d=!0;var r=new Blob([e],{type:t.mimeType});return f=l.createObjectURL(r)}))),Promise.resolve(f).then((function(e){var t=s.manager.getHandler(e);return t||(t=c[r.MSFT_TEXTURE_DDS]?a.extensions[r.MSFT_TEXTURE_DDS].ddsLoader:i),new Promise((function(r,n){t.load(G(e,s.path),r,void 0,n)}))})).then((function(e){!0===d&&l.revokeObjectURL(f),e.flipY=!1,u.name&&(e.name=u.name),t.mimeType in U&&(e.format=U[t.mimeType]);var r=(o.samplers||{})[u.sampler]||{};return e.magFilter=x[r.magFilter]||n.LinearFilter,e.minFilter=x[r.minFilter]||n.LinearMipmapLinearFilter,e.wrapS=A[r.wrapS]||n.RepeatWrapping,e.wrapT=A[r.wrapT]||n.RepeatWrapping,e}))},N.prototype.assignTexture=function(e,t,a){var o=this;return this.getDependency("texture",a.index).then((function(s){if(!s.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":s.format=n.RGBFormat}if(void 0===a.texCoord||0==a.texCoord||"aoMap"===t&&1==a.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+a.texCoord+" for texture "+t+" not yet supported."),o.extensions[r.KHR_TEXTURE_TRANSFORM]){var i=void 0!==a.extensions?a.extensions[r.KHR_TEXTURE_TRANSFORM]:void 0;i&&(s=o.extensions[r.KHR_TEXTURE_TRANSFORM].extendTexture(s,i))}e[t]=s}))},N.prototype.assignFinalMaterial=function(e){var t=e.geometry,r=e.material,a=void 0!==t.attributes.tangent,o=void 0!==t.attributes.color,s=void 0===t.attributes.normal,i=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,u=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var c="PointsMaterial:"+r.uuid,f=this.cache.get(c);f||(f=new n.PointsMaterial,n.Material.prototype.copy.call(f,r),f.color.copy(r.color),f.map=r.map,f.sizeAttenuation=!1,this.cache.add(c,f)),r=f}else if(e.isLine){c="LineBasicMaterial:"+r.uuid;var d=this.cache.get(c);d||(d=new n.LineBasicMaterial,n.Material.prototype.copy.call(d,r),d.color.copy(r.color),this.cache.add(c,d)),r=d}if(a||o||s||i||l){c="ClonedMaterial:"+r.uuid+":";r.isGLTFSpecularGlossinessMaterial&&(c+="specular-glossiness:"),i&&(c+="skinning:"),a&&(c+="vertex-tangents:"),o&&(c+="vertex-colors:"),s&&(c+="flat-shading:"),l&&(c+="morph-targets:"),u&&(c+="morph-normals:");var p=this.cache.get(c);p||(p=r.clone(),i&&(p.skinning=!0),a&&(p.vertexTangents=!0),o&&(p.vertexColors=!0),s&&(p.flatShading=!0),l&&(p.morphTargets=!0),u&&(p.morphNormals=!0),this.cache.add(c,p)),r=p}r.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),r.normalScale&&!a&&(r.normalScale.y=-r.normalScale.y),r.clearcoatNormalScale&&!a&&(r.clearcoatNormalScale.y=-r.clearcoatNormalScale.y),e.material=r},N.prototype.loadMaterial=function(e){var t,a=this,o=this.json,s=this.extensions,i=o.materials[e],l={},u=i.extensions||{},c=[];if(u[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var f=s[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=f.getMaterialType(),c.push(f.extendParams(l,i,a))}else if(u[r.KHR_MATERIALS_UNLIT]){var d=s[r.KHR_MATERIALS_UNLIT];t=d.getMaterialType(),c.push(d.extendParams(l,i,a))}else{t=n.MeshStandardMaterial;var p=i.pbrMetallicRoughness||{};if(l.color=new n.Color(1,1,1),l.opacity=1,Array.isArray(p.baseColorFactor)){var h=p.baseColorFactor;l.color.fromArray(h),l.opacity=h[3]}void 0!==p.baseColorTexture&&c.push(a.assignTexture(l,"map",p.baseColorTexture)),l.metalness=void 0!==p.metallicFactor?p.metallicFactor:1,l.roughness=void 0!==p.roughnessFactor?p.roughnessFactor:1,void 0!==p.metallicRoughnessTexture&&(c.push(a.assignTexture(l,"metalnessMap",p.metallicRoughnessTexture)),c.push(a.assignTexture(l,"roughnessMap",p.metallicRoughnessTexture)))}!0===i.doubleSided&&(l.side=n.DoubleSide);var g=i.alphaMode||I;if(g===k?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,g===P&&(l.alphaTest=void 0!==i.alphaCutoff?i.alphaCutoff:.5)),void 0!==i.normalTexture&&t!==n.MeshBasicMaterial&&(c.push(a.assignTexture(l,"normalMap",i.normalTexture)),l.normalScale=new n.Vector2(1,1),void 0!==i.normalTexture.scale&&l.normalScale.set(i.normalTexture.scale,i.normalTexture.scale)),void 0!==i.occlusionTexture&&t!==n.MeshBasicMaterial&&(c.push(a.assignTexture(l,"aoMap",i.occlusionTexture)),void 0!==i.occlusionTexture.strength&&(l.aoMapIntensity=i.occlusionTexture.strength)),void 0!==i.emissiveFactor&&t!==n.MeshBasicMaterial&&(l.emissive=(new n.Color).fromArray(i.emissiveFactor)),void 0!==i.emissiveTexture&&t!==n.MeshBasicMaterial&&c.push(a.assignTexture(l,"emissiveMap",i.emissiveTexture)),u[r.KHR_MATERIALS_CLEARCOAT]){var v=s[r.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),c.push(v.extendParams(l,{extensions:u},a))}return Promise.all(c).then((function(){var e;return e=t===m?s[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),i.name&&(e.name=i.name),e.map&&(e.map.encoding=n.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=n.sRGBEncoding),B(e,i),i.extensions&&F(s,e,i),e}))},N.prototype.loadGeometries=function(e){var t=this,a=this.extensions,o=this.primitiveCache;function s(e){return a[r.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(r){return z(r,e,t)}))}for(var i,l,u=[],c=0,f=e.length;c<f;c++){var d,p=e[c],h=(l=void 0,(l=(i=p).extensions&&i.extensions[r.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+D(l.attributes):i.indices+":"+D(i.attributes)+":"+i.mode),m=o[h];if(m)u.push(m.promise);else d=p.extensions&&p.extensions[r.KHR_DRACO_MESH_COMPRESSION]?s(p):z(new n.BufferGeometry,p,t),o[h]={primitive:p,promise:d},u.push(d)}return Promise.all(u)},N.prototype.loadMesh=function(e){for(var t,r=this,a=this.json.meshes[e],o=a.primitives,s=[],i=0,l=o.length;i<l;i++){var u=void 0===o[i].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new n.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:n.FrontSide})),t.DefaultMaterial):this.getDependency("material",o[i].material);s.push(u)}return s.push(r.loadGeometries(o)),Promise.all(s).then((function(t){for(var s=t.slice(0,t.length-1),i=t[t.length-1],l=[],u=0,c=i.length;u<c;u++){var f,d=i[u],p=o[u],h=s[u];if(p.mode===M||p.mode===E||p.mode===L||void 0===p.mode)!0!==(f=!0===a.isSkinnedMesh?new n.SkinnedMesh(d,h):new n.Mesh(d,h)).isSkinnedMesh||f.geometry.attributes.skinWeight.normalized||f.normalizeSkinWeights(),p.mode===E?f.geometry=V(f.geometry,n.TriangleStripDrawMode):p.mode===L&&(f.geometry=V(f.geometry,n.TriangleFanDrawMode));else if(p.mode===w)f=new n.LineSegments(d,h);else if(p.mode===T)f=new n.Line(d,h);else if(p.mode===S)f=new n.LineLoop(d,h);else{if(p.mode!==b)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+p.mode);f=new n.Points(d,h)}Object.keys(f.geometry.morphAttributes).length>0&&H(f,a),f.name=a.name||"mesh_"+e,i.length>1&&(f.name+="_"+u),B(f,a),r.assignFinalMaterial(f),l.push(f)}if(1===l.length)return l[0];var m=new n.Group;for(u=0,c=l.length;u<c;u++)m.add(l[u]);return m}))},N.prototype.loadCamera=function(e){var t,r=this.json.cameras[e],a=r[r.type];if(a)return"perspective"===r.type?t=new n.PerspectiveCamera(n.MathUtils.radToDeg(a.yfov),a.aspectRatio||1,a.znear||1,a.zfar||2e6):"orthographic"===r.type&&(t=new n.OrthographicCamera(-a.xmag,a.xmag,a.ymag,-a.ymag,a.znear,a.zfar)),r.name&&(t.name=r.name),B(t,r),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},N.prototype.loadSkin=function(e){var t=this.json.skins[e],r={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(r):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return r.inverseBindMatrices=e,r}))},N.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],r=[],a=[],o=[],s=[],i=[],l=0,u=t.channels.length;l<u;l++){var c=t.channels[l],f=t.samplers[c.sampler],d=c.target,p=void 0!==d.node?d.node:d.id,h=void 0!==t.parameters?t.parameters[f.input]:f.input,m=void 0!==t.parameters?t.parameters[f.output]:f.output;r.push(this.getDependency("node",p)),a.push(this.getDependency("accessor",h)),o.push(this.getDependency("accessor",m)),s.push(f),i.push(d)}return Promise.all([Promise.all(r),Promise.all(a),Promise.all(o),Promise.all(s),Promise.all(i)]).then((function(r){for(var a=r[0],o=r[1],s=r[2],i=r[3],l=r[4],u=[],c=0,f=a.length;c<f;c++){var d=a[c],p=o[c],h=s[c],m=i[c],g=l[c];if(void 0!==d){var v;switch(d.updateMatrix(),d.matrixAutoUpdate=!0,O[g.path]){case O.weights:v=n.NumberKeyframeTrack;break;case O.rotation:v=n.QuaternionKeyframeTrack;break;case O.position:case O.scale:default:v=n.VectorKeyframeTrack}var b=d.name?d.name:d.uuid,w=void 0!==m.interpolation?C[m.interpolation]:n.InterpolateLinear,S=[];O[g.path]===O.weights?d.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&S.push(e.name?e.name:e.uuid)})):S.push(b);var T=h.array;if(h.normalized){var M;if(T.constructor===Int8Array)M=1/127;else if(T.constructor===Uint8Array)M=1/255;else if(T.constructor==Int16Array)M=1/32767;else{if(T.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");M=1/65535}for(var E=new Float32Array(T.length),L=0,j=T.length;L<j;L++)E[L]=T[L]*M;T=E}for(L=0,j=S.length;L<j;L++){var x=new v(S[L]+"."+O[g.path],p.array,T,w);"CUBICSPLINE"===m.interpolation&&(x.createInterpolant=function(e){return new y(this.times,this.values,this.getValueSize()/3,e)},x.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),u.push(x)}}}var A=t.name?t.name:"animation_"+e;return new n.AnimationClip(A,void 0,u)}))},N.prototype.loadNode=function(e){var t,a=this.json,o=this.extensions,s=this,i=a.meshReferences,l=a.meshUses,u=a.nodes[e];return(t=[],void 0!==u.mesh&&t.push(s.getDependency("mesh",u.mesh).then((function(e){var t;if(i[u.mesh]>1){var r=l[u.mesh]++;(t=e.clone()).name+="_instance_"+r}else t=e;return void 0!==u.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,r=u.weights.length;t<r;t++)e.morphTargetInfluences[t]=u.weights[t]})),t}))),void 0!==u.camera&&t.push(s.getDependency("camera",u.camera)),u.extensions&&u.extensions[r.KHR_LIGHTS_PUNCTUAL]&&void 0!==u.extensions[r.KHR_LIGHTS_PUNCTUAL].light&&t.push(s.getDependency("light",u.extensions[r.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===u.isBone?new n.Bone:e.length>1?new n.Group:1===e.length?e[0]:new n.Object3D)!==e[0])for(var r=0,a=e.length;r<a;r++)t.add(e[r]);if(u.name&&(t.userData.name=u.name,t.name=n.PropertyBinding.sanitizeNodeName(u.name)),B(t,u),u.extensions&&F(o,t,u),void 0!==u.matrix){var s=new n.Matrix4;s.fromArray(u.matrix),t.applyMatrix4(s)}else void 0!==u.translation&&t.position.fromArray(u.translation),void 0!==u.rotation&&t.quaternion.fromArray(u.rotation),void 0!==u.scale&&t.scale.fromArray(u.scale);return t}))},N.prototype.loadScene=function(){function e(t,r,a,o){var s=a.nodes[t];return o.getDependency("node",t).then((function(e){return void 0===s.skin?e:o.getDependency("skin",s.skin).then((function(e){for(var r=[],n=0,a=(t=e).joints.length;n<a;n++)r.push(o.getDependency("node",t.joints[n]));return Promise.all(r)})).then((function(r){return e.traverse((function(e){if(e.isMesh){for(var a=[],o=[],s=0,i=r.length;s<i;s++){var l=r[s];if(l){a.push(l);var u=new n.Matrix4;void 0!==t.inverseBindMatrices&&u.fromArray(t.inverseBindMatrices.array,16*s),o.push(u)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[s])}e.bind(new n.Skeleton(a,o),e.matrixWorld)}})),e}));var t})).then((function(t){r.add(t);var n=[];if(s.children)for(var i=s.children,l=0,u=i.length;l<u;l++){var c=i[l];n.push(e(c,t,a,o))}return Promise.all(n)}))}return function(t){var r=this.json,a=this.extensions,o=this.json.scenes[t],s=new n.Group;o.name&&(s.name=o.name),B(s,o),o.extensions&&F(a,s,o);for(var i=o.nodes||[],l=[],u=0,c=i.length;u<c;u++)l.push(e(i[u],s,r,this));return Promise.all(l).then((function(){return s}))}}(),e}()},"./src/js/app/main.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>S});var n=r("./node_modules/three/build/three.module.js"),a=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),o=r("./src/js/app/components/renderer.js"),s=r("./src/js/app/components/camera.js"),i=r("./src/js/app/components/light.js"),l=r("./src/js/app/helpers/stats.js"),u=r("./src/js/app/model/texture.js"),c=r("./src/js/app/managers/interaction.js"),f=r("./src/js/data/config.js"),d=r("./src/js/data/store.js"),p=r("./src/js/app/objects/player.js"),h=r("./src/js/app/objects/asteroid.js"),m=r("./src/js/app/objects/stars.js"),g=r("./src/js/utils/collisions.js");function v(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function y(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?v(Object(r),!0).forEach((function(t){b(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):v(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function b(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function w(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var S=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new n.Clock,this.scene=new n.Scene,this.scene.fog=new n.FogExp2(f.default.fog.color,f.default.fog.near),window.devicePixelRatio&&(f.default.dpr=window.devicePixelRatio),this.renderer=new o.default(this.scene,t),this.camera=new s.default(this.renderer.threeRenderer),this.light=new i.default(this.scene);["ambient","directional","point","hemi"].forEach((function(e){return r.light.place(e)})),f.default.isDev&&f.default.isShowingStats&&(this.stats=new l.default(this.renderer),this.stats.setUp()),this.health=100,this.score=0,this.texture=new u.default,this.texture.load().then((function(){r.manager=new n.LoadingManager,r.player=new p.default(r.scene,r.manager,r.texture.textures),r.player.load(f.default.models.player),r.asteroidOne=new h.default(r.scene,r.manager,r.textures);var e=y({position:[1e3,1e3,1e3],path:f.default.models.asteroid.paths[0]},f.default.models.asteroid);r.asteroidOne.load(e),r.asteroidTwo=new h.default(r.scene,r.manager,r.textures);var t=y({position:[1e3,1e3,1e3],path:f.default.models.asteroid.paths[1]},f.default.models.asteroid);r.asteroidTwo.load(t),r.star=new m.default(r.scene,r.manager,r.textures),r.star.load(y({position:[1e3,1e3,1e3]},f.default.models.star)),r.asteroids=[],r.bullets=[],r.stars=[],r.manager.onProgress=function(e,t,r){console.log("".concat(e,": ").concat(t," ").concat(r))},r.manager.onLoad=function(){new c.default(r.renderer.threeRenderer,r.scene),f.default.isLoaded=!0,r.container.querySelector("#status").style.display="none",setTimeout((function(){d.default.star.canSpawn=!0}),f.default.models.star.canSpawnInterval/2),setInterval((function(){console.log(r.score,r.health)}),3e3),r.render()}}))}var t,r,v;return t=e,(r=[{key:"render",value:function(){var e=this;if(f.default.isDev&&f.default.isShowingStats&&l.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),f.default.isDev&&f.default.isShowingStats&&l.default.end(),this.health<=0)return d.default.gameOver=!0,this.container.querySelector("#status").style.display="initial",this.container.querySelector("#status").style.fontSize="48",void(this.container.querySelector("#status").innerHTML="Game Over!");a.default.update(),this.bullets=this.bullets.concat(this.player.update()),this.asteroids=this.asteroids.concat((0,h.spawnAsteroids)(this.asteroidOne,this.asteroidTwo)),this.stars=this.stars.concat((0,m.spawnStars)(this.star));var t=this.asteroids.filter((function(e){return!e.deleted})),r=this.bullets.filter((function(e){return!e.deleted})),n=this.stars.filter((function(e){return!e.deleted})),o=(0,g.default)(this.player.ref,t.map((function(e){return e.ref})));o.length>0&&(this.health+=f.default.models.asteroid.health),o.forEach((function(e){t[e].unload(),t[e].deleted=!0})),(o=(0,g.default)(this.player.ref,n.map((function(e){return e.ref})))).length>0&&(this.score+=f.default.models.star.score),o.forEach((function(e){n[e].unload(),n[e].deleted=!0}));for(var s=0;s<r.length;s+=2){var i=(0,g.default)(r[s].ref.mesh,t.map((function(e){return e.ref})));console.log(i.length),i.forEach((function(r){t[r].unload(),t[r].deleted=!0,e.score+=f.default.models.asteroid.score})),i.length&&(r[s].unload(),r[s].deleted=!0,r[s+1].unload(),r[s+1].deleted=!0)}this.container.querySelector("#healthHUD").innerHTML=this.health,this.container.querySelector("#scoreHUD").innerHTML=this.score,requestAnimationFrame(this.render.bind(this))}}])&&w(t.prototype,r),v&&w(t,v),e}()},"./src/js/app/managers/interaction.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./src/js/utils/keyboard.js"),a=r("./src/js/utils/helpers.js"),o=r("./src/js/data/config.js"),s=r("./src/js/data/store.js");function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=r,this.timeout=null,this.keyboard=new n.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return a.default.throttle(o.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return o.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return o.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||(o.keyboard.pressed("a")?s.default.player.direction="left":o.keyboard.pressed("d")&&(s.default.player.direction="right"),o.keyboard.pressed("space")&&(s.default.player.shoot=!0))}))}var t,r,l;return t=e,(r=[{key:"onMouseOver",value:function(e){e.preventDefault(),o.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),o.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){o.default.isMouseMoving=!1}),200),o.default.isMouseMoving=!0}}])&&i(t.prototype,r),l&&i(t,l),e}()},"./src/js/app/model/model.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>f});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/utils/helpers.js"),o=r("./src/js/utils/bufferGeometryUtils.js"),s=r("./src/js/app/loaders/GLTFLoader.js"),i=r("./src/js/data/config.js");function l(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var f=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.textures=n,this.manager=r,this.deleted=!1,this.ref=null}var t,r,u;return t=e,(r=[{key:"load",value:function(e){var t=this;new s.GLTFLoader(this.manager).load(e.path,(function(r){var a,s,u=r.scene,c=[];u.traverse((function(e){(e.isMesh||e.isLight)&&(e.castShadow=i.default.shadow.enabled),e.isMesh&&(e.material.wireframe=i.default.mesh.wireframe,s=e,c.push(e))}));var f=new n.Group;c.forEach((function(e){return f.add(e)})),f.scale.multiplyScalar(e.scale),(a=f.position).set.apply(a,l(e.position||[0,0,0])),o.BufferGeometryUtils.computeTangents(s.geometry),t.ref=f,t.scene.add(f),f.updateMatrixWorld(!0),t.scene.add(u)}),a.default.logProgress(),a.default.logError())}},{key:"unload",value:function(){this.scene.remove(this.ref),this.ref.children.forEach((function(e){e.geometry.dispose(),e.material.dispose()}))}},{key:"update",value:function(){}},{key:"clone",value:function(){var t=new e(this.scene,this.manager,this.textures);return t.ref=this.ref.clone(),this.scene.add(t.ref),t.ref.updateMatrixWorld(!0),t}}])&&c(t.prototype,r),u&&c(t,u),e}()},"./src/js/app/model/texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/three/build/three.module.js"),a=r("./node_modules/es6-promise/dist/es6-promise.js"),o=r("./src/js/utils/helpers.js"),s=r("./src/js/data/config.js");function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,r,l;return t=e,(r=[{key:"load",value:function(){var e=this,t=new n.TextureLoader,r=s.default.maxAnisotropy,i=s.default.texture.imageFiles,l=[];return t.setPath(s.default.texture.path),i.forEach((function(e){l.push(new a.Promise((function(a,s){t.load(e.image,(function(t){t.anisotropy=r;var o={};o[e.name]=t,o[e.name]instanceof n.Texture&&a(o)}),o.default.logProgress(),(function(t){return s(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),a.Promise.all(l).then((function(t){for(var r=0;r<t.length;r++)e.textures[Object.keys(t[r])[0]]=t[r][Object.keys(t[r])[0]]}),(function(e){return console.log(e)}))}}])&&i(t.prototype,r),l&&i(t,l),e}()},"./src/js/app/objects/asteroid.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{spawnAsteroids:()=>m,default:()=>g});var n=r("./src/js/app/model/model.js"),a=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),o=r("./src/js/data/config.js"),s=r("./src/js/data/store.js");function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=h(e);if(t){var a=h(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return p(this,r)}}function p(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){var r=[];if(s.default.asteroid.canSpawn){s.default.asteroid.canSpawn=!1;var n=[],i=!1;if(Math.random()<.5){switch(Math.floor(3*Math.random())){case 0:n.push([7,0,150]);break;case 1:n.push([0,0,150]);break;case 2:n.push([-7,0,150])}i=!0}if(Math.random()<.3/.7&&!i){for(var u=Math.floor(3*Math.random()),c=u;u===c;)c=Math.floor(3*Math.random());switch(u){case 0:n.push([7,0,150]);break;case 1:n.push([0,0,150]);break;case 2:n.push([-7,0,150])}switch(c){case 0:n.push([7,0,150]);break;case 1:n.push([0,0,150]);break;case 2:n.push([-7,0,150])}i=!0}i||(n.push([7,0,150]),n.push([0,0,150]),n.push([-7,0,150])),setTimeout((function(){s.default.asteroid.canSpawn=!0}),o.default.models.asteroid.canSpawnInterval),n.forEach((function(n){var s,i=Math.floor(2*Math.random())?e.clone():t.clone();(s=i.ref.position).set.apply(s,l(n)),function(e){var t;new a.default.Tween(e.ref.position).to({z:-120},o.default.models.asteroid.animationInterval).onComplete((function(){e.unload(),e.deleted=!0})).start(),t=Math.random()<.5?{x:"+".concat(2*Math.PI),y:"+".concat(2*Math.PI)}:{x:"+".concat(2*Math.PI),z:"+".concat(2*Math.PI)},new a.default.Tween(e.ref.rotation).to(t,o.default.models.asteroid.animationInterval).repeat(1/0).start()}(i),r.push(i)}))}return r}const g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(r,e);var t=d(r);function r(){return c(this,r),t.apply(this,arguments)}return r}(n.default)},"./src/js/app/objects/bullet.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./src/js/data/config.js"),a=r("./src/js/app/components/geometry.js");function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.deleted=!1,this.ref=new a.default(t),this.ref.make("cylinder")(n.default.models.bullets.radius,n.default.models.bullets.length,n.default.models.bullets.segments);var s=o*n.default.models.bullets.position[0]+r.x,i=n.default.models.bullets.position[1]+r.y,l=n.default.models.bullets.position[2]+r.z;this.ref.place([s,i,l],n.default.models.bullets.rotation,n.default.models.bullets.material)}var t,r,s;return t=e,(r=[{key:"unload",value:function(){this.ref.unload()}}])&&o(t.prototype,r),s&&o(t,s),e}()},"./src/js/app/objects/player.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>m});var n=r("./src/js/app/model/model.js"),a=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),o=r("./src/js/data/store.js"),s=r("./src/js/data/config.js"),i=r("./src/js/app/objects/bullet.js");function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=h(e);if(t){var a=h(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return p(this,r)}}function p(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(p,e);var t,r,n,l=d(p);function p(){return u(this,p),l.apply(this,arguments)}return t=p,(r=[{key:"update",value:function(){var e=[];if(!o.default.player.animating){var t="",r=0;"left"===o.default.player.direction&&o.default.player.position>-1?(t="+7",r=-Math.PI/6,o.default.player.position-=1):"right"===o.default.player.direction&&o.default.player.position<1&&(t="-7",r=+Math.PI/6,o.default.player.position+=1),o.default.player.direction&&t&&r&&(new a.default.Tween(this.ref.position).to({x:t},s.default.models.player.animationInterval).easing(s.default.easing).onStart((function(){return o.default.player.animating=!0})).onComplete((function(){return o.default.player.animating=!1})).start(),new a.default.Tween(this.ref.rotation).to({z:r},s.default.models.player.animationInterval/2).easing(s.default.easing).chain(new a.default.Tween(this.ref.rotation).to({z:0},s.default.models.player.animationInterval/2).easing(s.default.easing)).start()),o.default.player.shoot&&o.default.player.canShoot&&(e.push(new i.default(this.scene,this.ref.position,1)),e.push(new i.default(this.scene,this.ref.position,-1)),o.default.player.canShoot=!1,setTimeout((function(){return o.default.player.canShoot=!0}),1/s.default.models.player.fireRate*1e3),e.forEach((function(e){new a.default.Tween(e.ref.mesh.position).to({z:150},s.default.models.bullets.animationInterval).onComplete((function(){e.unload(),e.deleted=!0})).start()})))}return o.default.player.direction="",o.default.player.shoot=!1,e}}])&&c(t.prototype,r),n&&c(t,n),p}(n.default)},"./src/js/app/objects/stars.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{spawnStars:()=>m,default:()=>g});var n=r("./src/js/app/model/model.js"),a=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),o=r("./src/js/data/config.js"),s=r("./src/js/data/store.js");function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=h(e);if(t){var a=h(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return p(this,r)}}function p(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e){var t=[];if(s.default.star.canSpawn){s.default.star.canSpawn=!1;var r=[],n=!1;if(Math.random()<.4){switch(Math.floor(3*Math.random())){case 0:r.push([7,0,150]);break;case 1:r.push([0,0,150]);break;case 2:r.push([-7,0,150])}n=!0}if(Math.random()<.3/.4&&!n){for(var i=Math.floor(3*Math.random()),u=i;i===u;)u=Math.floor(3*Math.random());switch(i){case 0:r.push([7,0,150]);break;case 1:r.push([0,0,150]);break;case 2:r.push([-7,0,150])}switch(u){case 0:r.push([7,0,150]);break;case 1:r.push([0,0,150]);break;case 2:r.push([-7,0,150])}n=!0}n||(r.push([7,0,150]),r.push([0,0,150]),r.push([-7,0,150])),setTimeout((function(){s.default.star.canSpawn=!0}),o.default.models.star.canSpawnInterval),r.forEach((function(r){var n,s=e.clone();(n=s.ref.position).set.apply(n,l(r)),function(e){new a.default.Tween(e.ref.position).to({z:-120},o.default.models.star.animationInterval).onComplete((function(){e.unload(),e.deleted=!0})).start(),new a.default.Tween(e.ref.rotation).to({y:2*Math.PI},o.default.models.star.animationInterval/4).repeat(1/0).start()}(s),t.push(s)}))}return t}const g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(r,e);var t=d(r);function r(){return c(this,r),t.apply(this,arguments)}return r}(n.default)},"./src/js/data/config.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),a=r("./src/js/app/components/material.js");const o={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,maxAnisotropy:1,dpr:1,easing:n.default.Easing.Quadratic.InOut,duration:500,models:{player:{path:"./assets/models/playerSpaceship.glb",scale:1,position:[0,0,0],animationInterval:600,fireRate:3},bullets:{material:new a.default(255).standard,position:[.71,-.7,1],rotation:[Math.PI/2,0,0],radius:.1,length:2,segments:8,animationInterval:1500},asteroid:{paths:["./assets/models/enemyAsteroid1.glb","./assets/models/enemyAsteroid2.glb"],scale:1,animationInterval:6e3,canSpawnInterval:2e3,score:10,health:-10},star:{path:"./assets/models/star.glb",scale:1,animationInterval:6e3,canSpawnInterval:2e3,score:50}},texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!1,wireframe:!1,translucent:!0,material:{color:16777215,emissive:16777215}},fog:{color:0,near:8e-4},camera:{fov:15,near:2,far:1e3,aspect:16/9,position:[0,10,-42],lookAt:[0,0,10]},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/data/store.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n={score:0,star:{canSpawn:!1},asteroid:{canSpawn:!0},player:{direction:"",health:100,animating:!1,position:0,shoot:!1,canShoot:!0},gameOver:!1}},"./src/js/utils/bufferGeometryUtils.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BufferGeometryUtils:()=>a});var n=r("./node_modules/three/build/three.module.js"),a={computeTangents:function(e){var t=e.index,r=e.attributes;if(null!==t&&void 0!==r.position&&void 0!==r.normal&&void 0!==r.uv){var a=t.array,o=r.position.array,s=r.normal.array,i=r.uv.array,l=o.length/3;void 0===r.tangent&&e.setAttribute("tangent",new n.BufferAttribute(new Float32Array(4*l),4));for(var u=r.tangent.array,c=[],f=[],d=0;d<l;d++)c[d]=new n.Vector3,f[d]=new n.Vector3;var p=new n.Vector3,h=new n.Vector3,m=new n.Vector3,g=new n.Vector2,v=new n.Vector2,y=new n.Vector2,b=new n.Vector3,w=new n.Vector3,S=e.groups;0===S.length&&(S=[{start:0,count:a.length}]);d=0;for(var T=S.length;d<T;++d)for(var M=I=(C=S[d]).start,E=I+C.count;M<E;M+=3)P(a[M+0],a[M+1],a[M+2]);var L,j,x,A=new n.Vector3,R=new n.Vector3,_=new n.Vector3,O=new n.Vector3;for(d=0,T=S.length;d<T;++d){var C,I;for(M=I=(C=S[d]).start,E=I+C.count;M<E;M+=3)k(a[M+0]),k(a[M+1]),k(a[M+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function P(e,t,r){p.fromArray(o,3*e),h.fromArray(o,3*t),m.fromArray(o,3*r),g.fromArray(i,2*e),v.fromArray(i,2*t),y.fromArray(i,2*r),h.sub(p),m.sub(p),v.sub(g),y.sub(g);var n=1/(v.x*y.y-y.x*v.y);isFinite(n)&&(b.copy(h).multiplyScalar(y.y).addScaledVector(m,-v.y).multiplyScalar(n),w.copy(m).multiplyScalar(v.x).addScaledVector(h,-y.x).multiplyScalar(n),c[e].add(b),c[t].add(b),c[r].add(b),f[e].add(w),f[t].add(w),f[r].add(w))}function k(e){_.fromArray(s,3*e),O.copy(_),j=c[e],A.copy(j),A.sub(_.multiplyScalar(_.dot(j))).normalize(),R.crossVectors(O,j),x=R.dot(f[e]),L=x<0?-1:1,u[4*e]=A.x,u[4*e+1]=A.y,u[4*e+2]=A.z,u[4*e+3]=L}},mergeBufferGeometries:function(e,t){for(var r=null!==e[0].index,a=new Set(Object.keys(e[0].attributes)),o=new Set(Object.keys(e[0].morphAttributes)),s={},i={},l=e[0].morphTargetsRelative,u=new n.BufferGeometry,c=0,f=0;f<e.length;++f){var d=e[f],p=0;if(r!==(null!==d.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+f+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var h in d.attributes){if(!a.has(h))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+f+'. All geometries must have compatible attributes; make sure "'+h+'" attribute exists among all geometries, or in none of them.'),null;void 0===s[h]&&(s[h]=[]),s[h].push(d.attributes[h]),p++}if(p!==a.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+f+". Make sure all geometries have the same number of attributes."),null;if(l!==d.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+f+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var h in d.morphAttributes){if(!o.has(h))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+f+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===i[h]&&(i[h]=[]),i[h].push(d.morphAttributes[h])}if(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(d.userData),t){var m;if(r)m=d.index.count;else{if(void 0===d.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+f+". The geometry must have either an index or a position attribute"),null;m=d.attributes.position.count}u.addGroup(c,m,f),c+=m}}if(r){var g=0,v=[];for(f=0;f<e.length;++f){for(var y=e[f].index,b=0;b<y.count;++b)v.push(y.getX(b)+g);g+=e[f].attributes.position.count}u.setIndex(v)}for(var h in s){var w=this.mergeBufferAttributes(s[h]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+h+" attribute."),null;u.setAttribute(h,w)}for(var h in i){var S=i[h][0].length;if(0===S)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[h]=[];for(f=0;f<S;++f){var T=[];for(b=0;b<i[h].length;++b)T.push(i[h][b][f]);var M=this.mergeBufferAttributes(T);if(!M)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+h+" morphAttribute."),null;u.morphAttributes[h].push(M)}}return u},mergeBufferAttributes:function(e){for(var t,r,a,o=0,s=0;s<e.length;++s){var i=e[s];if(i.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=i.array.constructor),t!==i.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=i.itemSize),r!==i.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===a&&(a=i.normalized),a!==i.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;o+=i.array.length}var l=new t(o),u=0;for(s=0;s<e.length;++s)l.set(e[s].array,u),u+=e[s].array.length;return new n.BufferAttribute(l,r,a)},interleaveAttributes:function(e){for(var t,r=0,a=0,o=0,s=e.length;o<s;++o){var i=e[o];if(void 0===t&&(t=i.array.constructor),t!==i.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;r+=i.array.length,a+=i.itemSize}var l=new n.InterleavedBuffer(new t(r),a),u=0,c=[],f=["getX","getY","getZ","getW"],d=["setX","setY","setZ","setW"],p=0;for(s=e.length;p<s;p++){var h=(i=e[p]).itemSize,m=i.count,g=new n.InterleavedBufferAttribute(l,h,u,i.normalized);c.push(g),u+=h;for(var v=0;v<m;v++)for(var y=0;y<h;y++)g[d[y]](v,i[f[y]](v))}return c},estimateBytesUsed:function(e){var t=0;for(var r in e.attributes){var n=e.getAttribute(r);t+=n.count*n.itemSize*n.array.BYTES_PER_ELEMENT}var a=e.getIndex();return t+=a?a.count*a.itemSize*a.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var r={},a=e.getIndex(),o=e.getAttribute("position"),s=a?a.count:o.count,i=0,l=Object.keys(e.attributes),u={},c={},f=[],d=["getX","getY","getZ","getW"],p=0,h=l.length;p<h;p++){u[w=l[p]]=[],(E=e.morphAttributes[w])&&(c[w]=new Array(E.length).fill().map((function(){return[]})))}var m=Math.log10(1/t),g=Math.pow(10,m);for(p=0;p<s;p++){var v=a?a.getX(p):p,y="",b=0;for(h=l.length;b<h;b++)for(var w=l[b],S=(M=e.getAttribute(w)).itemSize,T=0;T<S;T++)y+="".concat(~~(M[d[T]](v)*g),",");if(y in r)f.push(r[y]);else{for(b=0,h=l.length;b<h;b++){w=l[b];var M=e.getAttribute(w),E=e.morphAttributes[w],L=(S=M.itemSize,u[w]),j=c[w];for(T=0;T<S;T++){var x=d[T];if(L.push(M[x](v)),E)for(var A=0,R=E.length;A<R;A++)j[A].push(E[A][x](v))}}r[y]=i,f.push(i),i++}}var _=e.clone();for(p=0,h=l.length;p<h;p++){w=l[p];var O=e.getAttribute(w),C=new O.array.constructor(u[w]);M=new n.BufferAttribute(C,O.itemSize,O.normalized);if(_.setAttribute(w,M),w in c)for(b=0;b<c[w].length;b++){var I=e.morphAttributes[w][b],P=(C=new I.array.constructor(c[w][b]),new n.BufferAttribute(C,I.itemSize,I.normalized));_.morphAttributes[w][b]=P}}return _.setIndex(f),_},toTrianglesDrawMode:function(e,t){if(t===n.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===n.TriangleFanDrawMode||t===n.TriangleStripDrawMode){var r=e.getIndex();if(null===r){var a=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var s=0;s<o.count;s++)a.push(s);e.setIndex(a),r=e.getIndex()}var i=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(s=1;s<=i;s++)l.push(r.getX(0)),l.push(r.getX(s)),l.push(r.getX(s+1));else for(s=0;s<i;s++)s%2==0?(l.push(r.getX(s)),l.push(r.getX(s+1)),l.push(r.getX(s+2))):(l.push(r.getX(s+2)),l.push(r.getX(s+1)),l.push(r.getX(s)));l.length/3!==i&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u.clearGroups(),u}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/collisions.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/three/build/three.module.js");function a(e,t){var r=(new n.Box3).setFromObject(e);return t.map((function(e){return(new n.Box3).setFromObject(e)})).map((function(e){return e.intersectsBox(r)})).reduce((function(e,t,r){return t?e.concat(r):e}),[])}},"./src/js/utils/detector.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,r,n;t=void 0!==(e=e||{}).parent?e.parent:document.body,r=void 0!==e.id?e.id:"oldie",(n=this.getWebGLErrorMessage()).id=r,t.appendChild(n)}}},"./src/js/utils/helpers.js":(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r.r(t),r.d(t,{default:()=>a});var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,a;return t=e,a=[{key:"throttle",value:function(e,t,r){var n,a;return t||(t=250),function(){var o=r||this,s=+new Date,i=arguments;n&&s<n+t?(clearTimeout(a),a=setTimeout((function(){n=s,e.apply(o,i)}),t)):(n=s,e.apply(o,i))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,r){return function(n){e[t]=r[n],e.needsUpdate=!0}}}],(r=null)&&n(t.prototype,r),a&&n(t,a),e}()},"./src/js/utils/keyboard.js":(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r.r(t),r.d(t,{default:()=>o});var a={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},o=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return r.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return r.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return r.onBlur}),!1)}var t,r,o;return t=e,(r=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),r=0;r<t.length;r++){var n=t[r],o=!1;if(o=-1!=Object.keys(a).indexOf(n)?this.keyCodes[a[n]]:this.keyCodes[n.toUpperCase().charCodeAt(0)],!o)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var r=a,n=Object.keys(r),o=t.split("+"),s=0;s<o.length;s++){var i=o[s],l=!1;if("shift"===i?l=!!e.shiftKey:"ctrl"===i?l=!!e.ctrlKey:"alt"===i?l=!!e.altKey:"meta"===i?l=!!e.metaKey:-1!==n.indexOf(i)?l=e.keyCode===r[i]:e.keyCode===i.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&n(t.prototype,r),o&&n(t,o),e}()},"./src/css/app.scss":(e,t,r)=>{"use strict";r.r(t)}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,