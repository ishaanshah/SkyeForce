/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,r)=>{"use strict";r.r(t);var a=r("./src/js/data/config.js"),n=r("./src/js/utils/detector.js"),s=r("./src/js/app/main.js");r("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),a.default.isDev=!0,function(){if(n.default.webgl){var e=document.getElementById("appContainer");new s.default(e)}else n.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var a=r("./node_modules/three/build/three.module.js"),n=r("./src/js/data/config.js");function s(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var s=t.domElement.width,i=t.domElement.height;this.threeCamera=new a.PerspectiveCamera(n.default.camera.fov,s/i,n.default.camera.near,n.default.camera.far),this.threeCamera.position.set(n.default.camera.posX,n.default.camera.posY,n.default.camera.posZ),this.updateSize(t),window.addEventListener("resize",(function(){return r.updateSize(t)}),!1)}var t,r,i;return t=e,(r=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./src/js/app/components/light.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var a=r("./node_modules/three/build/three.module.js"),n=r("./src/js/data/config.js");function s(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,r,i;return t=e,(r=[{key:"init",value:function(){this.ambientLight=new a.AmbientLight(n.default.ambientLight.color),this.ambientLight.visible=n.default.ambientLight.enabled,this.pointLight=new a.PointLight(n.default.pointLight.color,n.default.pointLight.intensity,n.default.pointLight.distance),this.pointLight.position.set(n.default.pointLight.x,n.default.pointLight.y,n.default.pointLight.z),this.pointLight.visible=n.default.pointLight.enabled,this.directionalLight=new a.DirectionalLight(n.default.directionalLight.color,n.default.directionalLight.intensity),this.directionalLight.position.set(n.default.directionalLight.x,n.default.directionalLight.y,n.default.directionalLight.z),this.directionalLight.visible=n.default.directionalLight.enabled,this.directionalLight.castShadow=n.default.shadow.enabled,this.directionalLight.shadow.bias=n.default.shadow.bias,this.directionalLight.shadow.camera.near=n.default.shadow.near,this.directionalLight.shadow.camera.far=n.default.shadow.far,this.directionalLight.shadow.camera.left=n.default.shadow.left,this.directionalLight.shadow.camera.right=n.default.shadow.right,this.directionalLight.shadow.camera.top=n.default.shadow.top,this.directionalLight.shadow.camera.bottom=n.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=n.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=n.default.shadow.mapHeight,n.default.isDev&&(this.directionalLightHelper=new a.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=n.default.shadow.helperEnabled),this.hemiLight=new a.HemisphereLight(n.default.hemiLight.color,n.default.hemiLight.groundColor,n.default.hemiLight.intensity),this.hemiLight.position.set(n.default.hemiLight.x,n.default.hemiLight.y,n.default.hemiLight.z),this.hemiLight.visible=n.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),n.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./src/js/app/components/material.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var a=r("./node_modules/three/build/three.module.js");var n=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new a.MeshBasicMaterial({color:t,side:a.DoubleSide}),this.standard=new a.MeshStandardMaterial({color:t,shading:a.FlatShading,roughness:1,metalness:0,side:a.DoubleSide}),this.wire=new a.MeshBasicMaterial({wireframe:!0})}},"./src/js/app/components/renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var a=r("./node_modules/three/build/three.module.js"),n=r("./src/js/data/config.js");function s(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t,r){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=r,this.threeRenderer=new a.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),r.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=a.PCFSoftShadowMap,n.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return s.updateSize()}),!1),window.addEventListener("resize",(function(){return s.updateSize()}),!1)}var t,r,i;return t=e,(r=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./src/js/app/helpers/meshHelper.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var a=r("./node_modules/three/build/three.module.js"),n=r("./src/js/app/helpers/vertexNormalsHelper.js");function s(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mesh=r,this.scene=t;var s=new a.WireframeGeometry(this.mesh.geometry);this.wireLine=new a.LineSegments(s),this.wireLine.material.depthTest=!1,this.wireLine.material.opacity=.25,this.wireLine.material.transparent=!0;var i=new a.EdgesGeometry(this.mesh.geometry);this.edgesLine=new a.LineSegments(i),this.edgesLine.material.depthTest=!1,this.edgesLine.material.opacity=.25,this.edgesLine.material.transparent=!0,this.vertexHelper=new n.VertexNormalsHelper(this.mesh,2),this.boxHelper=new a.BoxHelper(this.mesh)}var t,r,i;return t=e,(r=[{key:"enable",value:function(){this.mesh.add(this.wireLine),this.mesh.add(this.edgesLine),this.scene.add(this.vertexHelper),this.scene.add(this.boxHelper)}},{key:"disable",value:function(){this.mesh.remove(this.wireLine),this.mesh.remove(this.edgesLine),this.scene.remove(this.vertexHelper),this.scene.remove(this.boxHelper)}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./src/js/app/helpers/stats.js":(e,t,r)=>{"use strict";function a(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var n,s,i,o;r.r(t),r.d(t,{default:()=>l});var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t}var t,r,l;return t=e,l=[{key:"start",value:function(){n("frame").start(),i.start(),n("rAF").tick(),n("FPS").frame(),n("render").start()}},{key:"end",value:function(){n("render").end(),n("frame").end(),n("rStats").start(),n().update(),n("rStats").end()}}],(r=[{key:"setUp",value:function(){s=new BrowserStats,i=new glStats,o=new threeStats(this.renderer.threeRenderer),n=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[s,o]})}}])&&a(t.prototype,r),l&&a(t,l),e}()},"./src/js/app/helpers/vertexNormalsHelper.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{VertexNormalsHelper:()=>l});var a=r("./node_modules/three/build/three.module.js"),n=new a.Vector3,s=new a.Vector3,i=new a.Matrix3,o=["a","b","c"];function l(e,t,r){this.object=e,this.size=void 0!==t?t:.1;var n=void 0!==r?r:16711680,s=0,i=this.object.geometry;i&&i.isGeometry?s=3*i.faces.length:i&&i.isBufferGeometry&&(s=i.attributes.normal.count);var o=new a.BufferGeometry,l=new a.Float32BufferAttribute(2*s*3,3);o.setAttribute("position",l),a.LineSegments.call(this,o,new a.LineBasicMaterial({color:n,toneMapped:!1})),this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.update()}l.prototype=Object.create(a.LineSegments.prototype),l.prototype.constructor=l,l.prototype.update=function(){var e;this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var t=this.object.matrixWorld,r=this.geometry.attributes.position,a=this.object.geometry;if(a&&a.isGeometry){var l=a.vertices,u=a.faces;e=0;for(var c=0,d=u.length;c<d;c++)for(var h=u[c],p=0,f=h.vertexNormals.length;p<f;p++){var m=l[h[o[p]]],g=h.vertexNormals[p];n.copy(m).applyMatrix4(t),s.copy(g).applyMatrix3(i).normalize().multiplyScalar(this.size).add(n),r.setXYZ(e,n.x,n.y,n.z),e+=1,r.setXYZ(e,s.x,s.y,s.z),e+=1}}else if(a&&a.isBufferGeometry){var v=a.attributes.position,y=a.attributes.normal;e=0;for(var b=0,w=v.count;b<w;b++)n.set(v.getX(b),v.getY(b),v.getZ(b)).applyMatrix4(t),s.set(y.getX(b),y.getY(b),y.getZ(b)),s.applyMatrix3(i).normalize().multiplyScalar(this.size).add(n),r.setXYZ(e,n.x,n.y,n.z),e+=1,r.setXYZ(e,s.x,s.y,s.z),e+=1}r.needsUpdate=!0}},"./src/js/app/loaders/GLTFLoader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{GLTFLoader:()=>s});var a=r("./node_modules/three/build/three.module.js");function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var s=function(){function e(e){a.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,r){e[t]=r},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(a.Loader.prototype),{constructor:e,load:function(e,t,r,n){var s,i=this;s=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:a.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var o=function(t){n?n(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new a.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(r){try{i.parse(r,s,(function(r){t(r),i.manager.itemEnd(e)}),o)}catch(e){o(e)}}),r,o)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,n,c){var d,m={};if("string"==typeof e)d=e;else if(a.LoaderUtils.decodeText(new Uint8Array(e,0,4))===u){try{m[r.KHR_BINARY_GLTF]=new h(e)}catch(e){return void(c&&c(e))}d=m[r.KHR_BINARY_GLTF].content}else d=a.LoaderUtils.decodeText(new Uint8Array(e));var y=JSON.parse(d);if(void 0===y.asset||y.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(y.extensionsUsed)for(var b=0;b<y.extensionsUsed.length;++b){var w=y.extensionsUsed[b],T=y.extensionsRequired||[];switch(w){case r.KHR_LIGHTS_PUNCTUAL:m[w]=new i(y);break;case r.KHR_MATERIALS_CLEARCOAT:m[w]=new l;break;case r.KHR_MATERIALS_UNLIT:m[w]=new o;break;case r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:m[w]=new g;break;case r.KHR_DRACO_MESH_COMPRESSION:m[w]=new p(y,this.dracoLoader);break;case r.MSFT_TEXTURE_DDS:m[w]=new s(this.ddsLoader);break;case r.KHR_TEXTURE_TRANSFORM:m[w]=new f;break;case r.KHR_MESH_QUANTIZATION:m[w]=new v;break;default:T.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new B(y,m,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(n,c)}}});var r={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function s(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=r.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=r.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[r.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function o(){this.name=r.KHR_MATERIALS_UNLIT}function l(){this.name=r.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,r=this.lightDefs[e],n=new a.Color(16777215);void 0!==r.color&&n.fromArray(r.color);var s=void 0!==r.range?r.range:0;switch(r.type){case"directional":(t=new a.DirectionalLight(n)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new a.PointLight(n)).distance=s;break;case"spot":(t=new a.SpotLight(n)).distance=s,r.spot=r.spot||{},r.spot.innerConeAngle=void 0!==r.spot.innerConeAngle?r.spot.innerConeAngle:0,r.spot.outerConeAngle=void 0!==r.spot.outerConeAngle?r.spot.outerConeAngle:Math.PI/4,t.angle=r.spot.outerConeAngle,t.penumbra=1-r.spot.innerConeAngle/r.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+r.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==r.intensity&&(t.intensity=r.intensity),t.name=r.name||"light_"+e,Promise.resolve(t)},o.prototype.getMaterialType=function(){return a.MeshBasicMaterial},o.prototype.extendParams=function(e,t,r){var n=[];e.color=new a.Color(1,1,1),e.opacity=1;var s=t.pbrMetallicRoughness;if(s){if(Array.isArray(s.baseColorFactor)){var i=s.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==s.baseColorTexture&&n.push(r.assignTexture(e,"map",s.baseColorTexture))}return Promise.all(n)},l.prototype.getMaterialType=function(){return a.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,r){var n=[],s=t.extensions[this.name];if(void 0!==s.clearcoatFactor&&(e.clearcoat=s.clearcoatFactor),void 0!==s.clearcoatTexture&&n.push(r.assignTexture(e,"clearcoatMap",s.clearcoatTexture)),void 0!==s.clearcoatRoughnessFactor&&(e.clearcoatRoughness=s.clearcoatRoughnessFactor),void 0!==s.clearcoatRoughnessTexture&&n.push(r.assignTexture(e,"clearcoatRoughnessMap",s.clearcoatRoughnessTexture)),void 0!==s.clearcoatNormalTexture&&(n.push(r.assignTexture(e,"clearcoatNormalMap",s.clearcoatNormalTexture)),void 0!==s.clearcoatNormalTexture.scale)){var i=s.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new a.Vector2(i,i)}return Promise.all(n)};var u="glTF",c=1313821514,d=5130562;function h(e){this.name=r.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:a.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==u)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var n=new DataView(e,12),s=0;s<n.byteLength;){var i=n.getUint32(s,!0);s+=4;var o=n.getUint32(s,!0);if(s+=4,o===c){var l=new Uint8Array(e,12+s,i);this.content=a.LoaderUtils.decodeText(l)}else if(o===d){var h=12+s;this.body=e.slice(h,h+i)}s+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function p(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=r.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function f(){this.name=r.KHR_TEXTURE_TRANSFORM}function m(e){a.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),r=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),n=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),s=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),o={specular:{value:(new a.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=o,this.onBeforeCompile=function(e){for(var a in o)e.uniforms[a]=o[a];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",n),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",s),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return o.specular.value},set:function(e){o.specular.value=e}},specularMap:{get:function(){return o.specularMap.value},set:function(e){o.specularMap.value=e}},glossiness:{get:function(){return o.glossiness.value},set:function(e){o.glossiness.value=e}},glossinessMap:{get:function(){return o.glossinessMap.value},set:function(e){o.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return m},extendParams:function(e,t,r){var n=t.extensions[this.name];e.color=new a.Color(1,1,1),e.opacity=1;var s=[];if(Array.isArray(n.diffuseFactor)){var i=n.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==n.diffuseTexture&&s.push(r.assignTexture(e,"map",n.diffuseTexture)),e.emissive=new a.Color(0,0,0),e.glossiness=void 0!==n.glossinessFactor?n.glossinessFactor:1,e.specular=new a.Color(1,1,1),Array.isArray(n.specularFactor)&&e.specular.fromArray(n.specularFactor),void 0!==n.specularGlossinessTexture){var o=n.specularGlossinessTexture;s.push(r.assignTexture(e,"glossinessMap",o)),s.push(r.assignTexture(e,"specularMap",o))}return Promise.all(s)},createMaterial:function(e){var t=new m(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=a.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function v(){this.name=r.KHR_MESH_QUANTIZATION}function y(e,t,r,n){a.Interpolant.call(this,e,t,r,n)}p.prototype.decodePrimitive=function(e,t){var r=this.json,a=this.dracoLoader,n=e.extensions[this.name].bufferView,s=e.extensions[this.name].attributes,i={},o={},l={};for(var u in s){var c=j[u]||u.toLowerCase();i[c]=s[u]}for(u in e.attributes){c=j[u]||u.toLowerCase();if(void 0!==s[u]){var d=r.accessors[e.attributes[u]],h=E[d.componentType];l[c]=h,o[c]=!0===d.normalized}}return t.getDependency("bufferView",n).then((function(e){return new Promise((function(t){a.decodeDracoFile(e,(function(e){for(var r in e.attributes){var a=e.attributes[r],n=o[r];void 0!==n&&(a.normalized=n)}t(e)}),i,l)}))}))},f.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},m.prototype=Object.create(a.MeshStandardMaterial.prototype),m.prototype.constructor=m,m.prototype.copy=function(e){return a.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},y.prototype=Object.create(a.Interpolant.prototype),y.prototype.constructor=y,y.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,r=this.sampleValues,a=this.valueSize,n=e*a*3+a,s=0;s!==a;s++)t[s]=r[n+s];return t},y.prototype.beforeStart_=y.prototype.copySampleValue_,y.prototype.afterEnd_=y.prototype.copySampleValue_,y.prototype.interpolate_=function(e,t,r,a){for(var n=this.resultBuffer,s=this.sampleValues,i=this.valueSize,o=2*i,l=3*i,u=a-t,c=(r-t)/u,d=c*c,h=d*c,p=e*l,f=p-l,m=-2*h+3*d,g=h-d,v=1-m,y=g-d+c,b=0;b!==i;b++){var w=s[f+b+i],T=s[f+b+o]*u,M=s[p+b+i],L=s[p+b]*u;n[b]=v*w+y*T+m*M+g*L}return n};var b=0,w=1,T=2,M=3,L=4,x=5,S=6,E={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},R={9728:a.NearestFilter,9729:a.LinearFilter,9984:a.NearestMipmapNearestFilter,9985:a.LinearMipmapNearestFilter,9986:a.NearestMipmapLinearFilter,9987:a.LinearMipmapLinearFilter},A={33071:a.ClampToEdgeWrapping,33648:a.MirroredRepeatWrapping,10497:a.RepeatWrapping},_={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},j={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},C={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},k={CUBICSPLINE:void 0,LINEAR:a.InterpolateLinear,STEP:a.InterpolateDiscrete},U="OPAQUE",O="MASK",P="BLEND",I={"image/png":a.RGBAFormat,"image/jpeg":a.RGBFormat};function F(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function G(e,t,r){for(var a in r.extensions)void 0===e[a]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[a]=r.extensions[a])}function D(e,t){void 0!==t.extras&&("object"===n(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function H(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var r=0,a=t.weights.length;r<a;r++)e.morphTargetInfluences[r]=t.weights[r];if(t.extras&&Array.isArray(t.extras.targetNames)){var n=t.extras.targetNames;if(e.morphTargetInfluences.length===n.length){e.morphTargetDictionary={};for(r=0,a=n.length;r<a;r++)e.morphTargetDictionary[n[r]]=r}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function N(e){for(var t="",r=Object.keys(e).sort(),a=0,n=r.length;a<n;a++)t+=r[a]+":"+e[r[a]]+";";return t}function B(e,r,n){this.json=e||{},this.extensions=r||{},this.options=n||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new a.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new a.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,r){var n=t.attributes,s=[];function i(t,a){return r.getDependency("accessor",t).then((function(t){e.setAttribute(a,t)}))}for(var o in n){var l=j[o]||o.toLowerCase();l in e.attributes||s.push(i(n[o],l))}if(void 0!==t.indices&&!e.index){var u=r.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));s.push(u)}return D(e,t),function(e,t,r){var n=t.attributes,s=new a.Box3;if(void 0!==n.POSITION){var i=(p=r.json.accessors[n.POSITION]).min,o=p.max;if(void 0!==i&&void 0!==o){s.set(new a.Vector3(i[0],i[1],i[2]),new a.Vector3(o[0],o[1],o[2]));var l=t.targets;if(void 0!==l){for(var u=new a.Vector3,c=new a.Vector3,d=0,h=l.length;d<h;d++){var p,f=l[d];if(void 0!==f.POSITION)i=(p=r.json.accessors[f.POSITION]).min,o=p.max,void 0!==i&&void 0!==o?(c.setX(Math.max(Math.abs(i[0]),Math.abs(o[0]))),c.setY(Math.max(Math.abs(i[1]),Math.abs(o[1]))),c.setZ(Math.max(Math.abs(i[2]),Math.abs(o[2]))),u.max(c)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}s.expandByVector(u)}e.boundingBox=s;var m=new a.Sphere;s.getCenter(m.center),m.radius=s.min.distanceTo(s.max)/2,e.boundingSphere=m}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,r),Promise.all(s).then((function(){return void 0!==t.targets?function(e,t,r){for(var a=!1,n=!1,s=0,i=t.length;s<i&&(void 0!==(u=t[s]).POSITION&&(a=!0),void 0!==u.NORMAL&&(n=!0),!a||!n);s++);if(!a&&!n)return Promise.resolve(e);var o=[],l=[];for(s=0,i=t.length;s<i;s++){var u=t[s];if(a){var c=void 0!==u.POSITION?r.getDependency("accessor",u.POSITION):e.attributes.position;o.push(c)}n&&(c=void 0!==u.NORMAL?r.getDependency("accessor",u.NORMAL):e.attributes.normal,l.push(c))}return Promise.all([Promise.all(o),Promise.all(l)]).then((function(t){var r=t[0],s=t[1];return a&&(e.morphAttributes.position=r),n&&(e.morphAttributes.normal=s),e.morphTargetsRelative=!0,e}))}(e,t.targets,r):e}))}function V(e,t){var r=e.getIndex();if(null===r){var n=[],s=e.getAttribute("position");if(void 0===s)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<s.count;i++)n.push(i);e.setIndex(n),r=e.getIndex()}var o=r.count-2,l=[];if(t===a.TriangleFanDrawMode)for(i=1;i<=o;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<o;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==o&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u}return B.prototype.parse=function(e,t){var r=this,a=this.json,n=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var s={scene:t[0][a.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:a.asset,parser:r,userData:{}};G(n,s,a),D(s,a),e(s)})).catch(t)},B.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],r=this.json.meshes||[],a={},n={},s=0,i=t.length;s<i;s++)for(var o=t[s].joints,l=0,u=o.length;l<u;l++)e[o[l]].isBone=!0;for(var c=0,d=e.length;c<d;c++){var h=e[c];void 0!==h.mesh&&(void 0===a[h.mesh]&&(a[h.mesh]=n[h.mesh]=0),a[h.mesh]++,void 0!==h.skin&&(r[h.mesh].isSkinnedMesh=!0))}this.json.meshReferences=a,this.json.meshUses=n},B.prototype.getDependency=function(e,t){var a=e+":"+t,n=this.cache.get(a);if(!n){switch(e){case"scene":n=this.loadScene(t);break;case"node":n=this.loadNode(t);break;case"mesh":n=this.loadMesh(t);break;case"accessor":n=this.loadAccessor(t);break;case"bufferView":n=this.loadBufferView(t);break;case"buffer":n=this.loadBuffer(t);break;case"material":n=this.loadMaterial(t);break;case"texture":n=this.loadTexture(t);break;case"skin":n=this.loadSkin(t);break;case"animation":n=this.loadAnimation(t);break;case"camera":n=this.loadCamera(t);break;case"light":n=this.extensions[r.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(a,n)}return n},B.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var r=this,a=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(a.map((function(t,a){return r.getDependency(e,a)}))),this.cache.add(e,t)}return t},B.prototype.loadBuffer=function(e){var t=this.json.buffers[e],a=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[r.KHR_BINARY_GLTF].body);var n=this.options;return new Promise((function(e,r){a.load(F(t.uri,n.path),e,void 0,(function(){r(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},B.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var r=t.byteLength||0,a=t.byteOffset||0;return e.slice(a,a+r)}))},B.prototype.loadAccessor=function(e){var t=this,r=this.json,n=this.json.accessors[e];if(void 0===n.bufferView&&void 0===n.sparse)return Promise.resolve(null);var s=[];return void 0!==n.bufferView?s.push(this.getDependency("bufferView",n.bufferView)):s.push(null),void 0!==n.sparse&&(s.push(this.getDependency("bufferView",n.sparse.indices.bufferView)),s.push(this.getDependency("bufferView",n.sparse.values.bufferView))),Promise.all(s).then((function(e){var s,i,o=e[0],l=_[n.type],u=E[n.componentType],c=u.BYTES_PER_ELEMENT,d=c*l,h=n.byteOffset||0,p=void 0!==n.bufferView?r.bufferViews[n.bufferView].byteStride:void 0,f=!0===n.normalized;if(p&&p!==d){var m=Math.floor(h/p),g="InterleavedBuffer:"+n.bufferView+":"+n.componentType+":"+m+":"+n.count,v=t.cache.get(g);v||(s=new u(o,m*p,n.count*p/c),v=new a.InterleavedBuffer(s,p/c),t.cache.add(g,v)),i=new a.InterleavedBufferAttribute(v,l,h%p/c,f)}else s=null===o?new u(n.count*l):new u(o,h,n.count*l),i=new a.BufferAttribute(s,l,f);if(void 0!==n.sparse){var y=_.SCALAR,b=E[n.sparse.indices.componentType],w=n.sparse.indices.byteOffset||0,T=n.sparse.values.byteOffset||0,M=new b(e[1],w,n.sparse.count*y),L=new u(e[2],T,n.sparse.count*l);null!==o&&(i=new a.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var x=0,S=M.length;x<S;x++){var R=M[x];if(i.setX(R,L[x*l]),l>=2&&i.setY(R,L[x*l+1]),l>=3&&i.setZ(R,L[x*l+2]),l>=4&&i.setW(R,L[x*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},B.prototype.loadTexture=function(e){var t,n=this,s=this.json,i=this.options,o=this.textureLoader,l=self.URL||self.webkitURL,u=s.textures[e],c=u.extensions||{},d=(t=c[r.MSFT_TEXTURE_DDS]?s.images[c[r.MSFT_TEXTURE_DDS].source]:s.images[u.source]).uri,h=!1;return void 0!==t.bufferView&&(d=n.getDependency("bufferView",t.bufferView).then((function(e){h=!0;var r=new Blob([e],{type:t.mimeType});return d=l.createObjectURL(r)}))),Promise.resolve(d).then((function(e){var t=i.manager.getHandler(e);return t||(t=c[r.MSFT_TEXTURE_DDS]?n.extensions[r.MSFT_TEXTURE_DDS].ddsLoader:o),new Promise((function(r,a){t.load(F(e,i.path),r,void 0,a)}))})).then((function(e){!0===h&&l.revokeObjectURL(d),e.flipY=!1,u.name&&(e.name=u.name),t.mimeType in I&&(e.format=I[t.mimeType]);var r=(s.samplers||{})[u.sampler]||{};return e.magFilter=R[r.magFilter]||a.LinearFilter,e.minFilter=R[r.minFilter]||a.LinearMipmapLinearFilter,e.wrapS=A[r.wrapS]||a.RepeatWrapping,e.wrapT=A[r.wrapT]||a.RepeatWrapping,e}))},B.prototype.assignTexture=function(e,t,n){var s=this;return this.getDependency("texture",n.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=a.RGBFormat}if(void 0===n.texCoord||0==n.texCoord||"aoMap"===t&&1==n.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+n.texCoord+" for texture "+t+" not yet supported."),s.extensions[r.KHR_TEXTURE_TRANSFORM]){var o=void 0!==n.extensions?n.extensions[r.KHR_TEXTURE_TRANSFORM]:void 0;o&&(i=s.extensions[r.KHR_TEXTURE_TRANSFORM].extendTexture(i,o))}e[t]=i}))},B.prototype.assignFinalMaterial=function(e){var t=e.geometry,r=e.material,n=void 0!==t.attributes.tangent,s=void 0!==t.attributes.color,i=void 0===t.attributes.normal,o=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,u=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var c="PointsMaterial:"+r.uuid,d=this.cache.get(c);d||(d=new a.PointsMaterial,a.Material.prototype.copy.call(d,r),d.color.copy(r.color),d.map=r.map,d.sizeAttenuation=!1,this.cache.add(c,d)),r=d}else if(e.isLine){c="LineBasicMaterial:"+r.uuid;var h=this.cache.get(c);h||(h=new a.LineBasicMaterial,a.Material.prototype.copy.call(h,r),h.color.copy(r.color),this.cache.add(c,h)),r=h}if(n||s||i||o||l){c="ClonedMaterial:"+r.uuid+":";r.isGLTFSpecularGlossinessMaterial&&(c+="specular-glossiness:"),o&&(c+="skinning:"),n&&(c+="vertex-tangents:"),s&&(c+="vertex-colors:"),i&&(c+="flat-shading:"),l&&(c+="morph-targets:"),u&&(c+="morph-normals:");var p=this.cache.get(c);p||(p=r.clone(),o&&(p.skinning=!0),n&&(p.vertexTangents=!0),s&&(p.vertexColors=!0),i&&(p.flatShading=!0),l&&(p.morphTargets=!0),u&&(p.morphNormals=!0),this.cache.add(c,p)),r=p}r.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),r.normalScale&&!n&&(r.normalScale.y=-r.normalScale.y),r.clearcoatNormalScale&&!n&&(r.clearcoatNormalScale.y=-r.clearcoatNormalScale.y),e.material=r},B.prototype.loadMaterial=function(e){var t,n=this,s=this.json,i=this.extensions,o=s.materials[e],l={},u=o.extensions||{},c=[];if(u[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),c.push(d.extendParams(l,o,n))}else if(u[r.KHR_MATERIALS_UNLIT]){var h=i[r.KHR_MATERIALS_UNLIT];t=h.getMaterialType(),c.push(h.extendParams(l,o,n))}else{t=a.MeshStandardMaterial;var p=o.pbrMetallicRoughness||{};if(l.color=new a.Color(1,1,1),l.opacity=1,Array.isArray(p.baseColorFactor)){var f=p.baseColorFactor;l.color.fromArray(f),l.opacity=f[3]}void 0!==p.baseColorTexture&&c.push(n.assignTexture(l,"map",p.baseColorTexture)),l.metalness=void 0!==p.metallicFactor?p.metallicFactor:1,l.roughness=void 0!==p.roughnessFactor?p.roughnessFactor:1,void 0!==p.metallicRoughnessTexture&&(c.push(n.assignTexture(l,"metalnessMap",p.metallicRoughnessTexture)),c.push(n.assignTexture(l,"roughnessMap",p.metallicRoughnessTexture)))}!0===o.doubleSided&&(l.side=a.DoubleSide);var g=o.alphaMode||U;if(g===P?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,g===O&&(l.alphaTest=void 0!==o.alphaCutoff?o.alphaCutoff:.5)),void 0!==o.normalTexture&&t!==a.MeshBasicMaterial&&(c.push(n.assignTexture(l,"normalMap",o.normalTexture)),l.normalScale=new a.Vector2(1,1),void 0!==o.normalTexture.scale&&l.normalScale.set(o.normalTexture.scale,o.normalTexture.scale)),void 0!==o.occlusionTexture&&t!==a.MeshBasicMaterial&&(c.push(n.assignTexture(l,"aoMap",o.occlusionTexture)),void 0!==o.occlusionTexture.strength&&(l.aoMapIntensity=o.occlusionTexture.strength)),void 0!==o.emissiveFactor&&t!==a.MeshBasicMaterial&&(l.emissive=(new a.Color).fromArray(o.emissiveFactor)),void 0!==o.emissiveTexture&&t!==a.MeshBasicMaterial&&c.push(n.assignTexture(l,"emissiveMap",o.emissiveTexture)),u[r.KHR_MATERIALS_CLEARCOAT]){var v=i[r.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),c.push(v.extendParams(l,{extensions:u},n))}return Promise.all(c).then((function(){var e;return e=t===m?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),o.name&&(e.name=o.name),e.map&&(e.map.encoding=a.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=a.sRGBEncoding),D(e,o),o.extensions&&G(i,e,o),e}))},B.prototype.loadGeometries=function(e){var t=this,n=this.extensions,s=this.primitiveCache;function i(e){return n[r.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(r){return z(r,e,t)}))}for(var o,l,u=[],c=0,d=e.length;c<d;c++){var h,p=e[c],f=(l=void 0,(l=(o=p).extensions&&o.extensions[r.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+N(l.attributes):o.indices+":"+N(o.attributes)+":"+o.mode),m=s[f];if(m)u.push(m.promise);else h=p.extensions&&p.extensions[r.KHR_DRACO_MESH_COMPRESSION]?i(p):z(new a.BufferGeometry,p,t),s[f]={primitive:p,promise:h},u.push(h)}return Promise.all(u)},B.prototype.loadMesh=function(e){for(var t,r=this,n=this.json.meshes[e],s=n.primitives,i=[],o=0,l=s.length;o<l;o++){var u=void 0===s[o].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new a.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:a.FrontSide})),t.DefaultMaterial):this.getDependency("material",s[o].material);i.push(u)}return i.push(r.loadGeometries(s)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),o=t[t.length-1],l=[],u=0,c=o.length;u<c;u++){var d,h=o[u],p=s[u],f=i[u];if(p.mode===L||p.mode===x||p.mode===S||void 0===p.mode)!0!==(d=!0===n.isSkinnedMesh?new a.SkinnedMesh(h,f):new a.Mesh(h,f)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),p.mode===x?d.geometry=V(d.geometry,a.TriangleStripDrawMode):p.mode===S&&(d.geometry=V(d.geometry,a.TriangleFanDrawMode));else if(p.mode===w)d=new a.LineSegments(h,f);else if(p.mode===M)d=new a.Line(h,f);else if(p.mode===T)d=new a.LineLoop(h,f);else{if(p.mode!==b)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+p.mode);d=new a.Points(h,f)}Object.keys(d.geometry.morphAttributes).length>0&&H(d,n),d.name=n.name||"mesh_"+e,o.length>1&&(d.name+="_"+u),D(d,n),r.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var m=new a.Group;for(u=0,c=l.length;u<c;u++)m.add(l[u]);return m}))},B.prototype.loadCamera=function(e){var t,r=this.json.cameras[e],n=r[r.type];if(n)return"perspective"===r.type?t=new a.PerspectiveCamera(a.MathUtils.radToDeg(n.yfov),n.aspectRatio||1,n.znear||1,n.zfar||2e6):"orthographic"===r.type&&(t=new a.OrthographicCamera(-n.xmag,n.xmag,n.ymag,-n.ymag,n.znear,n.zfar)),r.name&&(t.name=r.name),D(t,r),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},B.prototype.loadSkin=function(e){var t=this.json.skins[e],r={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(r):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return r.inverseBindMatrices=e,r}))},B.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],r=[],n=[],s=[],i=[],o=[],l=0,u=t.channels.length;l<u;l++){var c=t.channels[l],d=t.samplers[c.sampler],h=c.target,p=void 0!==h.node?h.node:h.id,f=void 0!==t.parameters?t.parameters[d.input]:d.input,m=void 0!==t.parameters?t.parameters[d.output]:d.output;r.push(this.getDependency("node",p)),n.push(this.getDependency("accessor",f)),s.push(this.getDependency("accessor",m)),i.push(d),o.push(h)}return Promise.all([Promise.all(r),Promise.all(n),Promise.all(s),Promise.all(i),Promise.all(o)]).then((function(r){for(var n=r[0],s=r[1],i=r[2],o=r[3],l=r[4],u=[],c=0,d=n.length;c<d;c++){var h=n[c],p=s[c],f=i[c],m=o[c],g=l[c];if(void 0!==h){var v;switch(h.updateMatrix(),h.matrixAutoUpdate=!0,C[g.path]){case C.weights:v=a.NumberKeyframeTrack;break;case C.rotation:v=a.QuaternionKeyframeTrack;break;case C.position:case C.scale:default:v=a.VectorKeyframeTrack}var b=h.name?h.name:h.uuid,w=void 0!==m.interpolation?k[m.interpolation]:a.InterpolateLinear,T=[];C[g.path]===C.weights?h.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&T.push(e.name?e.name:e.uuid)})):T.push(b);var M=f.array;if(f.normalized){var L;if(M.constructor===Int8Array)L=1/127;else if(M.constructor===Uint8Array)L=1/255;else if(M.constructor==Int16Array)L=1/32767;else{if(M.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");L=1/65535}for(var x=new Float32Array(M.length),S=0,E=M.length;S<E;S++)x[S]=M[S]*L;M=x}for(S=0,E=T.length;S<E;S++){var R=new v(T[S]+"."+C[g.path],p.array,M,w);"CUBICSPLINE"===m.interpolation&&(R.createInterpolant=function(e){return new y(this.times,this.values,this.getValueSize()/3,e)},R.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),u.push(R)}}}var A=t.name?t.name:"animation_"+e;return new a.AnimationClip(A,void 0,u)}))},B.prototype.loadNode=function(e){var t,n=this.json,s=this.extensions,i=this,o=n.meshReferences,l=n.meshUses,u=n.nodes[e];return(t=[],void 0!==u.mesh&&t.push(i.getDependency("mesh",u.mesh).then((function(e){var t;if(o[u.mesh]>1){var r=l[u.mesh]++;(t=e.clone()).name+="_instance_"+r}else t=e;return void 0!==u.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,r=u.weights.length;t<r;t++)e.morphTargetInfluences[t]=u.weights[t]})),t}))),void 0!==u.camera&&t.push(i.getDependency("camera",u.camera)),u.extensions&&u.extensions[r.KHR_LIGHTS_PUNCTUAL]&&void 0!==u.extensions[r.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",u.extensions[r.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===u.isBone?new a.Bone:e.length>1?new a.Group:1===e.length?e[0]:new a.Object3D)!==e[0])for(var r=0,n=e.length;r<n;r++)t.add(e[r]);if(u.name&&(t.userData.name=u.name,t.name=a.PropertyBinding.sanitizeNodeName(u.name)),D(t,u),u.extensions&&G(s,t,u),void 0!==u.matrix){var i=new a.Matrix4;i.fromArray(u.matrix),t.applyMatrix4(i)}else void 0!==u.translation&&t.position.fromArray(u.translation),void 0!==u.rotation&&t.quaternion.fromArray(u.rotation),void 0!==u.scale&&t.scale.fromArray(u.scale);return t}))},B.prototype.loadScene=function(){function e(t,r,n,s){var i=n.nodes[t];return s.getDependency("node",t).then((function(e){return void 0===i.skin?e:s.getDependency("skin",i.skin).then((function(e){for(var r=[],a=0,n=(t=e).joints.length;a<n;a++)r.push(s.getDependency("node",t.joints[a]));return Promise.all(r)})).then((function(r){return e.traverse((function(e){if(e.isMesh){for(var n=[],s=[],i=0,o=r.length;i<o;i++){var l=r[i];if(l){n.push(l);var u=new a.Matrix4;void 0!==t.inverseBindMatrices&&u.fromArray(t.inverseBindMatrices.array,16*i),s.push(u)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new a.Skeleton(n,s),e.matrixWorld)}})),e}));var t})).then((function(t){r.add(t);var a=[];if(i.children)for(var o=i.children,l=0,u=o.length;l<u;l++){var c=o[l];a.push(e(c,t,n,s))}return Promise.all(a)}))}return function(t){var r=this.json,n=this.extensions,s=this.json.scenes[t],i=new a.Group;s.name&&(i.name=s.name),D(i,s),s.extensions&&G(n,i,s);for(var o=s.nodes||[],l=[],u=0,c=o.length;u<c;u++)l.push(e(o[u],i,r,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/main.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>f});var a=r("./node_modules/three/build/three.module.js"),n=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),s=r("./src/js/app/components/renderer.js"),i=r("./src/js/app/components/camera.js"),o=r("./src/js/app/components/light.js"),l=r("./src/js/app/helpers/stats.js"),u=(r("./src/js/app/helpers/meshHelper.js"),r("./src/js/app/model/texture.js")),c=r("./src/js/app/model/model.js"),d=r("./src/js/app/managers/interaction.js"),h=r("./src/js/data/config.js");function p(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var f=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new a.Clock,this.scene=new a.Scene,this.scene.fog=new a.FogExp2(h.default.fog.color,h.default.fog.near),window.devicePixelRatio&&(h.default.dpr=window.devicePixelRatio),this.renderer=new s.default(this.scene,t),this.camera=new i.default(this.renderer.threeRenderer),this.light=new o.default(this.scene);["ambient","directional","point","hemi"].forEach((function(e){return r.light.place(e)})),h.default.isDev&&h.default.isShowingStats&&(this.stats=new l.default(this.renderer),this.stats.setUp()),this.texture=new u.default,this.texture.load().then((function(){r.manager=new a.LoadingManager,r.playerModel=new c.default(r.scene,r.manager,r.texture.textures),r.playerModel.load(h.default.models.player),r.manager.onProgress=function(e,t,r){console.log("".concat(e,": ").concat(t," ").concat(r))},r.manager.onLoad=function(){new d.default(r.renderer.threeRenderer,r.scene,r.camera.threeCamera),h.default.isLoaded=!0,r.container.querySelector("#loading").style.display="none"}})),this.render()}var t,r,f;return t=e,(r=[{key:"render",value:function(){h.default.isDev&&h.default.isShowingStats&&l.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),h.default.isDev&&h.default.isShowingStats&&l.default.end(),n.default.update(),requestAnimationFrame(this.render.bind(this))}}])&&p(t.prototype,r),f&&p(t,f),e}()},"./src/js/app/managers/interaction.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var a=r("./src/js/utils/keyboard.js"),n=r("./src/js/utils/helpers.js"),s=r("./src/js/data/config.js");function i(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(t,r,s){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=r,this.camera=s,this.timeout=null,this.keyboard=new a.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return n.default.throttle(i.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return i.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return i.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||i.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,r,o;return t=e,(r=[{key:"onMouseOver",value:function(e){e.preventDefault(),s.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),s.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){s.default.isMouseMoving=!1}),200),s.default.isMouseMoving=!0}}])&&i(t.prototype,r),o&&i(t,o),e}()},"./src/js/app/model/model.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var a=r("./node_modules/three/build/three.module.js"),n=(r("./src/js/app/components/material.js"),r("./src/js/utils/helpers.js")),s=r("./src/js/utils/bufferGeometryUtils.js"),i=r("./src/js/app/loaders/GLTFLoader.js"),o=r("./src/js/data/config.js");function l(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var u=function(){function e(t,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.textures=a,this.manager=r,this.obj=null,this.ref=null}var t,r,u;return t=e,(r=[{key:"load",value:function(e){var t=this;new i.GLTFLoader(this.manager).load(e.path,(function(r){var n,i=r.scene;o.default.shadow.enabled&&i.traverse((function(t){(t.isMesh||t.isLight)&&(t.castShadow=!0),t.isMesh&&(t.material.wireframe=o.default.mesh.wireframe,(n=t).scale.multiplyScalar(e.scale))})),t.obj=n,s.BufferGeometryUtils.computeTangents(n.geometry);var l=new a.Group;l.scale.multiplyScalar(.25),t.scene.add(l),t.ref=l,l.updateMatrixWorld(!0),l.add(n),t.scene.add(i)}),n.default.logProgress(),n.default.logError())}},{key:"unload",value:function(){this.scene.remove(this.ref)}}])&&l(t.prototype,r),u&&l(t,u),e}()},"./src/js/app/model/texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var a=r("./node_modules/three/build/three.module.js"),n=r("./node_modules/es6-promise/dist/es6-promise.js"),s=r("./src/js/utils/helpers.js"),i=r("./src/js/data/config.js");function o(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,r,l;return t=e,(r=[{key:"load",value:function(){var e=this,t=new a.TextureLoader,r=i.default.maxAnisotropy,o=i.default.texture.imageFiles,l=[];return t.setPath(i.default.texture.path),o.forEach((function(e){l.push(new n.Promise((function(n,i){t.load(e.image,(function(t){t.anisotropy=r;var s={};s[e.name]=t,s[e.name]instanceof a.Texture&&n(s)}),s.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),n.Promise.all(l).then((function(t){for(var r=0;r<t.length;r++)e.textures[Object.keys(t[r])[0]]=t[r][Object.keys(t[r])[0]]}),(function(e){return console.log(e)}))}}])&&o(t.prototype,r),l&&o(t,l),e}()},"./src/js/data/config.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var a=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js");r("./node_modules/webpack/lib/index.js");const n={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:a.default.Easing.Quadratic.InOut,duration:500,models:{player:{path:"./assets/models/playerSpaceship.glb",scale:1}},texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!1,wireframe:!1,translucent:!0,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:35,near:2,far:1e3,aspect:16/9,posX:0,posY:5,posZ:-15},controls:{autoRotate:!1,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/bufferGeometryUtils.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BufferGeometryUtils:()=>n});var a=r("./node_modules/three/build/three.module.js"),n={computeTangents:function(e){var t=e.index,r=e.attributes;if(null!==t&&void 0!==r.position&&void 0!==r.normal&&void 0!==r.uv){var n=t.array,s=r.position.array,i=r.normal.array,o=r.uv.array,l=s.length/3;void 0===r.tangent&&e.setAttribute("tangent",new a.BufferAttribute(new Float32Array(4*l),4));for(var u=r.tangent.array,c=[],d=[],h=0;h<l;h++)c[h]=new a.Vector3,d[h]=new a.Vector3;var p=new a.Vector3,f=new a.Vector3,m=new a.Vector3,g=new a.Vector2,v=new a.Vector2,y=new a.Vector2,b=new a.Vector3,w=new a.Vector3,T=e.groups;0===T.length&&(T=[{start:0,count:n.length}]);h=0;for(var M=T.length;h<M;++h)for(var L=U=(k=T[h]).start,x=U+k.count;L<x;L+=3)O(n[L+0],n[L+1],n[L+2]);var S,E,R,A=new a.Vector3,_=new a.Vector3,j=new a.Vector3,C=new a.Vector3;for(h=0,M=T.length;h<M;++h){var k,U;for(L=U=(k=T[h]).start,x=U+k.count;L<x;L+=3)P(n[L+0]),P(n[L+1]),P(n[L+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function O(e,t,r){p.fromArray(s,3*e),f.fromArray(s,3*t),m.fromArray(s,3*r),g.fromArray(o,2*e),v.fromArray(o,2*t),y.fromArray(o,2*r),f.sub(p),m.sub(p),v.sub(g),y.sub(g);var a=1/(v.x*y.y-y.x*v.y);isFinite(a)&&(b.copy(f).multiplyScalar(y.y).addScaledVector(m,-v.y).multiplyScalar(a),w.copy(m).multiplyScalar(v.x).addScaledVector(f,-y.x).multiplyScalar(a),c[e].add(b),c[t].add(b),c[r].add(b),d[e].add(w),d[t].add(w),d[r].add(w))}function P(e){j.fromArray(i,3*e),C.copy(j),E=c[e],A.copy(E),A.sub(j.multiplyScalar(j.dot(E))).normalize(),_.crossVectors(C,E),R=_.dot(d[e]),S=R<0?-1:1,u[4*e]=A.x,u[4*e+1]=A.y,u[4*e+2]=A.z,u[4*e+3]=S}},mergeBufferGeometries:function(e,t){for(var r=null!==e[0].index,n=new Set(Object.keys(e[0].attributes)),s=new Set(Object.keys(e[0].morphAttributes)),i={},o={},l=e[0].morphTargetsRelative,u=new a.BufferGeometry,c=0,d=0;d<e.length;++d){var h=e[d],p=0;if(r!==(null!==h.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var f in h.attributes){if(!n.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+f+'" attribute exists among all geometries, or in none of them.'),null;void 0===i[f]&&(i[f]=[]),i[f].push(h.attributes[f]),p++}if(p!==n.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==h.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var f in h.morphAttributes){if(!s.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===o[f]&&(o[f]=[]),o[f].push(h.morphAttributes[f])}if(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(h.userData),t){var m;if(r)m=h.index.count;else{if(void 0===h.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;m=h.attributes.position.count}u.addGroup(c,m,d),c+=m}}if(r){var g=0,v=[];for(d=0;d<e.length;++d){for(var y=e[d].index,b=0;b<y.count;++b)v.push(y.getX(b)+g);g+=e[d].attributes.position.count}u.setIndex(v)}for(var f in i){var w=this.mergeBufferAttributes(i[f]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+f+" attribute."),null;u.setAttribute(f,w)}for(var f in o){var T=o[f][0].length;if(0===T)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[f]=[];for(d=0;d<T;++d){var M=[];for(b=0;b<o[f].length;++b)M.push(o[f][b][d]);var L=this.mergeBufferAttributes(M);if(!L)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+f+" morphAttribute."),null;u.morphAttributes[f].push(L)}}return u},mergeBufferAttributes:function(e){for(var t,r,n,s=0,i=0;i<e.length;++i){var o=e[i];if(o.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=o.array.constructor),t!==o.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=o.itemSize),r!==o.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===n&&(n=o.normalized),n!==o.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;s+=o.array.length}var l=new t(s),u=0;for(i=0;i<e.length;++i)l.set(e[i].array,u),u+=e[i].array.length;return new a.BufferAttribute(l,r,n)},interleaveAttributes:function(e){for(var t,r=0,n=0,s=0,i=e.length;s<i;++s){var o=e[s];if(void 0===t&&(t=o.array.constructor),t!==o.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;r+=o.array.length,n+=o.itemSize}var l=new a.InterleavedBuffer(new t(r),n),u=0,c=[],d=["getX","getY","getZ","getW"],h=["setX","setY","setZ","setW"],p=0;for(i=e.length;p<i;p++){var f=(o=e[p]).itemSize,m=o.count,g=new a.InterleavedBufferAttribute(l,f,u,o.normalized);c.push(g),u+=f;for(var v=0;v<m;v++)for(var y=0;y<f;y++)g[h[y]](v,o[d[y]](v))}return c},estimateBytesUsed:function(e){var t=0;for(var r in e.attributes){var a=e.getAttribute(r);t+=a.count*a.itemSize*a.array.BYTES_PER_ELEMENT}var n=e.getIndex();return t+=n?n.count*n.itemSize*n.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var r={},n=e.getIndex(),s=e.getAttribute("position"),i=n?n.count:s.count,o=0,l=Object.keys(e.attributes),u={},c={},d=[],h=["getX","getY","getZ","getW"],p=0,f=l.length;p<f;p++){u[w=l[p]]=[],(x=e.morphAttributes[w])&&(c[w]=new Array(x.length).fill().map((function(){return[]})))}var m=Math.log10(1/t),g=Math.pow(10,m);for(p=0;p<i;p++){var v=n?n.getX(p):p,y="",b=0;for(f=l.length;b<f;b++)for(var w=l[b],T=(L=e.getAttribute(w)).itemSize,M=0;M<T;M++)y+="".concat(~~(L[h[M]](v)*g),",");if(y in r)d.push(r[y]);else{for(b=0,f=l.length;b<f;b++){w=l[b];var L=e.getAttribute(w),x=e.morphAttributes[w],S=(T=L.itemSize,u[w]),E=c[w];for(M=0;M<T;M++){var R=h[M];if(S.push(L[R](v)),x)for(var A=0,_=x.length;A<_;A++)E[A].push(x[A][R](v))}}r[y]=o,d.push(o),o++}}var j=e.clone();for(p=0,f=l.length;p<f;p++){w=l[p];var C=e.getAttribute(w),k=new C.array.constructor(u[w]);L=new a.BufferAttribute(k,C.itemSize,C.normalized);if(j.setAttribute(w,L),w in c)for(b=0;b<c[w].length;b++){var U=e.morphAttributes[w][b],O=(k=new U.array.constructor(c[w][b]),new a.BufferAttribute(k,U.itemSize,U.normalized));j.morphAttributes[w][b]=O}}return j.setIndex(d),j},toTrianglesDrawMode:function(e,t){if(t===a.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===a.TriangleFanDrawMode||t===a.TriangleStripDrawMode){var r=e.getIndex();if(null===r){var n=[],s=e.getAttribute("position");if(void 0===s)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<s.count;i++)n.push(i);e.setIndex(n),r=e.getIndex()}var o=r.count-2,l=[];if(t===a.TriangleFanDrawMode)for(i=1;i<=o;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<o;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==o&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u.clearGroups(),u}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});const a={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,r,a;t=void 0!==(e=e||{}).parent?e.parent:document.body,r=void 0!==e.id?e.id:"oldie",(a=this.getWebGLErrorMessage()).id=r,t.appendChild(a)}}},"./src/js/utils/helpers.js":(e,t,r)=>{"use strict";function a(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}r.r(t),r.d(t,{default:()=>n});var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,n=[{key:"throttle",value:function(e,t,r){var a,n;return t||(t=250),function(){var s=r||this,i=+new Date,o=arguments;a&&i<a+t?(clearTimeout(n),n=setTimeout((function(){a=i,e.apply(s,o)}),t)):(a=i,e.apply(s,o))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,r){return function(a){e[t]=r[a],e.needsUpdate=!0}}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}()},"./src/js/utils/keyboard.js":(e,t,r)=>{"use strict";function a(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}r.r(t),r.d(t,{default:()=>s});var n={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},s=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return r.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return r.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return r.onBlur}),!1)}var t,r,s;return t=e,(r=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),r=0;r<t.length;r++){var a=t[r],s=!1;if(s=-1!=Object.keys(n).indexOf(a)?this.keyCodes[n[a]]:this.keyCodes[a.toUpperCase().charCodeAt(0)],!s)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var r=n,a=Object.keys(r),s=t.split("+"),i=0;i<s.length;i++){var o=s[i],l=!1;if("shift"===o?l=!!e.shiftKey:"ctrl"===o?l=!!e.ctrlKey:"alt"===o?l=!!e.altKey:"meta"===o?l=!!e.metaKey:-1!==a.indexOf(o)?l=e.keyCode===r[o]:e.keyCode===o.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&a(t.prototype,r),s&&a(t,s),e}()},"./node_modules/jest-worker/build/base sync recursive":e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id="./node_modules/jest-worker/build/base sync recursive",e.exports=t},"./node_modules/jest-worker/build/workers sync recursive":e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id="./node_modules/jest-worker/build/workers sync recursive",e.exports=t},"./node_modules/jest-worker/build sync recursive":e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id="./node_modules/jest-worker/build sync recursive",e.exports=t},"./node_modules/loader-runner/lib sync recursive":e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id="./node_modules/loader-runner/lib sync recursive",e.exports=t},"./src/css/app.scss":(e,t,r)=>{"use strict";r.r(t)},"./node_modules/terser-webpack-plugin/dist sync recursive":e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id="./node_modules/terser-webpack-plugin/dist sync recursive",e.exports=t},"./node_modules/webpack/hot sync recursive ^\\.\\/lazy\\-compilation\\-.*\\.js$":(e,t,r)=>{var a={"./lazy-compilation-node.js":"./node_modules/webpack/hot/lazy-compilation-node.js","./lazy-compilation-web.js":"./node_modules/webpack/hot/lazy-compilation-web.js"};function n(e){var t=s(e);return r(t)}function s(e){if(!r.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}n.keys=function(){return Object.keys(a)},n.resolve=s,e.exports=n,n.id="./node_modules/webpack/hot sync recursive ^\\.\\/lazy\\-compilation\\-.*\\.js$"},"./node_modules/webpack/lib/serialization sync recursive":e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id="./node_modules/webpack/lib/serialization sync recursive",e.exports=t},"?3465":()=>{},"?b752":()=>{}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL2NhbWVyYS5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL2xpZ2h0LmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvYXBwL2NvbXBvbmVudHMvbWF0ZXJpYWwuanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9hcHAvY29tcG9uZW50cy9yZW5kZXJlci5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9oZWxwZXJzL21lc2hIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9hcHAvaGVscGVycy9zdGF0cy5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9oZWxwZXJzL3ZlcnRleE5vcm1hbHNIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9hcHAvbG9hZGVycy9HTFRGTG9hZGVyLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvYXBwL21haW4uanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9hcHAvbWFuYWdlcnMvaW50ZXJhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9hcHAvbW9kZWwvbW9kZWwuanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9hcHAvbW9kZWwvdGV4dHVyZS5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2RhdGEvY29uZmlnLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvdXRpbHMvYnVmZmVyR2VvbWV0cnlVdGlscy5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL3V0aWxzL2RldGVjdG9yLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvdXRpbHMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL3V0aWxzL2tleWJvYXJkLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvYmFzZXxzeW5jIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvd29ya2Vyc3xzeW5jIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGR8c3luYyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vbm9kZV9tb2R1bGVzL2xvYWRlci1ydW5uZXIvbGlifHN5bmMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL25vZGVfbW9kdWxlcy90ZXJzZXItd2VicGFjay1wbHVnaW4vZGlzdHxzeW5jIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvL21udC9pL0Fzc2lnbm1lbnQgMi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3R8c3luY3wvXlxcLlxcL2xhenlcXC1jb21waWxhdGlvblxcLS4qXFwuanMkLyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL3NlcmlhbGl6YXRpb258c3luYyJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwiQ29uZmlnIiwiRGV0ZWN0b3IiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiTWFpbiIsImluaXQiLCJDYW1lcmEiLCJyZW5kZXJlciIsIndpZHRoIiwiZG9tRWxlbWVudCIsImhlaWdodCIsInRoaXMiLCJ0aHJlZUNhbWVyYSIsIlRIUkVFIiwicG9zaXRpb24iLCJzZXQiLCJ1cGRhdGVTaXplIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJMaWdodCIsInNjZW5lIiwiYW1iaWVudExpZ2h0IiwidmlzaWJsZSIsInBvaW50TGlnaHQiLCJkaXJlY3Rpb25hbExpZ2h0IiwiY2FzdFNoYWRvdyIsInNoYWRvdyIsImJpYXMiLCJjYW1lcmEiLCJuZWFyIiwiZmFyIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwibWFwU2l6ZSIsImRpcmVjdGlvbmFsTGlnaHRIZWxwZXIiLCJoZW1pTGlnaHQiLCJsaWdodE5hbWUiLCJhZGQiLCJNYXRlcmlhbCIsImNvbG9yIiwiYmFzaWMiLCJzaWRlIiwic3RhbmRhcmQiLCJzaGFkaW5nIiwicm91Z2huZXNzIiwibWV0YWxuZXNzIiwid2lyZSIsIndpcmVmcmFtZSIsIlJlbmRlcmVyIiwidGhyZWVSZW5kZXJlciIsImFudGlhbGlhcyIsInNldENsZWFyQ29sb3IiLCJmb2ciLCJzZXRQaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImFwcGVuZENoaWxkIiwic2hhZG93TWFwIiwiZW5hYmxlZCIsInR5cGUiLCJjYXBhYmlsaXRpZXMiLCJnZXRNYXhBbmlzb3Ryb3B5Iiwic2V0U2l6ZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwicmVuZGVyIiwiTWVzaEhlbHBlciIsIm1lc2giLCJnZW9tZXRyeSIsIndpcmVMaW5lIiwibWF0ZXJpYWwiLCJkZXB0aFRlc3QiLCJvcGFjaXR5IiwidHJhbnNwYXJlbnQiLCJlZGdlcyIsImVkZ2VzTGluZSIsInZlcnRleEhlbHBlciIsIlZlcnRleE5vcm1hbHNIZWxwZXIiLCJib3hIZWxwZXIiLCJyZW1vdmUiLCJyUyIsImJTIiwiZ2xTIiwidFMiLCJTdGF0cyIsInN0YXJ0IiwidGljayIsImZyYW1lIiwiZW5kIiwidXBkYXRlIiwiQnJvd3NlclN0YXRzIiwiZ2xTdGF0cyIsInRocmVlU3RhdHMiLCJyU3RhdHMiLCJDU1NQYXRoIiwidXNlclRpbWluZ0FQSSIsInZhbHVlcyIsImNhcHRpb24iLCJvdmVyIiwiYXZlcmFnZSIsImF2Z01zIiwiZnBzIiwiYmVsb3ciLCJjYWxscyIsInJhZiIsInJzdGF0cyIsInRleHR1cmUiLCJncm91cHMiLCJmcmFjdGlvbnMiLCJiYXNlIiwic3RlcHMiLCJwbHVnaW5zIiwiX3YxIiwiVmVjdG9yMyIsIl92MiIsIl9ub3JtYWxNYXRyaXgiLCJNYXRyaXgzIiwiX2tleXMiLCJvYmplY3QiLCJzaXplIiwiaGV4IiwidW5kZWZpbmVkIiwibk5vcm1hbHMiLCJvYmpHZW9tZXRyeSIsImlzR2VvbWV0cnkiLCJmYWNlcyIsImxlbmd0aCIsImlzQnVmZmVyR2VvbWV0cnkiLCJhdHRyaWJ1dGVzIiwibm9ybWFsIiwiY291bnQiLCJCdWZmZXJHZW9tZXRyeSIsInBvc2l0aW9ucyIsIkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJMaW5lU2VnbWVudHMiLCJMaW5lQmFzaWNNYXRlcmlhbCIsInRvbmVNYXBwZWQiLCJtYXRyaXhBdXRvVXBkYXRlIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJpZHgiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsImdldE5vcm1hbE1hdHJpeCIsIm1hdHJpeFdvcmxkIiwidmVydGljZXMiLCJpIiwibCIsImZhY2UiLCJqIiwiamwiLCJ2ZXJ0ZXhOb3JtYWxzIiwidmVydGV4IiwiY29weSIsImFwcGx5TWF0cml4NCIsImFwcGx5TWF0cml4MyIsIm5vcm1hbGl6ZSIsIm11bHRpcGx5U2NhbGFyIiwic2V0WFlaIiwieCIsInkiLCJ6Iiwib2JqUG9zIiwib2JqTm9ybSIsImdldFgiLCJnZXRZIiwiZ2V0WiIsIm5lZWRzVXBkYXRlIiwiR0xURkxvYWRlciIsIm1hbmFnZXIiLCJMb2FkZXIiLCJkcmFjb0xvYWRlciIsImRkc0xvYWRlciIsIkdMVEZSZWdpc3RyeSIsIm9iamVjdHMiLCJnZXQiLCJrZXkiLCJyZW1vdmVBbGwiLCJhc3NpZ24iLCJsb2FkIiwidXJsIiwib25Mb2FkIiwib25Qcm9ncmVzcyIsIm9uRXJyb3IiLCJyZXNvdXJjZVBhdGgiLCJzY29wZSIsInBhdGgiLCJMb2FkZXJVdGlscyIsIml0ZW1TdGFydCIsIl9vbkVycm9yIiwiZSIsImVycm9yIiwiaXRlbUVycm9yIiwiaXRlbUVuZCIsImxvYWRlciIsIkZpbGVMb2FkZXIiLCJzZXRQYXRoIiwic2V0UmVzcG9uc2VUeXBlIiwiY3Jvc3NPcmlnaW4iLCJzZXRXaXRoQ3JlZGVudGlhbHMiLCJkYXRhIiwicGFyc2UiLCJnbHRmIiwic2V0RFJBQ09Mb2FkZXIiLCJzZXRERFNMb2FkZXIiLCJjb250ZW50IiwiZXh0ZW5zaW9ucyIsIlVpbnQ4QXJyYXkiLCJCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyIsIkVYVEVOU0lPTlMiLCJLSFJfQklOQVJZX0dMVEYiLCJHTFRGQmluYXJ5RXh0ZW5zaW9uIiwianNvbiIsIkpTT04iLCJhc3NldCIsInZlcnNpb24iLCJFcnJvciIsImV4dGVuc2lvbnNVc2VkIiwiZXh0ZW5zaW9uTmFtZSIsImV4dGVuc2lvbnNSZXF1aXJlZCIsIktIUl9MSUdIVFNfUFVOQ1RVQUwiLCJHTFRGTGlnaHRzRXh0ZW5zaW9uIiwiS0hSX01BVEVSSUFMU19DTEVBUkNPQVQiLCJHTFRGTWF0ZXJpYWxzQ2xlYXJjb2F0RXh0ZW5zaW9uIiwiS0hSX01BVEVSSUFMU19VTkxJVCIsIkdMVEZNYXRlcmlhbHNVbmxpdEV4dGVuc2lvbiIsIktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MiLCJHTFRGTWF0ZXJpYWxzUGJyU3BlY3VsYXJHbG9zc2luZXNzRXh0ZW5zaW9uIiwiS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT04iLCJHTFRGRHJhY29NZXNoQ29tcHJlc3Npb25FeHRlbnNpb24iLCJNU0ZUX1RFWFRVUkVfRERTIiwiR0xURlRleHR1cmVERFNFeHRlbnNpb24iLCJLSFJfVEVYVFVSRV9UUkFOU0ZPUk0iLCJHTFRGVGV4dHVyZVRyYW5zZm9ybUV4dGVuc2lvbiIsIktIUl9NRVNIX1FVQU5USVpBVElPTiIsIkdMVEZNZXNoUXVhbnRpemF0aW9uRXh0ZW5zaW9uIiwiaW5kZXhPZiIsIndhcm4iLCJHTFRGUGFyc2VyIiwibmFtZSIsImV4dGVuc2lvbiIsImxpZ2h0RGVmcyIsImxpZ2h0cyIsImxvYWRMaWdodCIsImxpZ2h0SW5kZXgiLCJsaWdodE5vZGUiLCJsaWdodERlZiIsIkNvbG9yIiwiZnJvbUFycmF5IiwicmFuZ2UiLCJEaXJlY3Rpb25hbExpZ2h0IiwidGFyZ2V0IiwiUG9pbnRMaWdodCIsImRpc3RhbmNlIiwiU3BvdExpZ2h0Iiwic3BvdCIsImlubmVyQ29uZUFuZ2xlIiwib3V0ZXJDb25lQW5nbGUiLCJNYXRoIiwiUEkiLCJhbmdsZSIsInBlbnVtYnJhIiwiZGVjYXkiLCJpbnRlbnNpdHkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldE1hdGVyaWFsVHlwZSIsIk1lc2hCYXNpY01hdGVyaWFsIiwiZXh0ZW5kUGFyYW1zIiwibWF0ZXJpYWxQYXJhbXMiLCJtYXRlcmlhbERlZiIsInBhcnNlciIsInBlbmRpbmciLCJtZXRhbGxpY1JvdWdobmVzcyIsInBick1ldGFsbGljUm91Z2huZXNzIiwiQXJyYXkiLCJpc0FycmF5IiwiYmFzZUNvbG9yRmFjdG9yIiwiYXJyYXkiLCJiYXNlQ29sb3JUZXh0dXJlIiwicHVzaCIsImFzc2lnblRleHR1cmUiLCJhbGwiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsImNsZWFyY29hdEZhY3RvciIsImNsZWFyY29hdCIsImNsZWFyY29hdFRleHR1cmUiLCJjbGVhcmNvYXRSb3VnaG5lc3NGYWN0b3IiLCJjbGVhcmNvYXRSb3VnaG5lc3MiLCJjbGVhcmNvYXRSb3VnaG5lc3NUZXh0dXJlIiwiY2xlYXJjb2F0Tm9ybWFsVGV4dHVyZSIsInNjYWxlIiwiY2xlYXJjb2F0Tm9ybWFsU2NhbGUiLCJWZWN0b3IyIiwiQklOQVJZX0VYVEVOU0lPTl9DSFVOS19UWVBFUyIsImJvZHkiLCJoZWFkZXJWaWV3IiwiRGF0YVZpZXciLCJoZWFkZXIiLCJtYWdpYyIsInNsaWNlIiwiZ2V0VWludDMyIiwiY2h1bmtWaWV3IiwiY2h1bmtJbmRleCIsImJ5dGVMZW5ndGgiLCJjaHVua0xlbmd0aCIsImNodW5rVHlwZSIsImNvbnRlbnRBcnJheSIsImJ5dGVPZmZzZXQiLCJwcmVsb2FkIiwiR0xURk1lc2hTdGFuZGFyZFNHTWF0ZXJpYWwiLCJwYXJhbXMiLCJNZXNoU3RhbmRhcmRNYXRlcmlhbCIsImlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsIiwic3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVuayIsImpvaW4iLCJnbG9zc2luZXNzTWFwUGFyc0ZyYWdtZW50Q2h1bmsiLCJzcGVjdWxhck1hcEZyYWdtZW50Q2h1bmsiLCJnbG9zc2luZXNzTWFwRnJhZ21lbnRDaHVuayIsImxpZ2h0UGh5c2ljYWxGcmFnbWVudENodW5rIiwidW5pZm9ybXMiLCJzcGVjdWxhciIsInZhbHVlIiwic2V0SGV4IiwiZ2xvc3NpbmVzcyIsInNwZWN1bGFyTWFwIiwiZ2xvc3NpbmVzc01hcCIsIl9leHRyYVVuaWZvcm1zIiwib25CZWZvcmVDb21waWxlIiwic2hhZGVyIiwidW5pZm9ybU5hbWUiLCJmcmFnbWVudFNoYWRlciIsInJlcGxhY2UiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidiIsImRlZmluZXMiLCJVU0VfR0xPU1NJTkVTU01BUCIsIlVTRV9ST1VHSE5FU1NNQVAiLCJtZXRhbG5lc3NNYXAiLCJyb3VnaG5lc3NNYXAiLCJzZXRWYWx1ZXMiLCJzcGVjdWxhckdsb3NzaW5lc3NQYXJhbXMiLCJwYnJTcGVjdWxhckdsb3NzaW5lc3MiLCJkaWZmdXNlRmFjdG9yIiwiZGlmZnVzZVRleHR1cmUiLCJlbWlzc2l2ZSIsImdsb3NzaW5lc3NGYWN0b3IiLCJzcGVjdWxhckZhY3RvciIsInNwZWN1bGFyR2xvc3NpbmVzc1RleHR1cmUiLCJzcGVjR2xvc3NNYXBEZWYiLCJjcmVhdGVNYXRlcmlhbCIsIm1hcCIsImxpZ2h0TWFwIiwibGlnaHRNYXBJbnRlbnNpdHkiLCJhb01hcCIsImFvTWFwSW50ZW5zaXR5IiwiZW1pc3NpdmVJbnRlbnNpdHkiLCJlbWlzc2l2ZU1hcCIsImJ1bXBNYXAiLCJidW1wU2NhbGUiLCJub3JtYWxNYXAiLCJub3JtYWxNYXBUeXBlIiwiVGFuZ2VudFNwYWNlTm9ybWFsTWFwIiwibm9ybWFsU2NhbGUiLCJkaXNwbGFjZW1lbnRNYXAiLCJkaXNwbGFjZW1lbnRTY2FsZSIsImRpc3BsYWNlbWVudEJpYXMiLCJhbHBoYU1hcCIsImVudk1hcCIsImVudk1hcEludGVuc2l0eSIsInJlZnJhY3Rpb25SYXRpbyIsIkdMVEZDdWJpY1NwbGluZUludGVycG9sYW50IiwicGFyYW1ldGVyUG9zaXRpb25zIiwic2FtcGxlVmFsdWVzIiwic2FtcGxlU2l6ZSIsInJlc3VsdEJ1ZmZlciIsIkludGVycG9sYW50IiwiZGVjb2RlUHJpbWl0aXZlIiwicHJpbWl0aXZlIiwiYnVmZmVyVmlld0luZGV4IiwiYnVmZmVyVmlldyIsImdsdGZBdHRyaWJ1dGVNYXAiLCJ0aHJlZUF0dHJpYnV0ZU1hcCIsImF0dHJpYnV0ZU5vcm1hbGl6ZWRNYXAiLCJhdHRyaWJ1dGVUeXBlTWFwIiwiYXR0cmlidXRlTmFtZSIsInRocmVlQXR0cmlidXRlTmFtZSIsIkFUVFJJQlVURVMiLCJ0b0xvd2VyQ2FzZSIsImFjY2Vzc29yRGVmIiwiYWNjZXNzb3JzIiwiY29tcG9uZW50VHlwZSIsIldFQkdMX0NPTVBPTkVOVF9UWVBFUyIsIm5vcm1hbGl6ZWQiLCJnZXREZXBlbmRlbmN5IiwidGhlbiIsImRlY29kZURyYWNvRmlsZSIsImF0dHJpYnV0ZSIsImV4dGVuZFRleHR1cmUiLCJ0cmFuc2Zvcm0iLCJjbG9uZSIsIm9mZnNldCIsInJvdGF0aW9uIiwicmVwZWF0IiwidGV4Q29vcmQiLCJzb3VyY2UiLCJjb3B5U2FtcGxlVmFsdWVfIiwiaW5kZXgiLCJyZXN1bHQiLCJ2YWx1ZVNpemUiLCJiZWZvcmVTdGFydF8iLCJhZnRlckVuZF8iLCJpbnRlcnBvbGF0ZV8iLCJpMSIsInQwIiwidCIsInQxIiwic3RyaWRlIiwic3RyaWRlMiIsInN0cmlkZTMiLCJ0ZCIsInAiLCJwcCIsInBwcCIsIm9mZnNldDEiLCJvZmZzZXQwIiwiczIiLCJzMyIsInMwIiwiczEiLCJwMCIsIm0wIiwicDEiLCJtMSIsIldFQkdMX0NPTlNUQU5UUyIsIjUxMjAiLCJJbnQ4QXJyYXkiLCI1MTIxIiwiNTEyMiIsIkludDE2QXJyYXkiLCI1MTIzIiwiVWludDE2QXJyYXkiLCI1MTI1IiwiVWludDMyQXJyYXkiLCI1MTI2IiwiRmxvYXQzMkFycmF5IiwiV0VCR0xfRklMVEVSUyIsIjk3MjgiLCJOZWFyZXN0RmlsdGVyIiwiOTcyOSIsIkxpbmVhckZpbHRlciIsIjk5ODQiLCJOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciIsIjk5ODUiLCJMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIiwiOTk4NiIsIk5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIiLCI5OTg3IiwiTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIiwiV0VCR0xfV1JBUFBJTkdTIiwiMzMwNzEiLCJDbGFtcFRvRWRnZVdyYXBwaW5nIiwiMzM2NDgiLCJNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIiwiMTA0OTciLCJSZXBlYXRXcmFwcGluZyIsIldFQkdMX1RZUEVfU0laRVMiLCJTQ0FMQVIiLCJWRUMyIiwiVkVDMyIsIlZFQzQiLCJNQVQyIiwiTUFUMyIsIk1BVDQiLCJQT1NJVElPTiIsIk5PUk1BTCIsIlRBTkdFTlQiLCJURVhDT09SRF8wIiwiVEVYQ09PUkRfMSIsIkNPTE9SXzAiLCJXRUlHSFRTXzAiLCJKT0lOVFNfMCIsIlBBVEhfUFJPUEVSVElFUyIsInRyYW5zbGF0aW9uIiwid2VpZ2h0cyIsIklOVEVSUE9MQVRJT04iLCJDVUJJQ1NQTElORSIsIkxJTkVBUiIsIkludGVycG9sYXRlTGluZWFyIiwiU1RFUCIsIkludGVycG9sYXRlRGlzY3JldGUiLCJBTFBIQV9NT0RFUyIsIk1JTUVfVFlQRV9GT1JNQVRTIiwiUkdCQUZvcm1hdCIsIlJHQkZvcm1hdCIsInJlc29sdmVVUkwiLCJ0ZXN0IiwiYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhIiwia25vd25FeHRlbnNpb25zIiwib2JqZWN0RGVmIiwidXNlckRhdGEiLCJnbHRmRXh0ZW5zaW9ucyIsImFzc2lnbkV4dHJhc1RvVXNlckRhdGEiLCJnbHRmRGVmIiwiZXh0cmFzIiwidXBkYXRlTW9ycGhUYXJnZXRzIiwibWVzaERlZiIsImlsIiwibW9ycGhUYXJnZXRJbmZsdWVuY2VzIiwidGFyZ2V0TmFtZXMiLCJtb3JwaFRhcmdldERpY3Rpb25hcnkiLCJjcmVhdGVBdHRyaWJ1dGVzS2V5IiwiYXR0cmlidXRlc0tleSIsImtleXMiLCJzb3J0Iiwib3B0aW9ucyIsImNhY2hlIiwicHJpbWl0aXZlQ2FjaGUiLCJ0ZXh0dXJlTG9hZGVyIiwiVGV4dHVyZUxvYWRlciIsInNldENyb3NzT3JpZ2luIiwiZmlsZUxvYWRlciIsImFkZFByaW1pdGl2ZUF0dHJpYnV0ZXMiLCJwcmltaXRpdmVEZWYiLCJhc3NpZ25BdHRyaWJ1dGVBY2Nlc3NvciIsImFjY2Vzc29ySW5kZXgiLCJhY2Nlc3NvciIsImdsdGZBdHRyaWJ1dGVOYW1lIiwiaW5kaWNlcyIsInNldEluZGV4IiwiYm94IiwiQm94MyIsIm1pbiIsIm1heCIsInRhcmdldHMiLCJtYXhEaXNwbGFjZW1lbnQiLCJ2ZWN0b3IiLCJzZXRYIiwiYWJzIiwic2V0WSIsInNldFoiLCJleHBhbmRCeVZlY3RvciIsImJvdW5kaW5nQm94Iiwic3BoZXJlIiwiU3BoZXJlIiwiZ2V0Q2VudGVyIiwiY2VudGVyIiwicmFkaXVzIiwiZGlzdGFuY2VUbyIsImJvdW5kaW5nU3BoZXJlIiwiY29tcHV0ZUJvdW5kcyIsImhhc01vcnBoUG9zaXRpb24iLCJoYXNNb3JwaE5vcm1hbCIsInBlbmRpbmdQb3NpdGlvbkFjY2Vzc29ycyIsInBlbmRpbmdOb3JtYWxBY2Nlc3NvcnMiLCJwZW5kaW5nQWNjZXNzb3IiLCJtb3JwaFBvc2l0aW9ucyIsIm1vcnBoTm9ybWFscyIsIm1vcnBoQXR0cmlidXRlcyIsIm1vcnBoVGFyZ2V0c1JlbGF0aXZlIiwiYWRkTW9ycGhUYXJnZXRzIiwidG9UcmlhbmdsZXNEcmF3TW9kZSIsImRyYXdNb2RlIiwiZ2V0SW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJudW1iZXJPZlRyaWFuZ2xlcyIsIm5ld0luZGljZXMiLCJUcmlhbmdsZUZhbkRyYXdNb2RlIiwibmV3R2VvbWV0cnkiLCJtYXJrRGVmcyIsImdldERlcGVuZGVuY2llcyIsImRlcGVuZGVuY2llcyIsInNjZW5lcyIsImFuaW1hdGlvbnMiLCJjYW1lcmFzIiwibm9kZURlZnMiLCJub2RlcyIsInNraW5EZWZzIiwic2tpbnMiLCJtZXNoRGVmcyIsIm1lc2hlcyIsIm1lc2hSZWZlcmVuY2VzIiwibWVzaFVzZXMiLCJza2luSW5kZXgiLCJza2luTGVuZ3RoIiwiam9pbnRzIiwiaXNCb25lIiwibm9kZUluZGV4Iiwibm9kZUxlbmd0aCIsIm5vZGVEZWYiLCJza2luIiwiaXNTa2lubmVkTWVzaCIsImNhY2hlS2V5IiwiZGVwZW5kZW5jeSIsImxvYWRTY2VuZSIsImxvYWROb2RlIiwibG9hZE1lc2giLCJsb2FkQWNjZXNzb3IiLCJsb2FkQnVmZmVyVmlldyIsImxvYWRCdWZmZXIiLCJsb2FkTWF0ZXJpYWwiLCJsb2FkVGV4dHVyZSIsImxvYWRTa2luIiwibG9hZEFuaW1hdGlvbiIsImxvYWRDYW1lcmEiLCJkZWZzIiwiZGVmIiwiYnVmZmVySW5kZXgiLCJidWZmZXJEZWYiLCJidWZmZXJzIiwidXJpIiwicmVqZWN0IiwiYnVmZmVyVmlld0RlZiIsImJ1ZmZlclZpZXdzIiwiYnVmZmVyIiwic3BhcnNlIiwicGVuZGluZ0J1ZmZlclZpZXdzIiwiYnVmZmVyQXR0cmlidXRlIiwiaXRlbVNpemUiLCJUeXBlZEFycmF5IiwiZWxlbWVudEJ5dGVzIiwiQllURVNfUEVSX0VMRU1FTlQiLCJpdGVtQnl0ZXMiLCJieXRlU3RyaWRlIiwiaWJTbGljZSIsImZsb29yIiwiaWJDYWNoZUtleSIsImliIiwiSW50ZXJsZWF2ZWRCdWZmZXIiLCJJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsIml0ZW1TaXplSW5kaWNlcyIsIlR5cGVkQXJyYXlJbmRpY2VzIiwiYnl0ZU9mZnNldEluZGljZXMiLCJieXRlT2Zmc2V0VmFsdWVzIiwic3BhcnNlSW5kaWNlcyIsInNwYXJzZVZhbHVlcyIsInNldFciLCJ0ZXh0dXJlSW5kZXgiLCJVUkwiLCJzZWxmIiwid2Via2l0VVJMIiwidGV4dHVyZURlZiIsInRleHR1cmVzIiwidGV4dHVyZUV4dGVuc2lvbnMiLCJzb3VyY2VVUkkiLCJpbWFnZXMiLCJpc09iamVjdFVSTCIsImJsb2IiLCJCbG9iIiwibWltZVR5cGUiLCJjcmVhdGVPYmplY3RVUkwiLCJnZXRIYW5kbGVyIiwicmV2b2tlT2JqZWN0VVJMIiwiZmxpcFkiLCJmb3JtYXQiLCJzYW1wbGVyIiwic2FtcGxlcnMiLCJtYWdGaWx0ZXIiLCJtaW5GaWx0ZXIiLCJ3cmFwUyIsIndyYXBUIiwibWFwTmFtZSIsIm1hcERlZiIsImlzQ29tcHJlc3NlZFRleHR1cmUiLCJhc3NpZ25GaW5hbE1hdGVyaWFsIiwidXNlVmVydGV4VGFuZ2VudHMiLCJ0YW5nZW50IiwidXNlVmVydGV4Q29sb3JzIiwidXNlRmxhdFNoYWRpbmciLCJ1c2VTa2lubmluZyIsInVzZU1vcnBoVGFyZ2V0cyIsInVzZU1vcnBoTm9ybWFscyIsImlzUG9pbnRzIiwidXVpZCIsInBvaW50c01hdGVyaWFsIiwiUG9pbnRzTWF0ZXJpYWwiLCJzaXplQXR0ZW51YXRpb24iLCJpc0xpbmUiLCJsaW5lTWF0ZXJpYWwiLCJjYWNoZWRNYXRlcmlhbCIsInNraW5uaW5nIiwidmVydGV4VGFuZ2VudHMiLCJ2ZXJ0ZXhDb2xvcnMiLCJmbGF0U2hhZGluZyIsIm1vcnBoVGFyZ2V0cyIsInV2MiIsInV2IiwibWF0ZXJpYWxJbmRleCIsIm1hdGVyaWFsVHlwZSIsIm1hdGVyaWFscyIsIm1hdGVyaWFsRXh0ZW5zaW9ucyIsInNnRXh0ZW5zaW9uIiwia211RXh0ZW5zaW9uIiwibWV0YWxsaWNGYWN0b3IiLCJyb3VnaG5lc3NGYWN0b3IiLCJtZXRhbGxpY1JvdWdobmVzc1RleHR1cmUiLCJkb3VibGVTaWRlZCIsIkRvdWJsZVNpZGUiLCJhbHBoYU1vZGUiLCJkZXB0aFdyaXRlIiwiYWxwaGFUZXN0IiwiYWxwaGFDdXRvZmYiLCJub3JtYWxUZXh0dXJlIiwib2NjbHVzaW9uVGV4dHVyZSIsInN0cmVuZ3RoIiwiZW1pc3NpdmVGYWN0b3IiLCJlbWlzc2l2ZVRleHR1cmUiLCJjbGVhcmNvYXRFeHRlbnNpb24iLCJlbmNvZGluZyIsInNSR0JFbmNvZGluZyIsImxvYWRHZW9tZXRyaWVzIiwicHJpbWl0aXZlcyIsImNyZWF0ZURyYWNvUHJpbWl0aXZlIiwiZHJhY29FeHRlbnNpb24iLCJnZW9tZXRyeVByb21pc2UiLCJtb2RlIiwiY2FjaGVkIiwicHJvbWlzZSIsIm1lc2hJbmRleCIsIkZyb250U2lkZSIsInJlc3VsdHMiLCJnZW9tZXRyaWVzIiwiU2tpbm5lZE1lc2giLCJNZXNoIiwic2tpbldlaWdodCIsIm5vcm1hbGl6ZVNraW5XZWlnaHRzIiwiVHJpYW5nbGVTdHJpcERyYXdNb2RlIiwiTGluZSIsIkxpbmVMb29wIiwiUG9pbnRzIiwiZ3JvdXAiLCJHcm91cCIsImNhbWVyYUluZGV4IiwiY2FtZXJhRGVmIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJNYXRoVXRpbHMiLCJ5Zm92IiwiYXNwZWN0UmF0aW8iLCJ6bmVhciIsInpmYXIiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJ4bWFnIiwieW1hZyIsInNraW5EZWYiLCJza2luRW50cnkiLCJpbnZlcnNlQmluZE1hdHJpY2VzIiwiYW5pbWF0aW9uSW5kZXgiLCJhbmltYXRpb25EZWYiLCJwZW5kaW5nTm9kZXMiLCJwZW5kaW5nSW5wdXRBY2Nlc3NvcnMiLCJwZW5kaW5nT3V0cHV0QWNjZXNzb3JzIiwicGVuZGluZ1NhbXBsZXJzIiwicGVuZGluZ1RhcmdldHMiLCJjaGFubmVscyIsImNoYW5uZWwiLCJub2RlIiwiaWQiLCJpbnB1dCIsInBhcmFtZXRlcnMiLCJvdXRwdXQiLCJpbnB1dEFjY2Vzc29ycyIsIm91dHB1dEFjY2Vzc29ycyIsInRyYWNrcyIsImlucHV0QWNjZXNzb3IiLCJvdXRwdXRBY2Nlc3NvciIsIlR5cGVkS2V5ZnJhbWVUcmFjayIsInVwZGF0ZU1hdHJpeCIsIk51bWJlcktleWZyYW1lVHJhY2siLCJRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayIsIlZlY3RvcktleWZyYW1lVHJhY2siLCJ0YXJnZXROYW1lIiwiaW50ZXJwb2xhdGlvbiIsInRyYXZlcnNlIiwiaXNNZXNoIiwib3V0cHV0QXJyYXkiLCJzY2FsZWQiLCJ0cmFjayIsImNyZWF0ZUludGVycG9sYW50IiwidGltZXMiLCJnZXRWYWx1ZVNpemUiLCJpc0ludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZSIsIkFuaW1hdGlvbkNsaXAiLCJpbnN0YW5jZU51bSIsIm8iLCJsaWdodCIsIkJvbmUiLCJPYmplY3QzRCIsIlByb3BlcnR5QmluZGluZyIsIm1hdHJpeCIsIk1hdHJpeDQiLCJxdWF0ZXJuaW9uIiwiYnVpbGROb2RlSGllcmFjaHkiLCJub2RlSWQiLCJwYXJlbnRPYmplY3QiLCJwZW5kaW5nSm9pbnRzIiwiam9pbnROb2RlcyIsImJvbmVzIiwiYm9uZUludmVyc2VzIiwiam9pbnROb2RlIiwibWF0IiwiYmluZCIsIlNrZWxldG9uIiwiY2hpbGRyZW4iLCJjaGlsZCIsInNjZW5lSW5kZXgiLCJzY2VuZURlZiIsIm5vZGVJZHMiLCJjbG9jayIsImZvckVhY2giLCJwbGFjZSIsInN0YXRzIiwic2V0VXAiLCJUZXh0dXJlIiwicGxheWVyTW9kZWwiLCJNb2RlbCIsIml0ZW0iLCJsb2FkZWQiLCJ0b3RhbCIsIkludGVyYWN0aW9uIiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwiZGlzcGxheSIsIlRXRUVOIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGltZW91dCIsImtleWJvYXJkIiwiS2V5Ym9hcmQiLCJldmVudCIsIkhlbHBlcnMiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VPdmVyIiwiZXZlbnRNYXRjaGVzIiwicHJldmVudERlZmF1bHQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwib2JqIiwicmVmIiwibW9kZWxEYXRhIiwiaXNMaWdodCIsIkJ1ZmZlckdlb21ldHJ5VXRpbHMiLCJtYXhBbmlzb3Ryb3B5IiwiaW1hZ2VGaWxlcyIsInByb21pc2VBcnJheSIsImltYWdlRmlsZSIsImltYWdlIiwiYW5pc290cm9weSIsIm1vZGVsT0JKIiwieGhyIiwicmVhc29uIiwiaXNEZXYiLCJpc1Nob3dpbmdTdGF0cyIsImlzTG9hZGVkIiwiaXNUd2VlbmluZyIsImlzUm90YXRpbmciLCJpc01vdXNlTW92aW5nIiwiaXNNb3VzZU92ZXIiLCJkcHIiLCJlYXNpbmciLCJkdXJhdGlvbiIsIm1vZGVscyIsInBsYXllciIsImVuYWJsZUhlbHBlciIsInRyYW5zbHVjZW50IiwiZm92IiwicG9zWCIsInBvc1kiLCJwb3NaIiwiY29udHJvbHMiLCJhdXRvUm90YXRlIiwiYXV0b1JvdGF0ZVNwZWVkIiwicm90YXRlU3BlZWQiLCJ6b29tU3BlZWQiLCJtaW5EaXN0YW5jZSIsIm1heERpc3RhbmNlIiwibWluUG9sYXJBbmdsZSIsIm1heFBvbGFyQW5nbGUiLCJtaW5BemltdXRoQW5nbGUiLCJJbmZpbml0eSIsIm1heEF6aW11dGhBbmdsZSIsImVuYWJsZURhbXBpbmciLCJkYW1waW5nRmFjdG9yIiwiZW5hYmxlWm9vbSIsImhlbHBlckVuYWJsZWQiLCJtYXBXaWR0aCIsIm1hcEhlaWdodCIsImdyb3VuZENvbG9yIiwiY29tcHV0ZVRhbmdlbnRzIiwibm9ybWFscyIsInV2cyIsIm5WZXJ0aWNlcyIsInRhbmdlbnRzIiwidGFuMSIsInRhbjIiLCJ2QSIsInZCIiwidkMiLCJ1dkEiLCJ1dkIiLCJ1dkMiLCJzZGlyIiwidGRpciIsImhhbmRsZVRyaWFuZ2xlIiwidyIsInRtcCIsInRtcDIiLCJuIiwibjIiLCJoYW5kbGVWZXJ0ZXgiLCJhIiwiYiIsImMiLCJzdWIiLCJyIiwiaXNGaW5pdGUiLCJhZGRTY2FsZWRWZWN0b3IiLCJkb3QiLCJjcm9zc1ZlY3RvcnMiLCJtZXJnZUJ1ZmZlckdlb21ldHJpZXMiLCJ1c2VHcm91cHMiLCJpc0luZGV4ZWQiLCJhdHRyaWJ1dGVzVXNlZCIsIlNldCIsIm1vcnBoQXR0cmlidXRlc1VzZWQiLCJtZXJnZWRHZW9tZXRyeSIsImF0dHJpYnV0ZXNDb3VudCIsImhhcyIsIm1lcmdlZFVzZXJEYXRhIiwiYWRkR3JvdXAiLCJpbmRleE9mZnNldCIsIm1lcmdlZEluZGV4IiwibWVyZ2VkQXR0cmlidXRlIiwibWVyZ2VCdWZmZXJBdHRyaWJ1dGVzIiwibnVtTW9ycGhUYXJnZXRzIiwibW9ycGhBdHRyaWJ1dGVzVG9NZXJnZSIsIm1lcmdlZE1vcnBoQXR0cmlidXRlIiwiYXJyYXlMZW5ndGgiLCJpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwiaW50ZXJsZWF2ZUF0dHJpYnV0ZXMiLCJpbnRlcmxlYXZlZEJ1ZmZlciIsInJlcyIsImdldHRlcnMiLCJzZXR0ZXJzIiwiaWJhIiwiayIsImVzdGltYXRlQnl0ZXNVc2VkIiwibWVtIiwiYXR0ciIsIm1lcmdlVmVydGljZXMiLCJ0b2xlcmFuY2UiLCJOdW1iZXIiLCJFUFNJTE9OIiwiaGFzaFRvSW5kZXgiLCJ2ZXJ0ZXhDb3VudCIsIm5leHRJbmRleCIsImF0dHJpYnV0ZU5hbWVzIiwiYXR0ckFycmF5cyIsIm1vcnBoQXR0cnNBcnJheXMiLCJtb3JwaEF0dHIiLCJmaWxsIiwiZGVjaW1hbFNoaWZ0IiwibG9nMTAiLCJzaGlmdE11bHRpcGxpZXIiLCJwb3ciLCJoYXNoIiwibmV3YXJyYXkiLCJuZXdNb3JwaEFycmF5cyIsImdldHRlckZ1bmMiLCJtIiwibWwiLCJvbGRBdHRyaWJ1dGUiLCJvbGRNb3JwaEF0dHJpYnV0ZSIsIm1vcnBoQXR0cmlidXRlIiwiVHJpYW5nbGVzRHJhd01vZGUiLCJjbGVhckdyb3VwcyIsImNhbnZhcyIsIkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCIsIndlYmdsIiwiY3JlYXRlRWxlbWVudCIsIldlYkdMUmVuZGVyaW5nQ29udGV4dCIsImdldENvbnRleHQiLCJ3b3JrZXJzIiwiV29ya2VyIiwiZmlsZWFwaSIsIkZpbGUiLCJGaWxlUmVhZGVyIiwiRmlsZUxpc3QiLCJnZXRXZWJHTEVycm9yTWVzc2FnZSIsImVsZW1lbnQiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwidGV4dEFsaWduIiwiYmFja2dyb3VuZCIsInBhZGRpbmciLCJtYXJnaW4iLCJpbm5lckhUTUwiLCJhZGRHZXRXZWJHTE1lc3NhZ2UiLCJwYXJlbnQiLCJmbiIsInRocmVzaGhvbGQiLCJsYXN0IiwiZGVmZXJUaW1lciIsImNvbnRleHQiLCJub3ciLCJEYXRlIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwibGVuZ3RoQ29tcHV0YWJsZSIsInBlcmNlbnRDb21wbGV0ZSIsInJvdW5kIiwidmVydGljZXNOZWVkVXBkYXRlIiwibm9ybWFsc05lZWRVcGRhdGUiLCJjb2xvcnNOZWVkVXBkYXRlIiwibWF0ZXJpYWxLZXkiLCJBTElBUyIsImtleUNvZGVzIiwib25LZXlDaGFuZ2UiLCJvbkJsdXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJvcCIsImtleUNvZGUiLCJrZXlEZXNjIiwic3BsaXQiLCJwcmVzc2VkIiwidG9VcHBlckNhc2UiLCJjaGFyQ29kZUF0IiwiYWxpYXNlcyIsImFsaWFzS2V5cyIsInNoaWZ0S2V5IiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJ3ZWJwYWNrRW1wdHlDb250ZXh0IiwicmVxIiwiY29kZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3ZWJwYWNrQ29udGV4dCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iXSwibWFwcGluZ3MiOiI7aVNBU0VBLFFBQVFDLElBQUksMkNBRVpDLGlCQUFlLEVBR2pCLFdBRUUsR0FBSUMsZ0JBRUcsQ0FDTCxJQUFNQyxFQUFZQyxTQUFTQyxlQUFlLGdCQUMxQyxJQUFJQyxVQUFLSCxRQUhURCwrQkFPSkssSSx3VkNuQnFCQyxFLFdBQ25CLFdBQVlDLEdBQVUsWSw0RkFBQSxTQUNwQixJQUFNQyxFQUFRRCxFQUFTRSxXQUFXRCxNQUM1QkUsRUFBU0gsRUFBU0UsV0FBV0MsT0FHbkNDLEtBQUtDLFlBQWMsSUFBSUMsb0JBQXdCZCxxQkFBbUJTLEVBQVFFLEVBQVFYLHNCQUFvQkEsc0JBQ3RHWSxLQUFLQyxZQUFZRSxTQUFTQyxJQUFJaEIsc0JBQW9CQSxzQkFBb0JBLHVCQUd0RVksS0FBS0ssV0FBV1QsR0FHaEJVLE9BQU9DLGlCQUFpQixVQUFVLGtCQUFNLEVBQUtGLFdBQVdULE1BQVcsRyxpREFHckUsU0FBV0EsR0FFVEksS0FBS0MsWUFBWU8sT0FBU1osRUFBU0UsV0FBV0QsTUFBUUQsRUFBU0UsV0FBV0MsT0FHMUVDLEtBQUtDLFlBQVlRLDhCLHdYQ3JCQUMsRSxXQUNuQixXQUFZQyxJLDRGQUFPLFNBQ2pCWCxLQUFLVyxNQUFRQSxFQUViWCxLQUFLTixPLDJDQUdQLFdBRUVNLEtBQUtZLGFB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R0FFWkksRUFBZS9nQixLQUFPLFdBQ3JCLE9BQU92WCxPQUFPdVgsS0FBS2xLLElBRXBCaXJCLEVBQWV2d0IsUUFBVXd3QixFQUN6QkgsRUFBT0MsUUFBVUMsRUFDakJBLEVBQWUzUixHQUFLLGtGLDhEQ3ZCcEIsU0FBU3NSLEVBQW9CQyxHQUM1QixJQUFJOTBCLEVBQUksSUFBSTBCLE1BQU0sdUJBQXlCb3pCLEVBQU0sS0FFakQsTUFEQTkwQixFQUFFKzBCLEtBQU8sbUJBQ0gvMEIsRUFFUDYwQixFQUFvQjFnQixLQUFPLElBQU0sR0FDakMwZ0IsRUFBb0Jsd0IsUUFBVWt3QixFQUM5QkEsRUFBb0J0UixHQUFLLDBEQUN6QnlSLEVBQU9DLFFBQVVKLEciLCJmaWxlIjoibWFpbi5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29uZmlnIGZyb20gJy4vZGF0YS9jb25maWcnO1xuaW1wb3J0IERldGVjdG9yIGZyb20gJy4vdXRpbHMvZGV0ZWN0b3InO1xuaW1wb3J0IE1haW4gZnJvbSAnLi9hcHAvbWFpbic7XG5cbi8vIFN0eWxlc1xuaW1wb3J0ICcuLy4uL2Nzcy9hcHAuc2Nzcyc7XG5cbi8vIENoZWNrIGVudmlyb25tZW50IGFuZCBzZXQgdGhlIENvbmZpZyBoZWxwZXJcbmlmKF9fRU5WX18gPT09ICdkZXYnKSB7XG4gIGNvbnNvbGUubG9nKCctLS0tLSBSVU5OSU5HIElOIERFViBFTlZJUk9OTUVOVCEgLS0tLS0nKTtcblxuICBDb25maWcuaXNEZXYgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICAvLyBDaGVjayBmb3Igd2ViR0wgY2FwYWJpbGl0aWVzXG4gIGlmKCFEZXRlY3Rvci53ZWJnbCkge1xuICAgIERldGVjdG9yLmFkZEdldFdlYkdMTWVzc2FnZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHBDb250YWluZXInKTtcbiAgICBuZXcgTWFpbihjb250YWluZXIpO1xuICB9XG59XG5cbmluaXQoKTtcbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIENsYXNzIHRoYXQgY3JlYXRlcyBhbmQgdXBkYXRlcyB0aGUgbWFpbiBjYW1lcmFcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbWVyYSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgY29uc3Qgd2lkdGggPSByZW5kZXJlci5kb21FbGVtZW50LndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHJlbmRlcmVyLmRvbUVsZW1lbnQuaGVpZ2h0O1xuXG4gICAgLy8gQ3JlYXRlIGFuZCBwb3NpdGlvbiBhIFBlcnNwZWN0aXZlIENhbWVyYVxuICAgIHRoaXMudGhyZWVDYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoQ29uZmlnLmNhbWVyYS5mb3YsIHdpZHRoIC8gaGVpZ2h0LCBDb25maWcuY2FtZXJhLm5lYXIsIENvbmZpZy5jYW1lcmEuZmFyKTtcbiAgICB0aGlzLnRocmVlQ2FtZXJhLnBvc2l0aW9uLnNldChDb25maWcuY2FtZXJhLnBvc1gsIENvbmZpZy5jYW1lcmEucG9zWSwgQ29uZmlnLmNhbWVyYS5wb3NaKTtcblxuICAgIC8vIEluaXRpYWwgc2l6aW5nXG4gICAgdGhpcy51cGRhdGVTaXplKHJlbmRlcmVyKTtcbiAgICBcbiAgICAvLyBMaXN0ZW5lcnNcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy51cGRhdGVTaXplKHJlbmRlcmVyKSwgZmFsc2UpO1xuICB9XG5cbiAgdXBkYXRlU2l6ZShyZW5kZXJlcikge1xuICAgIC8vIFVwZGF0ZSBjYW1lcmEgYXNwZWN0IHJhdGlvIHdpdGggd2luZG93IGFzcGVjdCByYXRpb1xuICAgIHRoaXMudGhyZWVDYW1lcmEuYXNwZWN0ID0gcmVuZGVyZXIuZG9tRWxlbWVudC53aWR0aCAvIHJlbmRlcmVyLmRvbUVsZW1lbnQuaGVpZ2h0O1xuXG4gICAgLy8gQWx3YXlzIGNhbGwgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCBvbiBjYW1lcmEgY2hhbmdlXG4gICAgdGhpcy50aHJlZUNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIFNldHMgdXAgYW5kIHBsYWNlcyBhbGwgbGlnaHRzIGluIHNjZW5lXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWdodCB7XG4gIGNvbnN0cnVjdG9yKHNjZW5lKSB7XG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIC8vIEFtYmllbnRcbiAgICB0aGlzLmFtYmllbnRMaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoQ29uZmlnLmFtYmllbnRMaWdodC5jb2xvcik7XG4gICAgdGhpcy5hbWJpZW50TGlnaHQudmlzaWJsZSA9IENvbmZpZy5hbWJpZW50TGlnaHQuZW5hYmxlZDtcblxuICAgIC8vIFBvaW50IGxpZ2h0XG4gICAgdGhpcy5wb2ludExpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoQ29uZmlnLnBvaW50TGlnaHQuY29sb3IsIENvbmZpZy5wb2ludExpZ2h0LmludGVuc2l0eSwgQ29uZmlnLnBvaW50TGlnaHQuZGlzdGFuY2UpO1xuICAgIHRoaXMucG9pbnRMaWdodC5wb3NpdGlvbi5zZXQoQ29uZmlnLnBvaW50TGlnaHQueCwgQ29uZmlnLnBvaW50TGlnaHQueSwgQ29uZmlnLnBvaW50TGlnaHQueik7XG4gICAgdGhpcy5wb2ludExpZ2h0LnZpc2libGUgPSBDb25maWcucG9pbnRMaWdodC5lbmFibGVkO1xuXG4gICAgLy8gRGlyZWN0aW9uYWwgbGlnaHRcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodChDb25maWcuZGlyZWN0aW9uYWxMaWdodC5jb2xvciwgQ29uZmlnLmRpcmVjdGlvbmFsTGlnaHQuaW50ZW5zaXR5KTtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uc2V0KENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LngsIENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LnksIENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LnopO1xuICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC52aXNpYmxlID0gQ29uZmlnLmRpcmVjdGlvbmFsTGlnaHQuZW5hYmxlZDtcblxuICAgIC8vIFNoYWRvdyBtYXBcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuY2FzdFNoYWRvdyA9IENvbmZpZy5zaGFkb3cuZW5hYmxlZDtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmJpYXMgPSBDb25maWcuc2hhZG93LmJpYXM7XG4gICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IENvbmZpZy5zaGFkb3cubmVhcjtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSBDb25maWcuc2hhZG93LmZhcjtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gQ29uZmlnLnNoYWRvdy5sZWZ0O1xuICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gQ29uZmlnLnNoYWRvdy5yaWdodDtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS50b3AgPSBDb25maWcuc2hhZG93LnRvcDtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5ib3R0b20gPSBDb25maWcuc2hhZG93LmJvdHRvbTtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSBDb25maWcuc2hhZG93Lm1hcFdpZHRoO1xuICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSBDb25maWcuc2hhZG93Lm1hcEhlaWdodDtcblxuICAgIC8vIFNoYWRvdyBjYW1lcmEgaGVscGVyXG4gICAgaWYoQ29uZmlnLmlzRGV2KSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHRIZWxwZXIgPSBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhKTtcbiAgICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodEhlbHBlci52aXNpYmxlID0gQ29uZmlnLnNoYWRvdy5oZWxwZXJFbmFibGVkO1xuICAgIH1cbiAgICAvLyBIZW1pc3BoZXJlIGxpZ2h0XG4gICAgdGhpcy5oZW1pTGlnaHQgPSBuZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KENvbmZpZy5oZW1pTGlnaHQuY29sb3IsIENvbmZpZy5oZW1pTGlnaHQuZ3JvdW5kQ29sb3IsIENvbmZpZy5oZW1pTGlnaHQuaW50ZW5zaXR5KTtcbiAgICB0aGlzLmhlbWlMaWdodC5wb3NpdGlvbi5zZXQoQ29uZmlnLmhlbWlMaWdodC54LCBDb25maWcuaGVtaUxpZ2h0LnksIENvbmZpZy5oZW1pTGlnaHQueik7XG4gICAgdGhpcy5oZW1pTGlnaHQudmlzaWJsZSA9IENvbmZpZy5oZW1pTGlnaHQuZW5hYmxlZDtcbiAgfVxuXG4gIHBsYWNlKGxpZ2h0TmFtZSkge1xuICAgIHN3aXRjaChsaWdodE5hbWUpIHtcbiAgICAgIGNhc2UgJ2FtYmllbnQnOlxuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmFtYmllbnRMaWdodCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkaXJlY3Rpb25hbCc6XG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuZGlyZWN0aW9uYWxMaWdodCk7XG4gICAgICAgIGlmKENvbmZpZy5pc0Rldikge1xuICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuZGlyZWN0aW9uYWxMaWdodEhlbHBlcik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3BvaW50JzpcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5wb2ludExpZ2h0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2hlbWknOlxuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmhlbWlMaWdodCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG4vLyBVU2UgdGhpcyBjbGFzcyBhcyBhIGhlbHBlciB0byBzZXQgdXAgc29tZSBkZWZhdWx0IG1hdGVyaWFsc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0ZXJpYWwge1xuICBjb25zdHJ1Y3Rvcihjb2xvcikge1xuICAgIHRoaXMuYmFzaWMgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgICAgY29sb3IsXG4gICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXG4gICAgfSk7XG5cbiAgICB0aGlzLnN0YW5kYXJkID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcbiAgICAgIGNvbG9yLFxuICAgICAgc2hhZGluZzogVEhSRUUuRmxhdFNoYWRpbmcsXG4gICAgICByb3VnaG5lc3M6IDEsXG4gICAgICBtZXRhbG5lc3M6IDAsXG4gICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXG4gICAgfSk7XG5cbiAgICB0aGlzLndpcmUgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe3dpcmVmcmFtZTogdHJ1ZX0pO1xuICB9XG59XG5cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIE1haW4gd2ViR0wgcmVuZGVyZXIgY2xhc3NcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVyIHtcbiAgY29uc3RydWN0b3Ioc2NlbmUsIGNvbnRhaW5lcikge1xuICAgIC8vIFByb3BlcnRpZXNcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG5cbiAgICAvLyBDcmVhdGUgV2ViR0wgcmVuZGVyZXIgYW5kIHNldCBpdHMgYW50aWFsaWFzXG4gICAgdGhpcy50aHJlZVJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2FudGlhbGlhczogdHJ1ZX0pO1xuXG4gICAgLy8gU2V0IGNsZWFyIGNvbG9yIHRvIGZvZyB0byBlbmFibGUgZm9nIG9yIHRvIGhleCBjb2xvciBmb3Igbm8gZm9nXG4gICAgdGhpcy50aHJlZVJlbmRlcmVyLnNldENsZWFyQ29sb3Ioc2NlbmUuZm9nLmNvbG9yKTtcbiAgICB0aGlzLnRocmVlUmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7IC8vIEZvciByZXRpbmFcblxuICAgIC8vIEFwcGVuZHMgY2FudmFzXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMudGhyZWVSZW5kZXJlci5kb21FbGVtZW50KTtcblxuICAgIC8vIFNoYWRvdyBtYXAgb3B0aW9uc1xuICAgIHRoaXMudGhyZWVSZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWU7XG4gICAgdGhpcy50aHJlZVJlbmRlcmVyLnNoYWRvd01hcC50eXBlID0gVEhSRUUuUENGU29mdFNoYWRvd01hcDtcblxuICAgIC8vIEdldCBhbmlzb3Ryb3B5IGZvciB0ZXh0dXJlc1xuICAgIENvbmZpZy5tYXhBbmlzb3Ryb3B5ID0gdGhpcy50aHJlZVJlbmRlcmVyLmNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCk7XG5cbiAgICAvLyBJbml0aWFsIHNpemUgdXBkYXRlIHNldCB0byBjYW52YXMgY29udGFpbmVyXG4gICAgdGhpcy51cGRhdGVTaXplKCk7XG5cbiAgICAvLyBMaXN0ZW5lcnNcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4gdGhpcy51cGRhdGVTaXplKCksIGZhbHNlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy51cGRhdGVTaXplKCksIGZhbHNlKTtcbiAgfVxuXG4gIHVwZGF0ZVNpemUoKSB7XG4gICAgdGhpcy50aHJlZVJlbmRlcmVyLnNldFNpemUodGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGgsIHRoaXMuY29udGFpbmVyLm9mZnNldEhlaWdodCk7XG4gIH1cblxuICByZW5kZXIoc2NlbmUsIGNhbWVyYSkge1xuICAgIC8vIFJlbmRlcnMgc2NlbmUgdG8gY2FudmFzIHRhcmdldFxuICAgIHRoaXMudGhyZWVSZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFZlcnRleE5vcm1hbHNIZWxwZXIgfSBmcm9tICcuL3ZlcnRleE5vcm1hbHNIZWxwZXInO1xuXG4vLyBTaW1wbGUgbWVzaCBoZWxwZXIgdGhhdCBzaG93cyBlZGdlcywgd2lyZWZyYW1lcywgYW5kIGZhY2UgYW5kIHZlcnRleCBub3JtYWxzXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNoSGVscGVyIHtcbiAgY29uc3RydWN0b3Ioc2NlbmUsIG1lc2gpIHtcbiAgICB0aGlzLm1lc2ggPSBtZXNoO1xuICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcblxuICAgIGNvbnN0IHdpcmVmcmFtZSA9IG5ldyBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSh0aGlzLm1lc2guZ2VvbWV0cnkpO1xuICAgIHRoaXMud2lyZUxpbmUgPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKHdpcmVmcmFtZSk7XG4gICAgdGhpcy53aXJlTGluZS5tYXRlcmlhbC5kZXB0aFRlc3QgPSBmYWxzZTtcbiAgICB0aGlzLndpcmVMaW5lLm1hdGVyaWFsLm9wYWNpdHkgPSAwLjI1O1xuICAgIHRoaXMud2lyZUxpbmUubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG4gICAgY29uc3QgZWRnZXMgPSBuZXcgVEhSRUUuRWRnZXNHZW9tZXRyeSh0aGlzLm1lc2guZ2VvbWV0cnkpO1xuICAgIHRoaXMuZWRnZXNMaW5lID0gbmV3IFRIUkVFLkxpbmVTZWdtZW50cyhlZGdlcyk7XG4gICAgdGhpcy5lZGdlc0xpbmUubWF0ZXJpYWwuZGVwdGhUZXN0ID0gZmFsc2U7XG4gICAgdGhpcy5lZGdlc0xpbmUubWF0ZXJpYWwub3BhY2l0eSA9IDAuMjU7XG4gICAgdGhpcy5lZGdlc0xpbmUubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG4gICAgdGhpcy52ZXJ0ZXhIZWxwZXIgPSBuZXcgVmVydGV4Tm9ybWFsc0hlbHBlcih0aGlzLm1lc2gsIDIpO1xuICAgIHRoaXMuYm94SGVscGVyID0gbmV3IFRIUkVFLkJveEhlbHBlcih0aGlzLm1lc2gpO1xuICB9XG5cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMubWVzaC5hZGQodGhpcy53aXJlTGluZSk7XG4gICAgdGhpcy5tZXNoLmFkZCh0aGlzLmVkZ2VzTGluZSk7XG5cbiAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLnZlcnRleEhlbHBlcik7XG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5ib3hIZWxwZXIpO1xuICB9XG5cbiAgZGlzYWJsZSgpIHtcbiAgICB0aGlzLm1lc2gucmVtb3ZlKHRoaXMud2lyZUxpbmUpO1xuICAgIHRoaXMubWVzaC5yZW1vdmUodGhpcy5lZGdlc0xpbmUpO1xuXG4gICAgdGhpcy5zY2VuZS5yZW1vdmUodGhpcy52ZXJ0ZXhIZWxwZXIpO1xuICAgIHRoaXMuc2NlbmUucmVtb3ZlKHRoaXMuYm94SGVscGVyKTtcbiAgfVxufVxuIiwiLy8gTG9jYWwgdmFycyBmb3IgclN0YXRzXG5sZXQgclMsIGJTLCBnbFMsIHRTO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0cyB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG5cbiAgc2V0VXAoKSB7XG4gICAgYlMgPSBuZXcgQnJvd3NlclN0YXRzKCk7XG4gICAgZ2xTID0gbmV3IGdsU3RhdHMoKTtcbiAgICB0UyA9IG5ldyB0aHJlZVN0YXRzKHRoaXMucmVuZGVyZXIudGhyZWVSZW5kZXJlcik7XG5cbiAgICByUyA9IG5ldyByU3RhdHMoe1xuICAgICAgQ1NTUGF0aDogJy4vY3NzLycsXG4gICAgICB1c2VyVGltaW5nQVBJOiB0cnVlLFxuICAgICAgdmFsdWVzOiB7XG4gICAgICAgIGZyYW1lOiB7IGNhcHRpb246ICdUb3RhbCBmcmFtZSB0aW1lIChtcyknLCBvdmVyOiAxNiwgYXZlcmFnZTogdHJ1ZSwgYXZnTXM6IDEwMCB9LFxuICAgICAgICBmcHM6IHsgY2FwdGlvbjogJ0ZyYW1lcmF0ZSAoRlBTKScsIGJlbG93OiAzMCB9LFxuICAgICAgICBjYWxsczogeyBjYXB0aW9uOiAnQ2FsbHMgKHRocmVlLmpzKScsIG92ZXI6IDMwMDAgfSxcbiAgICAgICAgcmFmOiB7IGNhcHRpb246ICdUaW1lIHNpbmNlIGxhc3QgckFGIChtcyknLCBhdmVyYWdlOiB0cnVlLCBhdmdNczogMTAwIH0sXG4gICAgICAgIHJzdGF0czogeyBjYXB0aW9uOiAnclN0YXRzIHVwZGF0ZSAobXMpJywgYXZlcmFnZTogdHJ1ZSwgYXZnTXM6IDEwMCB9LFxuICAgICAgICB0ZXh0dXJlOiB7IGNhcHRpb246ICdHZW5UZXgnLCBhdmVyYWdlOiB0cnVlLCBhdmdNczogMTAwIH1cbiAgICAgIH0sXG4gICAgICBncm91cHM6IFtcbiAgICAgICAgeyBjYXB0aW9uOiAnRnJhbWVyYXRlJywgdmFsdWVzOiBbJ2ZwcycsICdyYWYnXSB9LFxuICAgICAgICB7IGNhcHRpb246ICdGcmFtZSBCdWRnZXQnLCB2YWx1ZXM6IFsnZnJhbWUnLCAndGV4dHVyZScsICdzZXR1cCcsICdyZW5kZXInXSB9XG4gICAgICBdLFxuICAgICAgZnJhY3Rpb25zOiBbXG4gICAgICAgIHsgYmFzZTogJ2ZyYW1lJywgc3RlcHM6IFsndGV4dHVyZScsICdzZXR1cCcsICdyZW5kZXInXSB9XG4gICAgICBdLFxuICAgICAgcGx1Z2luczogW2JTLCB0U11cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBzdGFydCgpIHtcbiAgICByUygnZnJhbWUnKS5zdGFydCgpO1xuICAgIGdsUy5zdGFydCgpO1xuXG4gICAgclMoJ3JBRicpLnRpY2soKTtcbiAgICByUygnRlBTJykuZnJhbWUoKTtcblxuICAgIHJTKCdyZW5kZXInKS5zdGFydCgpO1xuICB9XG5cbiAgc3RhdGljIGVuZCgpIHtcbiAgICByUygncmVuZGVyJykuZW5kKCk7IC8vIHJlbmRlciBmaW5pc2hlZFxuICAgIHJTKCdmcmFtZScpLmVuZCgpOyAvLyBmcmFtZSBmaW5pc2hlZFxuXG4gICAgLy8gTG9jYWwgclN0YXRzIHVwZGF0ZVxuICAgIHJTKCdyU3RhdHMnKS5zdGFydCgpO1xuICAgIHJTKCkudXBkYXRlKCk7XG4gICAgclMoJ3JTdGF0cycpLmVuZCgpO1xuICB9XG59XG4iLCIvKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5pbXBvcnQge1xuICBCdWZmZXJHZW9tZXRyeSxcbiAgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSxcbiAgTGluZVNlZ21lbnRzLFxuICBMaW5lQmFzaWNNYXRlcmlhbCxcbiAgTWF0cml4MyxcbiAgVmVjdG9yMyxcbn0gZnJvbSAndGhyZWUnO1xuXG5jb25zdCBfdjEgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YyID0gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9ub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpO1xuY29uc3QgX2tleXMgPSBbJ2EnLCAnYicsICdjJ107XG5cbmZ1bmN0aW9uIFZlcnRleE5vcm1hbHNIZWxwZXIob2JqZWN0LCBzaXplLCBoZXgpIHtcbiAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gIHRoaXMuc2l6ZSA9IHNpemUgIT09IHVuZGVmaW5lZCA/IHNpemUgOiAwLjE7XG5cbiAgY29uc3QgY29sb3IgPSBoZXggIT09IHVuZGVmaW5lZCA/IGhleCA6IDB4ZmYwMDAwO1xuXG4gIC8vXG5cbiAgbGV0IG5Ob3JtYWxzID0gMDtcblxuICBjb25zdCBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5O1xuXG4gIGlmIChvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0dlb21ldHJ5KSB7XG4gICAgbk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5mYWNlcy5sZW5ndGggKiAzO1xuICB9IGVsc2UgaWYgKG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkpIHtcbiAgICBuTm9ybWFscyA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsLmNvdW50O1xuICB9XG5cbiAgLy9cblxuICBjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShuTm9ybWFscyAqIDIgKiAzLCAzKTtcblxuICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgcG9zaXRpb25zKTtcblxuICBMaW5lU2VnbWVudHMuY2FsbCh0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9KSk7XG5cbiAgdGhpcy50eXBlID0gJ1ZlcnRleE5vcm1hbHNIZWxwZXInO1xuXG4gIC8vXG5cbiAgdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cbiAgdGhpcy51cGRhdGUoKTtcbn1cblxuVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKExpbmVTZWdtZW50cy5wcm90b3R5cGUpO1xuVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWZXJ0ZXhOb3JtYWxzSGVscGVyO1xuXG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIGxldCBpZHg7XG4gIHRoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xuXG4gIF9ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkKTtcblxuICBjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkO1xuICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuICAvL1xuXG4gIGNvbnN0IG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7XG5cbiAgaWYgKG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkpIHtcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IG9iakdlb21ldHJ5LnZlcnRpY2VzO1xuXG4gICAgY29uc3QgZmFjZXMgPSBvYmpHZW9tZXRyeS5mYWNlcztcblxuICAgIGlkeCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgZmFjZSA9IGZhY2VzW2ldO1xuXG4gICAgICBmb3IgKGxldCBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGorKykge1xuICAgICAgICBjb25zdCB2ZXJ0ZXggPSB2ZXJ0aWNlc1tmYWNlW19rZXlzW2pdXV07XG4gICAgICAgIGNvbnN0IG5vcm1hbCA9IGZhY2UudmVydGV4Tm9ybWFsc1tqXTtcblxuICAgICAgICBfdjEuY29weSh2ZXJ0ZXgpLmFwcGx5TWF0cml4NChtYXRyaXhXb3JsZCk7XG4gICAgICAgIF92Mi5jb3B5KG5vcm1hbCkuYXBwbHlNYXRyaXgzKF9ub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuc2l6ZSkuYWRkKF92MSk7XG5cbiAgICAgICAgcG9zaXRpb24uc2V0WFlaKGlkeCwgX3YxLngsIF92MS55LCBfdjEueik7XG5cbiAgICAgICAgaWR4ID0gaWR4ICsgMTtcblxuICAgICAgICBwb3NpdGlvbi5zZXRYWVooaWR4LCBfdjIueCwgX3YyLnksIF92Mi56KTtcblxuICAgICAgICBpZHggPSBpZHggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XG4gICAgY29uc3Qgb2JqUG9zID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcbiAgICBjb25zdCBvYmpOb3JtID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7XG5cbiAgICBpZHggPSAwO1xuXG4gICAgLy8gZm9yIHNpbXBsaWNpdHksIGlnbm9yZSBpbmRleCBhbmQgZHJhd2NhbGxzLCBhbmQgcmVuZGVyIGV2ZXJ5IG5vcm1hbFxuXG4gICAgZm9yICh2YXIgaiA9IDAsIGpsID0gb2JqUG9zLmNvdW50OyBqIDwgamw7IGorKykge1xuICAgICAgX3YxLnNldChvYmpQb3MuZ2V0WChqKSwgb2JqUG9zLmdldFkoaiksIG9ialBvcy5nZXRaKGopKS5hcHBseU1hdHJpeDQobWF0cml4V29ybGQpO1xuICAgICAgX3YyLnNldChvYmpOb3JtLmdldFgoaiksIG9iak5vcm0uZ2V0WShqKSwgb2JqTm9ybS5nZXRaKGopKTtcbiAgICAgIF92Mi5hcHBseU1hdHJpeDMoX25vcm1hbE1hdHJpeCkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKS5hZGQoX3YxKTtcblxuICAgICAgcG9zaXRpb24uc2V0WFlaKGlkeCwgX3YxLngsIF92MS55LCBfdjEueik7XG5cbiAgICAgIGlkeCA9IGlkeCArIDE7XG5cbiAgICAgIHBvc2l0aW9uLnNldFhZWihpZHgsIF92Mi54LCBfdjIueSwgX3YyLnopO1xuXG4gICAgICBpZHggPSBpZHggKyAxO1xuICAgIH1cbiAgfVxuXG4gIHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCB7IFZlcnRleE5vcm1hbHNIZWxwZXIgfTtcbiIsIi8qKlxuICogQGF1dGhvciBSaWNoIFRpYmJldHQgLyBodHRwczovL2dpdGh1Yi5jb20vcmljaHRyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBUb255IFBhcmlzaSAvIGh0dHA6Ly93d3cudG9ueXBhcmlzaS5jb20vXG4gKiBAYXV0aG9yIFRha2FoaXJvIC8gaHR0cHM6Ly9naXRodWIuY29tL3Rha2FoaXJveFxuICogQGF1dGhvciBEb24gTWNDdXJkeSAvIGh0dHBzOi8vd3d3LmRvbm1jY3VyZHkuY29tXG4gKi9cblxuaW1wb3J0IHtcbiAgQW5pbWF0aW9uQ2xpcCxcbiAgQm9uZSxcbiAgQm94MyxcbiAgQnVmZmVyQXR0cmlidXRlLFxuICBCdWZmZXJHZW9tZXRyeSxcbiAgQ2xhbXBUb0VkZ2VXcmFwcGluZyxcbiAgQ29sb3IsXG4gIERpcmVjdGlvbmFsTGlnaHQsXG4gIERvdWJsZVNpZGUsXG4gIEZpbGVMb2FkZXIsXG4gIEZyb250U2lkZSxcbiAgR3JvdXAsXG4gIEludGVybGVhdmVkQnVmZmVyLFxuICBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSxcbiAgSW50ZXJwb2xhbnQsXG4gIEludGVycG9sYXRlRGlzY3JldGUsXG4gIEludGVycG9sYXRlTGluZWFyLFxuICBMaW5lLFxuICBMaW5lQmFzaWNNYXRlcmlhbCxcbiAgTGluZUxvb3AsXG4gIExpbmVTZWdtZW50cyxcbiAgTGluZWFyRmlsdGVyLFxuICBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIsXG4gIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsXG4gIExvYWRlcixcbiAgTG9hZGVyVXRpbHMsXG4gIE1hdGVyaWFsLFxuICBNYXRoVXRpbHMsXG4gIE1hdHJpeDQsXG4gIE1lc2gsXG4gIE1lc2hCYXNpY01hdGVyaWFsLFxuICBNZXNoUGh5c2ljYWxNYXRlcmlhbCxcbiAgTWVzaFN0YW5kYXJkTWF0ZXJpYWwsXG4gIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsXG4gIE5lYXJlc3RGaWx0ZXIsXG4gIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG4gIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLFxuICBOdW1iZXJLZXlmcmFtZVRyYWNrLFxuICBPYmplY3QzRCxcbiAgT3J0aG9ncmFwaGljQ2FtZXJhLFxuICBQZXJzcGVjdGl2ZUNhbWVyYSxcbiAgUG9pbnRMaWdodCxcbiAgUG9pbnRzLFxuICBQb2ludHNNYXRlcmlhbCxcbiAgUHJvcGVydHlCaW5kaW5nLFxuICBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayxcbiAgUkdCQUZvcm1hdCxcbiAgUkdCRm9ybWF0LFxuICBSZXBlYXRXcmFwcGluZyxcbiAgU2tlbGV0b24sXG4gIFNraW5uZWRNZXNoLFxuICBTcGhlcmUsXG4gIFNwb3RMaWdodCxcbiAgVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICBUZXh0dXJlTG9hZGVyLFxuICBUcmlhbmdsZUZhbkRyYXdNb2RlLFxuICBUcmlhbmdsZVN0cmlwRHJhd01vZGUsXG4gIFZlY3RvcjIsXG4gIFZlY3RvcjMsXG4gIFZlY3RvcktleWZyYW1lVHJhY2ssXG4gIHNSR0JFbmNvZGluZ1xufSBmcm9tICd0aHJlZSc7XG5cbmNvbnN0IEdMVEZMb2FkZXIgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHTFRGTG9hZGVyKG1hbmFnZXIpIHtcbiAgICBMb2FkZXIuY2FsbCh0aGlzLCBtYW5hZ2VyKTtcblxuICAgIHRoaXMuZHJhY29Mb2FkZXIgPSBudWxsO1xuICAgIHRoaXMuZGRzTG9hZGVyID0gbnVsbDtcbiAgfVxuXG4gIEdMVEZMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExvYWRlci5wcm90b3R5cGUpLCB7XG4gICAgY29uc3RydWN0b3I6IEdMVEZMb2FkZXIsXG5cbiAgICBsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcbiAgICAgIHZhciBzY29wZSA9IHRoaXM7XG5cbiAgICAgIHZhciByZXNvdXJjZVBhdGg7XG5cbiAgICAgIGlmICh0aGlzLnJlc291cmNlUGF0aCAhPT0gJycpIHtcbiAgICAgICAgcmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGg7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGF0aCAhPT0gJycpIHtcbiAgICAgICAgcmVzb3VyY2VQYXRoID0gdGhpcy5wYXRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb3VyY2VQYXRoID0gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UodXJsKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGVsbHMgdGhlIExvYWRpbmdNYW5hZ2VyIHRvIHRyYWNrIGFuIGV4dHJhIGl0ZW0sIHdoaWNoIHJlc29sdmVzIGFmdGVyXG4gICAgICAvLyB0aGUgbW9kZWwgaXMgZnVsbHkgbG9hZGVkLiBUaGlzIG1lYW5zIHRoZSBjb3VudCBvZiBpdGVtcyBsb2FkZWQgd2lsbFxuICAgICAgLy8gYmUgaW5jb3JyZWN0LCBidXQgZW5zdXJlcyBtYW5hZ2VyLm9uTG9hZCgpIGRvZXMgbm90IGZpcmUgZWFybHkuXG4gICAgICBzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCh1cmwpO1xuXG4gICAgICB2YXIgX29uRXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgIG9uRXJyb3IoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKHVybCk7XG4gICAgICAgIHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKHNjb3BlLm1hbmFnZXIpO1xuXG4gICAgICBsb2FkZXIuc2V0UGF0aCh0aGlzLnBhdGgpO1xuICAgICAgbG9hZGVyLnNldFJlc3BvbnNlVHlwZSgnYXJyYXlidWZmZXInKTtcblxuICAgICAgaWYgKHNjb3BlLmNyb3NzT3JpZ2luID09PSAndXNlLWNyZWRlbnRpYWxzJykge1xuICAgICAgICBsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBsb2FkZXIubG9hZChcbiAgICAgICAgdXJsLFxuICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzY29wZS5wYXJzZShcbiAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgcmVzb3VyY2VQYXRoLFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZ2x0Zikge1xuICAgICAgICAgICAgICAgIG9uTG9hZChnbHRmKTtcblxuICAgICAgICAgICAgICAgIHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBfb25FcnJvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBfb25FcnJvcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUHJvZ3Jlc3MsXG4gICAgICAgIF9vbkVycm9yXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBzZXREUkFDT0xvYWRlcjogZnVuY3Rpb24gKGRyYWNvTG9hZGVyKSB7XG4gICAgICB0aGlzLmRyYWNvTG9hZGVyID0gZHJhY29Mb2FkZXI7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgc2V0RERTTG9hZGVyOiBmdW5jdGlvbiAoZGRzTG9hZGVyKSB7XG4gICAgICB0aGlzLmRkc0xvYWRlciA9IGRkc0xvYWRlcjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBwYXJzZTogZnVuY3Rpb24gKGRhdGEsIHBhdGgsIG9uTG9hZCwgb25FcnJvcikge1xuICAgICAgdmFyIGNvbnRlbnQ7XG4gICAgICB2YXIgZXh0ZW5zaW9ucyA9IHt9O1xuXG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnRlbnQgPSBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hZ2ljID0gTG9hZGVyVXRpbHMuZGVjb2RlVGV4dChuZXcgVWludDhBcnJheShkYXRhLCAwLCA0KSk7XG5cbiAgICAgICAgaWYgKG1hZ2ljID09PSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBleHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGXSA9IG5ldyBHTFRGQmluYXJ5RXh0ZW5zaW9uKGRhdGEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAob25FcnJvcikgb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGVudCA9IGV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEZdLmNvbnRlbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGVudCA9IExvYWRlclV0aWxzLmRlY29kZVRleHQobmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShjb250ZW50KTtcblxuICAgICAgaWYgKGpzb24uYXNzZXQgPT09IHVuZGVmaW5lZCB8fCBqc29uLmFzc2V0LnZlcnNpb25bMF0gPCAyKSB7XG4gICAgICAgIGlmIChvbkVycm9yKVxuICAgICAgICAgIG9uRXJyb3IoXG4gICAgICAgICAgICBuZXcgRXJyb3IoJ1RIUkVFLkdMVEZMb2FkZXI6IFVuc3VwcG9ydGVkIGFzc2V0LiBnbFRGIHZlcnNpb25zID49Mi4wIGFyZSBzdXBwb3J0ZWQuJylcbiAgICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChqc29uLmV4dGVuc2lvbnNVc2VkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbi5leHRlbnNpb25zVXNlZC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIHZhciBleHRlbnNpb25OYW1lID0ganNvbi5leHRlbnNpb25zVXNlZFtpXTtcbiAgICAgICAgICB2YXIgZXh0ZW5zaW9uc1JlcXVpcmVkID0ganNvbi5leHRlbnNpb25zUmVxdWlyZWQgfHwgW107XG5cbiAgICAgICAgICBzd2l0Y2ggKGV4dGVuc2lvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMOlxuICAgICAgICAgICAgICBleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdID0gbmV3IEdMVEZMaWdodHNFeHRlbnNpb24oanNvbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19DTEVBUkNPQVQ6XG4gICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBuZXcgR0xURk1hdGVyaWFsc0NsZWFyY29hdEV4dGVuc2lvbigpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfVU5MSVQ6XG4gICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBuZXcgR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUzpcbiAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXSA9IG5ldyBHTFRGTWF0ZXJpYWxzUGJyU3BlY3VsYXJHbG9zc2luZXNzRXh0ZW5zaW9uKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEVYVEVOU0lPTlMuS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT046XG4gICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBuZXcgR0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uKFxuICAgICAgICAgICAgICAgIGpzb24sXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFjb0xvYWRlclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFM6XG4gICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBuZXcgR0xURlRleHR1cmVERFNFeHRlbnNpb24odGhpcy5kZHNMb2FkZXIpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STTpcbiAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXSA9IG5ldyBHTFRGVGV4dHVyZVRyYW5zZm9ybUV4dGVuc2lvbigpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBFWFRFTlNJT05TLktIUl9NRVNIX1FVQU5USVpBVElPTjpcbiAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXSA9IG5ldyBHTFRGTWVzaFF1YW50aXphdGlvbkV4dGVuc2lvbigpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgaWYgKGV4dGVuc2lvbnNSZXF1aXJlZC5pbmRleE9mKGV4dGVuc2lvbk5hbWUpID49IDApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IFVua25vd24gZXh0ZW5zaW9uIFwiJyArIGV4dGVuc2lvbk5hbWUgKyAnXCIuJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHBhcnNlciA9IG5ldyBHTFRGUGFyc2VyKGpzb24sIGV4dGVuc2lvbnMsIHtcbiAgICAgICAgcGF0aDogcGF0aCB8fCB0aGlzLnJlc291cmNlUGF0aCB8fCAnJyxcbiAgICAgICAgY3Jvc3NPcmlnaW46IHRoaXMuY3Jvc3NPcmlnaW4sXG4gICAgICAgIG1hbmFnZXI6IHRoaXMubWFuYWdlclxuICAgICAgfSk7XG5cbiAgICAgIHBhcnNlci5wYXJzZShvbkxvYWQsIG9uRXJyb3IpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qIEdMVEZSRUdJU1RSWSAqL1xuXG4gIGZ1bmN0aW9uIEdMVEZSZWdpc3RyeSgpIHtcbiAgICB2YXIgb2JqZWN0cyA9IHt9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0c1trZXldO1xuICAgICAgfSxcblxuICAgICAgYWRkOiBmdW5jdGlvbiAoa2V5LCBvYmplY3QpIHtcbiAgICAgICAgb2JqZWN0c1trZXldID0gb2JqZWN0O1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRlbGV0ZSBvYmplY3RzW2tleV07XG4gICAgICB9LFxuXG4gICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2JqZWN0cyA9IHt9O1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgLyoqKioqKioqKiogRVhURU5TSU9OUyAqKioqKioqKioqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICB2YXIgRVhURU5TSU9OUyA9IHtcbiAgICBLSFJfQklOQVJZX0dMVEY6ICdLSFJfYmluYXJ5X2dsVEYnLFxuICAgIEtIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OOiAnS0hSX2RyYWNvX21lc2hfY29tcHJlc3Npb24nLFxuICAgIEtIUl9MSUdIVFNfUFVOQ1RVQUw6ICdLSFJfbGlnaHRzX3B1bmN0dWFsJyxcbiAgICBLSFJfTUFURVJJQUxTX0NMRUFSQ09BVDogJ0tIUl9tYXRlcmlhbHNfY2xlYXJjb2F0JyxcbiAgICBLSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTOiAnS0hSX21hdGVyaWFsc19wYnJTcGVjdWxhckdsb3NzaW5lc3MnLFxuICAgIEtIUl9NQVRFUklBTFNfVU5MSVQ6ICdLSFJfbWF0ZXJpYWxzX3VubGl0JyxcbiAgICBLSFJfVEVYVFVSRV9UUkFOU0ZPUk06ICdLSFJfdGV4dHVyZV90cmFuc2Zvcm0nLFxuICAgIEtIUl9NRVNIX1FVQU5USVpBVElPTjogJ0tIUl9tZXNoX3F1YW50aXphdGlvbicsXG4gICAgTVNGVF9URVhUVVJFX0REUzogJ01TRlRfdGV4dHVyZV9kZHMnXG4gIH07XG5cbiAgLyoqXG4gICAqIEREUyBUZXh0dXJlIEV4dGVuc2lvblxuICAgKlxuICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvVmVuZG9yL01TRlRfdGV4dHVyZV9kZHNcbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIEdMVEZUZXh0dXJlRERTRXh0ZW5zaW9uKGRkc0xvYWRlcikge1xuICAgIGlmICghZGRzTG9hZGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUSFJFRS5HTFRGTG9hZGVyOiBBdHRlbXB0aW5nIHRvIGxvYWQgLmRkcyB0ZXh0dXJlIHdpdGhvdXQgaW1wb3J0aW5nIEREU0xvYWRlcidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gRVhURU5TSU9OUy5NU0ZUX1RFWFRVUkVfRERTO1xuICAgIHRoaXMuZGRzTG9hZGVyID0gZGRzTG9hZGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1bmN0dWFsIExpZ2h0cyBFeHRlbnNpb25cbiAgICpcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX2xpZ2h0c19wdW5jdHVhbFxuICAgKi9cbiAgZnVuY3Rpb24gR0xURkxpZ2h0c0V4dGVuc2lvbihqc29uKSB7XG4gICAgdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMO1xuXG4gICAgdmFyIGV4dGVuc2lvbiA9IChqc29uLmV4dGVuc2lvbnMgJiYganNvbi5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTF0pIHx8IHt9O1xuICAgIHRoaXMubGlnaHREZWZzID0gZXh0ZW5zaW9uLmxpZ2h0cyB8fCBbXTtcbiAgfVxuXG4gIEdMVEZMaWdodHNFeHRlbnNpb24ucHJvdG90eXBlLmxvYWRMaWdodCA9IGZ1bmN0aW9uIChsaWdodEluZGV4KSB7XG4gICAgdmFyIGxpZ2h0RGVmID0gdGhpcy5saWdodERlZnNbbGlnaHRJbmRleF07XG4gICAgdmFyIGxpZ2h0Tm9kZTtcblxuICAgIHZhciBjb2xvciA9IG5ldyBDb2xvcigweGZmZmZmZik7XG4gICAgaWYgKGxpZ2h0RGVmLmNvbG9yICE9PSB1bmRlZmluZWQpIGNvbG9yLmZyb21BcnJheShsaWdodERlZi5jb2xvcik7XG5cbiAgICB2YXIgcmFuZ2UgPSBsaWdodERlZi5yYW5nZSAhPT0gdW5kZWZpbmVkID8gbGlnaHREZWYucmFuZ2UgOiAwO1xuXG4gICAgc3dpdGNoIChsaWdodERlZi50eXBlKSB7XG4gICAgICBjYXNlICdkaXJlY3Rpb25hbCc6XG4gICAgICAgIGxpZ2h0Tm9kZSA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KGNvbG9yKTtcbiAgICAgICAgbGlnaHROb2RlLnRhcmdldC5wb3NpdGlvbi5zZXQoMCwgMCwgLTEpO1xuICAgICAgICBsaWdodE5vZGUuYWRkKGxpZ2h0Tm9kZS50YXJnZXQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9pbnQnOlxuICAgICAgICBsaWdodE5vZGUgPSBuZXcgUG9pbnRMaWdodChjb2xvcik7XG4gICAgICAgIGxpZ2h0Tm9kZS5kaXN0YW5jZSA9IHJhbmdlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc3BvdCc6XG4gICAgICAgIGxpZ2h0Tm9kZSA9IG5ldyBTcG90TGlnaHQoY29sb3IpO1xuICAgICAgICBsaWdodE5vZGUuZGlzdGFuY2UgPSByYW5nZTtcbiAgICAgICAgLy8gSGFuZGxlIHNwb3RsaWdodCBwcm9wZXJ0aWVzLlxuICAgICAgICBsaWdodERlZi5zcG90ID0gbGlnaHREZWYuc3BvdCB8fCB7fTtcbiAgICAgICAgbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSA9XG4gICAgICAgICAgbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSAhPT0gdW5kZWZpbmVkID8gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSA6IDA7XG4gICAgICAgIGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGUgPVxuICAgICAgICAgIGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGUgIT09IHVuZGVmaW5lZCA/IGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGUgOiBNYXRoLlBJIC8gNC4wO1xuICAgICAgICBsaWdodE5vZGUuYW5nbGUgPSBsaWdodERlZi5zcG90Lm91dGVyQ29uZUFuZ2xlO1xuICAgICAgICBsaWdodE5vZGUucGVudW1icmEgPSAxLjAgLSBsaWdodERlZi5zcG90LmlubmVyQ29uZUFuZ2xlIC8gbGlnaHREZWYuc3BvdC5vdXRlckNvbmVBbmdsZTtcbiAgICAgICAgbGlnaHROb2RlLnRhcmdldC5wb3NpdGlvbi5zZXQoMCwgMCwgLTEpO1xuICAgICAgICBsaWdodE5vZGUuYWRkKGxpZ2h0Tm9kZS50YXJnZXQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUSFJFRS5HTFRGTG9hZGVyOiBVbmV4cGVjdGVkIGxpZ2h0IHR5cGUsIFwiJyArIGxpZ2h0RGVmLnR5cGUgKyAnXCIuJyk7XG4gICAgfVxuXG4gICAgLy8gU29tZSBsaWdodHMgKGUuZy4gc3BvdCkgZGVmYXVsdCB0byBhIHBvc2l0aW9uIG90aGVyIHRoYW4gdGhlIG9yaWdpbi4gUmVzZXQgdGhlIHBvc2l0aW9uXG4gICAgLy8gaGVyZSwgYmVjYXVzZSBub2RlLWxldmVsIHBhcnNpbmcgd2lsbCBvbmx5IG92ZXJyaWRlIHBvc2l0aW9uIGlmIGV4cGxpY2l0bHkgc3BlY2lmaWVkLlxuICAgIGxpZ2h0Tm9kZS5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XG5cbiAgICBsaWdodE5vZGUuZGVjYXkgPSAyO1xuXG4gICAgaWYgKGxpZ2h0RGVmLmludGVuc2l0eSAhPT0gdW5kZWZpbmVkKSBsaWdodE5vZGUuaW50ZW5zaXR5ID0gbGlnaHREZWYuaW50ZW5zaXR5O1xuXG4gICAgbGlnaHROb2RlLm5hbWUgPSBsaWdodERlZi5uYW1lIHx8ICdsaWdodF8nICsgbGlnaHRJbmRleDtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobGlnaHROb2RlKTtcbiAgfTtcblxuICAvKipcbiAgICogVW5saXQgTWF0ZXJpYWxzIEV4dGVuc2lvblxuICAgKlxuICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfbWF0ZXJpYWxzX3VubGl0XG4gICAqL1xuICBmdW5jdGlvbiBHTFRGTWF0ZXJpYWxzVW5saXRFeHRlbnNpb24oKSB7XG4gICAgdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUO1xuICB9XG5cbiAgR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uLnByb3RvdHlwZS5nZXRNYXRlcmlhbFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE1lc2hCYXNpY01hdGVyaWFsO1xuICB9O1xuXG4gIEdMVEZNYXRlcmlhbHNVbmxpdEV4dGVuc2lvbi5wcm90b3R5cGUuZXh0ZW5kUGFyYW1zID0gZnVuY3Rpb24gKFxuICAgIG1hdGVyaWFsUGFyYW1zLFxuICAgIG1hdGVyaWFsRGVmLFxuICAgIHBhcnNlclxuICApIHtcbiAgICB2YXIgcGVuZGluZyA9IFtdO1xuXG4gICAgbWF0ZXJpYWxQYXJhbXMuY29sb3IgPSBuZXcgQ29sb3IoMS4wLCAxLjAsIDEuMCk7XG4gICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IDEuMDtcblxuICAgIHZhciBtZXRhbGxpY1JvdWdobmVzcyA9IG1hdGVyaWFsRGVmLnBick1ldGFsbGljUm91Z2huZXNzO1xuXG4gICAgaWYgKG1ldGFsbGljUm91Z2huZXNzKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3IpKSB7XG4gICAgICAgIHZhciBhcnJheSA9IG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvcjtcblxuICAgICAgICBtYXRlcmlhbFBhcmFtcy5jb2xvci5mcm9tQXJyYXkoYXJyYXkpO1xuICAgICAgICBtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gYXJyYXlbM107XG4gICAgICB9XG5cbiAgICAgIGlmIChtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGVuZGluZy5wdXNoKFxuICAgICAgICAgIHBhcnNlci5hc3NpZ25UZXh0dXJlKG1hdGVyaWFsUGFyYW1zLCAnbWFwJywgbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENsZWFyY29hdCBNYXRlcmlhbHMgRXh0ZW5zaW9uXG4gICAqXG4gICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9leHRlbnNpb25zLzIuMC9LaHJvbm9zL0tIUl9tYXRlcmlhbHNfY2xlYXJjb2F0XG4gICAqL1xuICBmdW5jdGlvbiBHTFRGTWF0ZXJpYWxzQ2xlYXJjb2F0RXh0ZW5zaW9uKCkge1xuICAgIHRoaXMubmFtZSA9IEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19DTEVBUkNPQVQ7XG4gIH1cblxuICBHTFRGTWF0ZXJpYWxzQ2xlYXJjb2F0RXh0ZW5zaW9uLnByb3RvdHlwZS5nZXRNYXRlcmlhbFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE1lc2hQaHlzaWNhbE1hdGVyaWFsO1xuICB9O1xuXG4gIEdMVEZNYXRlcmlhbHNDbGVhcmNvYXRFeHRlbnNpb24ucHJvdG90eXBlLmV4dGVuZFBhcmFtcyA9IGZ1bmN0aW9uIChcbiAgICBtYXRlcmlhbFBhcmFtcyxcbiAgICBtYXRlcmlhbERlZixcbiAgICBwYXJzZXJcbiAgKSB7XG4gICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgIHZhciBleHRlbnNpb24gPSBtYXRlcmlhbERlZi5leHRlbnNpb25zW3RoaXMubmFtZV07XG5cbiAgICBpZiAoZXh0ZW5zaW9uLmNsZWFyY29hdEZhY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBtYXRlcmlhbFBhcmFtcy5jbGVhcmNvYXQgPSBleHRlbnNpb24uY2xlYXJjb2F0RmFjdG9yO1xuICAgIH1cblxuICAgIGlmIChleHRlbnNpb24uY2xlYXJjb2F0VGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwZW5kaW5nLnB1c2goXG4gICAgICAgIHBhcnNlci5hc3NpZ25UZXh0dXJlKG1hdGVyaWFsUGFyYW1zLCAnY2xlYXJjb2F0TWFwJywgZXh0ZW5zaW9uLmNsZWFyY29hdFRleHR1cmUpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChleHRlbnNpb24uY2xlYXJjb2F0Um91Z2huZXNzRmFjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1hdGVyaWFsUGFyYW1zLmNsZWFyY29hdFJvdWdobmVzcyA9IGV4dGVuc2lvbi5jbGVhcmNvYXRSb3VnaG5lc3NGYWN0b3I7XG4gICAgfVxuXG4gICAgaWYgKGV4dGVuc2lvbi5jbGVhcmNvYXRSb3VnaG5lc3NUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBlbmRpbmcucHVzaChcbiAgICAgICAgcGFyc2VyLmFzc2lnblRleHR1cmUoXG4gICAgICAgICAgbWF0ZXJpYWxQYXJhbXMsXG4gICAgICAgICAgJ2NsZWFyY29hdFJvdWdobmVzc01hcCcsXG4gICAgICAgICAgZXh0ZW5zaW9uLmNsZWFyY29hdFJvdWdobmVzc1RleHR1cmVcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZXh0ZW5zaW9uLmNsZWFyY29hdE5vcm1hbFRleHR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGVuZGluZy5wdXNoKFxuICAgICAgICBwYXJzZXIuYXNzaWduVGV4dHVyZShcbiAgICAgICAgICBtYXRlcmlhbFBhcmFtcyxcbiAgICAgICAgICAnY2xlYXJjb2F0Tm9ybWFsTWFwJyxcbiAgICAgICAgICBleHRlbnNpb24uY2xlYXJjb2F0Tm9ybWFsVGV4dHVyZVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICBpZiAoZXh0ZW5zaW9uLmNsZWFyY29hdE5vcm1hbFRleHR1cmUuc2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgc2NhbGUgPSBleHRlbnNpb24uY2xlYXJjb2F0Tm9ybWFsVGV4dHVyZS5zY2FsZTtcblxuICAgICAgICBtYXRlcmlhbFBhcmFtcy5jbGVhcmNvYXROb3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKHNjYWxlLCBzY2FsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpO1xuICB9O1xuXG4gIC8qIEJJTkFSWSBFWFRFTlNJT04gKi9cbiAgdmFyIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX01BR0lDID0gJ2dsVEYnO1xuICB2YXIgQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIID0gMTI7XG4gIHZhciBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTID0geyBKU09OOiAweDRlNGY1MzRhLCBCSU46IDB4MDA0ZTQ5NDIgfTtcblxuICBmdW5jdGlvbiBHTFRGQmluYXJ5RXh0ZW5zaW9uKGRhdGEpIHtcbiAgICB0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9CSU5BUllfR0xURjtcbiAgICB0aGlzLmNvbnRlbnQgPSBudWxsO1xuICAgIHRoaXMuYm9keSA9IG51bGw7XG5cbiAgICB2YXIgaGVhZGVyVmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLCAwLCBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEgpO1xuXG4gICAgdGhpcy5oZWFkZXIgPSB7XG4gICAgICBtYWdpYzogTG9hZGVyVXRpbHMuZGVjb2RlVGV4dChuZXcgVWludDhBcnJheShkYXRhLnNsaWNlKDAsIDQpKSksXG4gICAgICB2ZXJzaW9uOiBoZWFkZXJWaWV3LmdldFVpbnQzMig0LCB0cnVlKSxcbiAgICAgIGxlbmd0aDogaGVhZGVyVmlldy5nZXRVaW50MzIoOCwgdHJ1ZSlcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuaGVhZGVyLm1hZ2ljICE9PSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBnbFRGLUJpbmFyeSBoZWFkZXIuJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmhlYWRlci52ZXJzaW9uIDwgMi4wKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RIUkVFLkdMVEZMb2FkZXI6IExlZ2FjeSBiaW5hcnkgZmlsZSBkZXRlY3RlZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgY2h1bmtWaWV3ID0gbmV3IERhdGFWaWV3KGRhdGEsIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCk7XG4gICAgdmFyIGNodW5rSW5kZXggPSAwO1xuXG4gICAgd2hpbGUgKGNodW5rSW5kZXggPCBjaHVua1ZpZXcuYnl0ZUxlbmd0aCkge1xuICAgICAgdmFyIGNodW5rTGVuZ3RoID0gY2h1bmtWaWV3LmdldFVpbnQzMihjaHVua0luZGV4LCB0cnVlKTtcbiAgICAgIGNodW5rSW5kZXggKz0gNDtcblxuICAgICAgdmFyIGNodW5rVHlwZSA9IGNodW5rVmlldy5nZXRVaW50MzIoY2h1bmtJbmRleCwgdHJ1ZSk7XG4gICAgICBjaHVua0luZGV4ICs9IDQ7XG5cbiAgICAgIGlmIChjaHVua1R5cGUgPT09IEJJTkFSWV9FWFRFTlNJT05fQ0hVTktfVFlQRVMuSlNPTikge1xuICAgICAgICB2YXIgY29udGVudEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKyBjaHVua0luZGV4LFxuICAgICAgICAgIGNodW5rTGVuZ3RoXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY29udGVudCA9IExvYWRlclV0aWxzLmRlY29kZVRleHQoY29udGVudEFycmF5KTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmtUeXBlID09PSBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTLkJJTikge1xuICAgICAgICB2YXIgYnl0ZU9mZnNldCA9IEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCArIGNodW5rSW5kZXg7XG4gICAgICAgIHRoaXMuYm9keSA9IGRhdGEuc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGNodW5rTGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xpZW50cyBtdXN0IGlnbm9yZSBjaHVua3Mgd2l0aCB1bmtub3duIHR5cGVzLlxuXG4gICAgICBjaHVua0luZGV4ICs9IGNodW5rTGVuZ3RoO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbnRlbnQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogSlNPTiBjb250ZW50IG5vdCBmb3VuZC4nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRFJBQ08gTWVzaCBDb21wcmVzc2lvbiBFeHRlbnNpb25cbiAgICpcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX2RyYWNvX21lc2hfY29tcHJlc3Npb25cbiAgICovXG4gIGZ1bmN0aW9uIEdMVEZEcmFjb01lc2hDb21wcmVzc2lvbkV4dGVuc2lvbihqc29uLCBkcmFjb0xvYWRlcikge1xuICAgIGlmICghZHJhY29Mb2FkZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogTm8gRFJBQ09Mb2FkZXIgaW5zdGFuY2UgcHJvdmlkZWQuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTjtcbiAgICB0aGlzLmpzb24gPSBqc29uO1xuICAgIHRoaXMuZHJhY29Mb2FkZXIgPSBkcmFjb0xvYWRlcjtcbiAgICB0aGlzLmRyYWNvTG9hZGVyLnByZWxvYWQoKTtcbiAgfVxuXG4gIEdMVEZEcmFjb01lc2hDb21wcmVzc2lvbkV4dGVuc2lvbi5wcm90b3R5cGUuZGVjb2RlUHJpbWl0aXZlID0gZnVuY3Rpb24gKHByaW1pdGl2ZSwgcGFyc2VyKSB7XG4gICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgdmFyIGRyYWNvTG9hZGVyID0gdGhpcy5kcmFjb0xvYWRlcjtcbiAgICB2YXIgYnVmZmVyVmlld0luZGV4ID0gcHJpbWl0aXZlLmV4dGVuc2lvbnNbdGhpcy5uYW1lXS5idWZmZXJWaWV3O1xuICAgIHZhciBnbHRmQXR0cmlidXRlTWFwID0gcHJpbWl0aXZlLmV4dGVuc2lvbnNbdGhpcy5uYW1lXS5hdHRyaWJ1dGVzO1xuICAgIHZhciB0aHJlZUF0dHJpYnV0ZU1hcCA9IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVOb3JtYWxpemVkTWFwID0ge307XG4gICAgdmFyIGF0dHJpYnV0ZVR5cGVNYXAgPSB7fTtcblxuICAgIGZvciAodmFyIGF0dHJpYnV0ZU5hbWUgaW4gZ2x0ZkF0dHJpYnV0ZU1hcCkge1xuICAgICAgdmFyIHRocmVlQXR0cmlidXRlTmFtZSA9IEFUVFJJQlVURVNbYXR0cmlidXRlTmFtZV0gfHwgYXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICB0aHJlZUF0dHJpYnV0ZU1hcFt0aHJlZUF0dHJpYnV0ZU5hbWVdID0gZ2x0ZkF0dHJpYnV0ZU1hcFthdHRyaWJ1dGVOYW1lXTtcbiAgICB9XG5cbiAgICBmb3IgKGF0dHJpYnV0ZU5hbWUgaW4gcHJpbWl0aXZlLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHZhciB0aHJlZUF0dHJpYnV0ZU5hbWUgPSBBVFRSSUJVVEVTW2F0dHJpYnV0ZU5hbWVdIHx8IGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKGdsdGZBdHRyaWJ1dGVNYXBbYXR0cmlidXRlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgYWNjZXNzb3JEZWYgPSBqc29uLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXV07XG4gICAgICAgIHZhciBjb21wb25lbnRUeXBlID0gV0VCR0xfQ09NUE9ORU5UX1RZUEVTW2FjY2Vzc29yRGVmLmNvbXBvbmVudFR5cGVdO1xuXG4gICAgICAgIGF0dHJpYnV0ZVR5cGVNYXBbdGhyZWVBdHRyaWJ1dGVOYW1lXSA9IGNvbXBvbmVudFR5cGU7XG4gICAgICAgIGF0dHJpYnV0ZU5vcm1hbGl6ZWRNYXBbdGhyZWVBdHRyaWJ1dGVOYW1lXSA9IGFjY2Vzc29yRGVmLm5vcm1hbGl6ZWQgPT09IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlci5nZXREZXBlbmRlbmN5KCdidWZmZXJWaWV3JywgYnVmZmVyVmlld0luZGV4KS50aGVuKGZ1bmN0aW9uIChidWZmZXJWaWV3KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgZHJhY29Mb2FkZXIuZGVjb2RlRHJhY29GaWxlKFxuICAgICAgICAgIGJ1ZmZlclZpZXcsXG4gICAgICAgICAgZnVuY3Rpb24gKGdlb21ldHJ5KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XG4gICAgICAgICAgICAgIHZhciBub3JtYWxpemVkID0gYXR0cmlidXRlTm9ybWFsaXplZE1hcFthdHRyaWJ1dGVOYW1lXTtcblxuICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZCAhPT0gdW5kZWZpbmVkKSBhdHRyaWJ1dGUubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc29sdmUoZ2VvbWV0cnkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhyZWVBdHRyaWJ1dGVNYXAsXG4gICAgICAgICAgYXR0cmlidXRlVHlwZU1hcFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRleHR1cmUgVHJhbnNmb3JtIEV4dGVuc2lvblxuICAgKlxuICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfdGV4dHVyZV90cmFuc2Zvcm1cbiAgICovXG4gIGZ1bmN0aW9uIEdMVEZUZXh0dXJlVHJhbnNmb3JtRXh0ZW5zaW9uKCkge1xuICAgIHRoaXMubmFtZSA9IEVYVEVOU0lPTlMuS0hSX1RFWFRVUkVfVFJBTlNGT1JNO1xuICB9XG5cbiAgR0xURlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24ucHJvdG90eXBlLmV4dGVuZFRleHR1cmUgPSBmdW5jdGlvbiAodGV4dHVyZSwgdHJhbnNmb3JtKSB7XG4gICAgdGV4dHVyZSA9IHRleHR1cmUuY2xvbmUoKTtcblxuICAgIGlmICh0cmFuc2Zvcm0ub2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRleHR1cmUub2Zmc2V0LmZyb21BcnJheSh0cmFuc2Zvcm0ub2Zmc2V0KTtcbiAgICB9XG5cbiAgICBpZiAodHJhbnNmb3JtLnJvdGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRleHR1cmUucm90YXRpb24gPSB0cmFuc2Zvcm0ucm90YXRpb247XG4gICAgfVxuXG4gICAgaWYgKHRyYW5zZm9ybS5zY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0ZXh0dXJlLnJlcGVhdC5mcm9tQXJyYXkodHJhbnNmb3JtLnNjYWxlKTtcbiAgICB9XG5cbiAgICBpZiAodHJhbnNmb3JtLnRleENvb3JkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1RIUkVFLkdMVEZMb2FkZXI6IEN1c3RvbSBVViBzZXRzIGluIFwiJyArIHRoaXMubmFtZSArICdcIiBleHRlbnNpb24gbm90IHlldCBzdXBwb3J0ZWQuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTcGVjdWxhci1HbG9zc2luZXNzIEV4dGVuc2lvblxuICAgKlxuICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfbWF0ZXJpYWxzX3BiclNwZWN1bGFyR2xvc3NpbmVzc1xuICAgKi9cblxuICAvKipcbiAgICogQSBzdWIgY2xhc3Mgb2YgU3RhbmRhcmRNYXRlcmlhbCB3aXRoIHNvbWUgb2YgdGhlIGZ1bmN0aW9uYWxpdHlcbiAgICogY2hhbmdlZCB2aWEgdGhlIGBvbkJlZm9yZUNvbXBpbGVgIGNhbGxiYWNrXG4gICAqIEBwYWlsaGVhZFxuICAgKi9cblxuICBmdW5jdGlvbiBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbChwYXJhbXMpIHtcbiAgICBNZXNoU3RhbmRhcmRNYXRlcmlhbC5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCA9IHRydWU7XG5cbiAgICAvL3ZhcmlvdXMgY2h1bmtzIHRoYXQgbmVlZCByZXBsYWNpbmdcbiAgICB2YXIgc3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICcjaWZkZWYgVVNFX1NQRUNVTEFSTUFQJyxcbiAgICAgICdcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwOycsXG4gICAgICAnI2VuZGlmJyxcbiAgICBdLmpvaW4oJ1xcbicpO1xuXG4gICAgdmFyIGdsb3NzaW5lc3NNYXBQYXJzRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICcjaWZkZWYgVVNFX0dMT1NTSU5FU1NNQVAnLFxuICAgICAgJ1x0dW5pZm9ybSBzYW1wbGVyMkQgZ2xvc3NpbmVzc01hcDsnLFxuICAgICAgJyNlbmRpZicsXG4gICAgXS5qb2luKCdcXG4nKTtcblxuICAgIHZhciBzcGVjdWxhck1hcEZyYWdtZW50Q2h1bmsgPSBbXG4gICAgICAndmVjMyBzcGVjdWxhckZhY3RvciA9IHNwZWN1bGFyOycsXG4gICAgICAnI2lmZGVmIFVTRV9TUEVDVUxBUk1BUCcsXG4gICAgICAnXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2VXYgKTsnLFxuICAgICAgJ1x0dGV4ZWxTcGVjdWxhciA9IHNSR0JUb0xpbmVhciggdGV4ZWxTcGVjdWxhciApOycsXG4gICAgICAnXHQvLyByZWFkcyBjaGFubmVsIFJHQiwgY29tcGF0aWJsZSB3aXRoIGEgZ2xURiBTcGVjdWxhci1HbG9zc2luZXNzIChSR0JBKSB0ZXh0dXJlJyxcbiAgICAgICdcdHNwZWN1bGFyRmFjdG9yICo9IHRleGVsU3BlY3VsYXIucmdiOycsXG4gICAgICAnI2VuZGlmJyxcbiAgICBdLmpvaW4oJ1xcbicpO1xuXG4gICAgdmFyIGdsb3NzaW5lc3NNYXBGcmFnbWVudENodW5rID0gW1xuICAgICAgJ2Zsb2F0IGdsb3NzaW5lc3NGYWN0b3IgPSBnbG9zc2luZXNzOycsXG4gICAgICAnI2lmZGVmIFVTRV9HTE9TU0lORVNTTUFQJyxcbiAgICAgICdcdHZlYzQgdGV4ZWxHbG9zc2luZXNzID0gdGV4dHVyZTJEKCBnbG9zc2luZXNzTWFwLCB2VXYgKTsnLFxuICAgICAgJ1x0Ly8gcmVhZHMgY2hhbm5lbCBBLCBjb21wYXRpYmxlIHdpdGggYSBnbFRGIFNwZWN1bGFyLUdsb3NzaW5lc3MgKFJHQkEpIHRleHR1cmUnLFxuICAgICAgJ1x0Z2xvc3NpbmVzc0ZhY3RvciAqPSB0ZXhlbEdsb3NzaW5lc3MuYTsnLFxuICAgICAgJyNlbmRpZicsXG4gICAgXS5qb2luKCdcXG4nKTtcblxuICAgIHZhciBsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICdQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsOycsXG4gICAgICAnbWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjsnLFxuICAgICAgJ3ZlYzMgZHh5ID0gbWF4KCBhYnMoIGRGZHgoIGdlb21ldHJ5Tm9ybWFsICkgKSwgYWJzKCBkRmR5KCBnZW9tZXRyeU5vcm1hbCApICkgKTsnLFxuICAgICAgJ2Zsb2F0IGdlb21ldHJ5Um91Z2huZXNzID0gbWF4KCBtYXgoIGR4eS54LCBkeHkueSApLCBkeHkueiApOycsXG4gICAgICAnbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBtYXgoIDEuMCAtIGdsb3NzaW5lc3NGYWN0b3IsIDAuMDUyNSApOy8vIDAuMDUyNSBjb3JyZXNwb25kcyB0byB0aGUgYmFzZSBtaXAgb2YgYSAyNTYgY3ViZW1hcC4nLFxuICAgICAgJ21hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzICs9IGdlb21ldHJ5Um91Z2huZXNzOycsXG4gICAgICAnbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBtaW4oIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzLCAxLjAgKTsnLFxuICAgICAgJ21hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhckZhY3Rvci5yZ2I7JyxcbiAgICBdLmpvaW4oJ1xcbicpO1xuXG4gICAgdmFyIHVuaWZvcm1zID0ge1xuICAgICAgc3BlY3VsYXI6IHsgdmFsdWU6IG5ldyBDb2xvcigpLnNldEhleCgweGZmZmZmZikgfSxcbiAgICAgIGdsb3NzaW5lc3M6IHsgdmFsdWU6IDEgfSxcbiAgICAgIHNwZWN1bGFyTWFwOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICBnbG9zc2luZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgfTtcblxuICAgIHRoaXMuX2V4dHJhVW5pZm9ybXMgPSB1bmlmb3JtcztcblxuICAgIC8vIHBsZWFzZSBzZWUgIzE0MDMxIG9yICMxMzE5OCBmb3IgYW4gYWx0ZXJuYXRlIGFwcHJvYWNoXG4gICAgdGhpcy5vbkJlZm9yZUNvbXBpbGUgPSBmdW5jdGlvbiAoc2hhZGVyKSB7XG4gICAgICBmb3IgKHZhciB1bmlmb3JtTmFtZSBpbiB1bmlmb3Jtcykge1xuICAgICAgICBzaGFkZXIudW5pZm9ybXNbdW5pZm9ybU5hbWVdID0gdW5pZm9ybXNbdW5pZm9ybU5hbWVdO1xuICAgICAgfVxuXG4gICAgICBzaGFkZXIuZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXIucmVwbGFjZShcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgcm91Z2huZXNzOycsXG4gICAgICAgICd1bmlmb3JtIHZlYzMgc3BlY3VsYXI7J1xuICAgICAgKTtcbiAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKFxuICAgICAgICAndW5pZm9ybSBmbG9hdCBtZXRhbG5lc3M7JyxcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgZ2xvc3NpbmVzczsnXG4gICAgICApO1xuICAgICAgc2hhZGVyLmZyYWdtZW50U2hhZGVyID0gc2hhZGVyLmZyYWdtZW50U2hhZGVyLnJlcGxhY2UoXG4gICAgICAgICcjaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+JyxcbiAgICAgICAgc3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVua1xuICAgICAgKTtcbiAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKFxuICAgICAgICAnI2luY2x1ZGUgPG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50PicsXG4gICAgICAgIGdsb3NzaW5lc3NNYXBQYXJzRnJhZ21lbnRDaHVua1xuICAgICAgKTtcbiAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKFxuICAgICAgICAnI2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD4nLFxuICAgICAgICBzcGVjdWxhck1hcEZyYWdtZW50Q2h1bmtcbiAgICAgICk7XG4gICAgICBzaGFkZXIuZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXIucmVwbGFjZShcbiAgICAgICAgJyNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfZnJhZ21lbnQ+JyxcbiAgICAgICAgZ2xvc3NpbmVzc01hcEZyYWdtZW50Q2h1bmtcbiAgICAgICk7XG4gICAgICBzaGFkZXIuZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXIucmVwbGFjZShcbiAgICAgICAgJyNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ+JyxcbiAgICAgICAgbGlnaHRQaHlzaWNhbEZyYWdtZW50Q2h1bmtcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8qZXNsaW50LWRpc2FibGUqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIHNwZWN1bGFyOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgIHVuaWZvcm1zLnNwZWN1bGFyLnZhbHVlID0gdjtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBzcGVjdWxhck1hcDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdW5pZm9ybXMuc3BlY3VsYXJNYXAudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICB1bmlmb3Jtcy5zcGVjdWxhck1hcC52YWx1ZSA9IHY7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgZ2xvc3NpbmVzczoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdW5pZm9ybXMuZ2xvc3NpbmVzcy52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgIHVuaWZvcm1zLmdsb3NzaW5lc3MudmFsdWUgPSB2O1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGdsb3NzaW5lc3NNYXA6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICB1bmlmb3Jtcy5nbG9zc2luZXNzTWFwLnZhbHVlID0gdjtcbiAgICAgICAgICAvL2hvdyBhYm91dCBzb21ldGhpbmcgbGlrZSB0aGlzIC0gQHBhaWxoZWFkXG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUCA9ICcnO1xuICAgICAgICAgICAgLy8gc2V0IFVTRV9ST1VHSE5FU1NNQVAgdG8gZW5hYmxlIHZVdlxuICAgICAgICAgICAgdGhpcy5kZWZpbmVzLlVTRV9ST1VHSE5FU1NNQVAgPSAnJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGVmaW5lcy5VU0VfUk9VR0hORVNTTUFQO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLyplc2xpbnQtZW5hYmxlKi9cbiAgICBkZWxldGUgdGhpcy5tZXRhbG5lc3M7XG4gICAgZGVsZXRlIHRoaXMucm91Z2huZXNzO1xuICAgIGRlbGV0ZSB0aGlzLm1ldGFsbmVzc01hcDtcbiAgICBkZWxldGUgdGhpcy5yb3VnaG5lc3NNYXA7XG5cbiAgICB0aGlzLnNldFZhbHVlcyhwYXJhbXMpO1xuICB9XG5cbiAgR0xURk1lc2hTdGFuZGFyZFNHTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUpO1xuICBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbDtcblxuICBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICBNZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XG4gICAgdGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcbiAgICB0aGlzLnNwZWN1bGFyLmNvcHkoc291cmNlLnNwZWN1bGFyKTtcbiAgICB0aGlzLmdsb3NzaW5lc3NNYXAgPSBzb3VyY2UuZ2xvc3NpbmVzc01hcDtcbiAgICB0aGlzLmdsb3NzaW5lc3MgPSBzb3VyY2UuZ2xvc3NpbmVzcztcbiAgICBkZWxldGUgdGhpcy5tZXRhbG5lc3M7XG4gICAgZGVsZXRlIHRoaXMucm91Z2huZXNzO1xuICAgIGRlbGV0ZSB0aGlzLm1ldGFsbmVzc01hcDtcbiAgICBkZWxldGUgdGhpcy5yb3VnaG5lc3NNYXA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgZnVuY3Rpb24gR0xURk1hdGVyaWFsc1BiclNwZWN1bGFyR2xvc3NpbmVzc0V4dGVuc2lvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTLFxuXG4gICAgICBzcGVjdWxhckdsb3NzaW5lc3NQYXJhbXM6IFtcbiAgICAgICAgJ2NvbG9yJyxcbiAgICAgICAgJ21hcCcsXG4gICAgICAgICdsaWdodE1hcCcsXG4gICAgICAgICdsaWdodE1hcEludGVuc2l0eScsXG4gICAgICAgICdhb01hcCcsXG4gICAgICAgICdhb01hcEludGVuc2l0eScsXG4gICAgICAgICdlbWlzc2l2ZScsXG4gICAgICAgICdlbWlzc2l2ZUludGVuc2l0eScsXG4gICAgICAgICdlbWlzc2l2ZU1hcCcsXG4gICAgICAgICdidW1wTWFwJyxcbiAgICAgICAgJ2J1bXBTY2FsZScsXG4gICAgICAgICdub3JtYWxNYXAnLFxuICAgICAgICAnbm9ybWFsTWFwVHlwZScsXG4gICAgICAgICdkaXNwbGFjZW1lbnRNYXAnLFxuICAgICAgICAnZGlzcGxhY2VtZW50U2NhbGUnLFxuICAgICAgICAnZGlzcGxhY2VtZW50QmlhcycsXG4gICAgICAgICdzcGVjdWxhck1hcCcsXG4gICAgICAgICdzcGVjdWxhcicsXG4gICAgICAgICdnbG9zc2luZXNzTWFwJyxcbiAgICAgICAgJ2dsb3NzaW5lc3MnLFxuICAgICAgICAnYWxwaGFNYXAnLFxuICAgICAgICAnZW52TWFwJyxcbiAgICAgICAgJ2Vudk1hcEludGVuc2l0eScsXG4gICAgICAgICdyZWZyYWN0aW9uUmF0aW8nLFxuICAgICAgXSxcblxuICAgICAgZ2V0TWF0ZXJpYWxUeXBlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbDtcbiAgICAgIH0sXG5cbiAgICAgIGV4dGVuZFBhcmFtczogZnVuY3Rpb24gKG1hdGVyaWFsUGFyYW1zLCBtYXRlcmlhbERlZiwgcGFyc2VyKSB7XG4gICAgICAgIHZhciBwYnJTcGVjdWxhckdsb3NzaW5lc3MgPSBtYXRlcmlhbERlZi5leHRlbnNpb25zW3RoaXMubmFtZV07XG5cbiAgICAgICAgbWF0ZXJpYWxQYXJhbXMuY29sb3IgPSBuZXcgQ29sb3IoMS4wLCAxLjAsIDEuMCk7XG4gICAgICAgIG1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSAxLjA7XG5cbiAgICAgICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvcikpIHtcbiAgICAgICAgICB2YXIgYXJyYXkgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvcjtcblxuICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmNvbG9yLmZyb21BcnJheShhcnJheSk7XG4gICAgICAgICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IGFycmF5WzNdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcGVuZGluZy5wdXNoKFxuICAgICAgICAgICAgcGFyc2VyLmFzc2lnblRleHR1cmUobWF0ZXJpYWxQYXJhbXMsICdtYXAnLCBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZVRleHR1cmUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdGVyaWFsUGFyYW1zLmVtaXNzaXZlID0gbmV3IENvbG9yKDAuMCwgMC4wLCAwLjApO1xuICAgICAgICBtYXRlcmlhbFBhcmFtcy5nbG9zc2luZXNzID1cbiAgICAgICAgICBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZ2xvc3NpbmVzc0ZhY3RvciAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHBiclNwZWN1bGFyR2xvc3NpbmVzcy5nbG9zc2luZXNzRmFjdG9yXG4gICAgICAgICAgICA6IDEuMDtcbiAgICAgICAgbWF0ZXJpYWxQYXJhbXMuc3BlY3VsYXIgPSBuZXcgQ29sb3IoMS4wLCAxLjAsIDEuMCk7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGJyU3BlY3VsYXJHbG9zc2luZXNzLnNwZWN1bGFyRmFjdG9yKSkge1xuICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLnNwZWN1bGFyLmZyb21BcnJheShwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJGYWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckdsb3NzaW5lc3NUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc3BlY0dsb3NzTWFwRGVmID0gcGJyU3BlY3VsYXJHbG9zc2luZXNzLnNwZWN1bGFyR2xvc3NpbmVzc1RleHR1cmU7XG4gICAgICAgICAgcGVuZGluZy5wdXNoKHBhcnNlci5hc3NpZ25UZXh0dXJlKG1hdGVyaWFsUGFyYW1zLCAnZ2xvc3NpbmVzc01hcCcsIHNwZWNHbG9zc01hcERlZikpO1xuICAgICAgICAgIHBlbmRpbmcucHVzaChwYXJzZXIuYXNzaWduVGV4dHVyZShtYXRlcmlhbFBhcmFtcywgJ3NwZWN1bGFyTWFwJywgc3BlY0dsb3NzTWFwRGVmKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZyk7XG4gICAgICB9LFxuXG4gICAgICBjcmVhdGVNYXRlcmlhbDogZnVuY3Rpb24gKG1hdGVyaWFsUGFyYW1zKSB7XG4gICAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbChtYXRlcmlhbFBhcmFtcyk7XG4gICAgICAgIG1hdGVyaWFsLmZvZyA9IHRydWU7XG5cbiAgICAgICAgbWF0ZXJpYWwuY29sb3IgPSBtYXRlcmlhbFBhcmFtcy5jb2xvcjtcblxuICAgICAgICBtYXRlcmlhbC5tYXAgPSBtYXRlcmlhbFBhcmFtcy5tYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBtYXRlcmlhbFBhcmFtcy5tYXA7XG5cbiAgICAgICAgbWF0ZXJpYWwubGlnaHRNYXAgPSBudWxsO1xuICAgICAgICBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuICAgICAgICBtYXRlcmlhbC5hb01hcCA9IG1hdGVyaWFsUGFyYW1zLmFvTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogbWF0ZXJpYWxQYXJhbXMuYW9NYXA7XG4gICAgICAgIG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG4gICAgICAgIG1hdGVyaWFsLmVtaXNzaXZlID0gbWF0ZXJpYWxQYXJhbXMuZW1pc3NpdmU7XG4gICAgICAgIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuICAgICAgICBtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9XG4gICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuZW1pc3NpdmVNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBtYXRlcmlhbFBhcmFtcy5lbWlzc2l2ZU1hcDtcblxuICAgICAgICBtYXRlcmlhbC5idW1wTWFwID0gbWF0ZXJpYWxQYXJhbXMuYnVtcE1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG1hdGVyaWFsUGFyYW1zLmJ1bXBNYXA7XG4gICAgICAgIG1hdGVyaWFsLmJ1bXBTY2FsZSA9IDE7XG5cbiAgICAgICAgbWF0ZXJpYWwubm9ybWFsTWFwID1cbiAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5ub3JtYWxNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBtYXRlcmlhbFBhcmFtcy5ub3JtYWxNYXA7XG4gICAgICAgIG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cbiAgICAgICAgaWYgKG1hdGVyaWFsUGFyYW1zLm5vcm1hbFNjYWxlKSBtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IG1hdGVyaWFsUGFyYW1zLm5vcm1hbFNjYWxlO1xuXG4gICAgICAgIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG4gICAgICAgIG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcbiAgICAgICAgbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cbiAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgPVxuICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLnNwZWN1bGFyTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogbWF0ZXJpYWxQYXJhbXMuc3BlY3VsYXJNYXA7XG4gICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyID0gbWF0ZXJpYWxQYXJhbXMuc3BlY3VsYXI7XG5cbiAgICAgICAgbWF0ZXJpYWwuZ2xvc3NpbmVzc01hcCA9XG4gICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuZ2xvc3NpbmVzc01hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG1hdGVyaWFsUGFyYW1zLmdsb3NzaW5lc3NNYXA7XG4gICAgICAgIG1hdGVyaWFsLmdsb3NzaW5lc3MgPSBtYXRlcmlhbFBhcmFtcy5nbG9zc2luZXNzO1xuXG4gICAgICAgIG1hdGVyaWFsLmFscGhhTWFwID0gbnVsbDtcblxuICAgICAgICBtYXRlcmlhbC5lbnZNYXAgPSBtYXRlcmlhbFBhcmFtcy5lbnZNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBtYXRlcmlhbFBhcmFtcy5lbnZNYXA7XG4gICAgICAgIG1hdGVyaWFsLmVudk1hcEludGVuc2l0eSA9IDEuMDtcblxuICAgICAgICBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG4gICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXNoIFF1YW50aXphdGlvbiBFeHRlbnNpb25cbiAgICpcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX21lc2hfcXVhbnRpemF0aW9uXG4gICAqL1xuICBmdW5jdGlvbiBHTFRGTWVzaFF1YW50aXphdGlvbkV4dGVuc2lvbigpIHtcbiAgICB0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9NRVNIX1FVQU5USVpBVElPTjtcbiAgfVxuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gIC8qKioqKioqKioqIElOVEVSUE9MQVRJT04gKioqKioqKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLy8gU3BsaW5lIEludGVycG9sYXRpb25cbiAgLy8gU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNhcHBlbmRpeC1jLXNwbGluZS1pbnRlcnBvbGF0aW9uXG4gIGZ1bmN0aW9uIEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50KHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIpIHtcbiAgICBJbnRlcnBvbGFudC5jYWxsKHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIpO1xuICB9XG5cbiAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJbnRlcnBvbGFudC5wcm90b3R5cGUpO1xuICBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudDtcblxuICBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXyA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIC8vIENvcGllcyBhIHNhbXBsZSB2YWx1ZSB0byB0aGUgcmVzdWx0IGJ1ZmZlci4gU2VlIGRlc2NyaXB0aW9uIG9mIGdsVEZcbiAgICAvLyBDVUJJQ1NQTElORSB2YWx1ZXMgbGF5b3V0IGluIGludGVycG9sYXRlXygpIGZ1bmN0aW9uIGJlbG93LlxuXG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuICAgICAgICB2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcbiAgICAgICAgdmFsdWVTaXplID0gdGhpcy52YWx1ZVNpemUsXG4gICAgICAgIG9mZnNldCA9IGluZGV4ICogdmFsdWVTaXplICogMyArIHZhbHVlU2l6ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpICE9PSB2YWx1ZVNpemU7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gdmFsdWVzW29mZnNldCArIGldO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmJlZm9yZVN0YXJ0XyA9XG4gICAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV87XG5cbiAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmFmdGVyRW5kXyA9XG4gICAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV87XG5cbiAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmludGVycG9sYXRlXyA9IGZ1bmN0aW9uIChpMSwgdDAsIHQsIHQxKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyO1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcztcbiAgICB2YXIgc3RyaWRlID0gdGhpcy52YWx1ZVNpemU7XG5cbiAgICB2YXIgc3RyaWRlMiA9IHN0cmlkZSAqIDI7XG4gICAgdmFyIHN0cmlkZTMgPSBzdHJpZGUgKiAzO1xuXG4gICAgdmFyIHRkID0gdDEgLSB0MDtcblxuICAgIHZhciBwID0gKHQgLSB0MCkgLyB0ZDtcbiAgICB2YXIgcHAgPSBwICogcDtcbiAgICB2YXIgcHBwID0gcHAgKiBwO1xuXG4gICAgdmFyIG9mZnNldDEgPSBpMSAqIHN0cmlkZTM7XG4gICAgdmFyIG9mZnNldDAgPSBvZmZzZXQxIC0gc3RyaWRlMztcblxuICAgIHZhciBzMiA9IC0yICogcHBwICsgMyAqIHBwO1xuICAgIHZhciBzMyA9IHBwcCAtIHBwO1xuICAgIHZhciBzMCA9IDEgLSBzMjtcbiAgICB2YXIgczEgPSBzMyAtIHBwICsgcDtcblxuICAgIC8vIExheW91dCBvZiBrZXlmcmFtZSBvdXRwdXQgdmFsdWVzIGZvciBDVUJJQ1NQTElORSBhbmltYXRpb25zOlxuICAgIC8vICAgWyBpblRhbmdlbnRfMSwgc3BsaW5lVmVydGV4XzEsIG91dFRhbmdlbnRfMSwgaW5UYW5nZW50XzIsIHNwbGluZVZlcnRleF8yLCAuLi4gXVxuICAgIGZvciAodmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7IGkrKykge1xuICAgICAgdmFyIHAwID0gdmFsdWVzW29mZnNldDAgKyBpICsgc3RyaWRlXTsgLy8gc3BsaW5lVmVydGV4X2tcbiAgICAgIHZhciBtMCA9IHZhbHVlc1tvZmZzZXQwICsgaSArIHN0cmlkZTJdICogdGQ7IC8vIG91dFRhbmdlbnRfayAqICh0X2srMSAtIHRfaylcbiAgICAgIHZhciBwMSA9IHZhbHVlc1tvZmZzZXQxICsgaSArIHN0cmlkZV07IC8vIHNwbGluZVZlcnRleF9rKzFcbiAgICAgIHZhciBtMSA9IHZhbHVlc1tvZmZzZXQxICsgaV0gKiB0ZDsgLy8gaW5UYW5nZW50X2srMSAqICh0X2srMSAtIHRfaylcblxuICAgICAgcmVzdWx0W2ldID0gczAgKiBwMCArIHMxICogbTAgKyBzMiAqIHAxICsgczMgKiBtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gIC8qKioqKioqKioqIElOVEVSTkFMUyAqKioqKioqKioqKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyogQ09OU1RBTlRTICovXG5cbiAgdmFyIFdFQkdMX0NPTlNUQU5UUyA9IHtcbiAgICBGTE9BVDogNTEyNixcbiAgICAvL0ZMT0FUX01BVDI6IDM1Njc0LFxuICAgIEZMT0FUX01BVDM6IDM1Njc1LFxuICAgIEZMT0FUX01BVDQ6IDM1Njc2LFxuICAgIEZMT0FUX1ZFQzI6IDM1NjY0LFxuICAgIEZMT0FUX1ZFQzM6IDM1NjY1LFxuICAgIEZMT0FUX1ZFQzQ6IDM1NjY2LFxuICAgIExJTkVBUjogOTcyOSxcbiAgICBSRVBFQVQ6IDEwNDk3LFxuICAgIFNBTVBMRVJfMkQ6IDM1Njc4LFxuICAgIFBPSU5UUzogMCxcbiAgICBMSU5FUzogMSxcbiAgICBMSU5FX0xPT1A6IDIsXG4gICAgTElORV9TVFJJUDogMyxcbiAgICBUUklBTkdMRVM6IDQsXG4gICAgVFJJQU5HTEVfU1RSSVA6IDUsXG4gICAgVFJJQU5HTEVfRkFOOiA2LFxuICAgIFVOU0lHTkVEX0JZVEU6IDUxMjEsXG4gICAgVU5TSUdORURfU0hPUlQ6IDUxMjMsXG4gIH07XG5cbiAgdmFyIFdFQkdMX0NPTVBPTkVOVF9UWVBFUyA9IHtcbiAgICA1MTIwOiBJbnQ4QXJyYXksXG4gICAgNTEyMTogVWludDhBcnJheSxcbiAgICA1MTIyOiBJbnQxNkFycmF5LFxuICAgIDUxMjM6IFVpbnQxNkFycmF5LFxuICAgIDUxMjU6IFVpbnQzMkFycmF5LFxuICAgIDUxMjY6IEZsb2F0MzJBcnJheSxcbiAgfTtcblxuICB2YXIgV0VCR0xfRklMVEVSUyA9IHtcbiAgICA5NzI4OiBOZWFyZXN0RmlsdGVyLFxuICAgIDk3Mjk6IExpbmVhckZpbHRlcixcbiAgICA5OTg0OiBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcixcbiAgICA5OTg1OiBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLFxuICAgIDk5ODY6IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG4gICAgOTk4NzogTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLFxuICB9O1xuXG4gIHZhciBXRUJHTF9XUkFQUElOR1MgPSB7XG4gICAgMzMwNzE6IENsYW1wVG9FZGdlV3JhcHBpbmcsXG4gICAgMzM2NDg6IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsXG4gICAgMTA0OTc6IFJlcGVhdFdyYXBwaW5nLFxuICB9O1xuXG4gIHZhciBXRUJHTF9UWVBFX1NJWkVTID0ge1xuICAgIFNDQUxBUjogMSxcbiAgICBWRUMyOiAyLFxuICAgIFZFQzM6IDMsXG4gICAgVkVDNDogNCxcbiAgICBNQVQyOiA0LFxuICAgIE1BVDM6IDksXG4gICAgTUFUNDogMTYsXG4gIH07XG5cbiAgdmFyIEFUVFJJQlVURVMgPSB7XG4gICAgUE9TSVRJT046ICdwb3NpdGlvbicsXG4gICAgTk9STUFMOiAnbm9ybWFsJyxcbiAgICBUQU5HRU5UOiAndGFuZ2VudCcsXG4gICAgVEVYQ09PUkRfMDogJ3V2JyxcbiAgICBURVhDT09SRF8xOiAndXYyJyxcbiAgICBDT0xPUl8wOiAnY29sb3InLFxuICAgIFdFSUdIVFNfMDogJ3NraW5XZWlnaHQnLFxuICAgIEpPSU5UU18wOiAnc2tpbkluZGV4JyxcbiAgfTtcblxuICB2YXIgUEFUSF9QUk9QRVJUSUVTID0ge1xuICAgIHNjYWxlOiAnc2NhbGUnLFxuICAgIHRyYW5zbGF0aW9uOiAncG9zaXRpb24nLFxuICAgIHJvdGF0aW9uOiAncXVhdGVybmlvbicsXG4gICAgd2VpZ2h0czogJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsXG4gIH07XG5cbiAgdmFyIElOVEVSUE9MQVRJT04gPSB7XG4gICAgQ1VCSUNTUExJTkU6IHVuZGVmaW5lZCwgLy8gV2UgdXNlIGEgY3VzdG9tIGludGVycG9sYW50IChHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGF0aW9uKSBmb3IgQ1VCSUNTUExJTkUgdHJhY2tzLiBFYWNoXG4gICAgLy8ga2V5ZnJhbWUgdHJhY2sgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGEgZGVmYXVsdCBpbnRlcnBvbGF0aW9uIHR5cGUsIHRoZW4gbW9kaWZpZWQuXG4gICAgTElORUFSOiBJbnRlcnBvbGF0ZUxpbmVhcixcbiAgICBTVEVQOiBJbnRlcnBvbGF0ZURpc2NyZXRlLFxuICB9O1xuXG4gIHZhciBBTFBIQV9NT0RFUyA9IHtcbiAgICBPUEFRVUU6ICdPUEFRVUUnLFxuICAgIE1BU0s6ICdNQVNLJyxcbiAgICBCTEVORDogJ0JMRU5EJyxcbiAgfTtcblxuICB2YXIgTUlNRV9UWVBFX0ZPUk1BVFMgPSB7XG4gICAgJ2ltYWdlL3BuZyc6IFJHQkFGb3JtYXQsXG4gICAgJ2ltYWdlL2pwZWcnOiBSR0JGb3JtYXQsXG4gIH07XG5cbiAgLyogVVRJTElUWSBGVU5DVElPTlMgKi9cblxuICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCwgcGF0aCkge1xuICAgIC8vIEludmFsaWQgVVJMXG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHVybCA9PT0gJycpIHJldHVybiAnJztcblxuICAgIC8vIEhvc3QgUmVsYXRpdmUgVVJMXG4gICAgaWYgKC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QocGF0aCkgJiYgL15cXC8vLnRlc3QodXJsKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC8oXmh0dHBzPzpcXC9cXC9bXlxcL10rKS4qL2ksICckMScpO1xuICAgIH1cblxuICAgIC8vIEFic29sdXRlIFVSTCBodHRwOi8vLGh0dHBzOi8vLC8vXG4gICAgaWYgKC9eKGh0dHBzPzopP1xcL1xcLy9pLnRlc3QodXJsKSkgcmV0dXJuIHVybDtcblxuICAgIC8vIERhdGEgVVJJXG4gICAgaWYgKC9eZGF0YTouKiwuKiQvaS50ZXN0KHVybCkpIHJldHVybiB1cmw7XG5cbiAgICAvLyBCbG9iIFVSTFxuICAgIGlmICgvXmJsb2I6LiokL2kudGVzdCh1cmwpKSByZXR1cm4gdXJsO1xuXG4gICAgLy8gUmVsYXRpdmUgVVJMXG4gICAgcmV0dXJuIHBhdGggKyB1cmw7XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNkZWZhdWx0LW1hdGVyaWFsXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0TWF0ZXJpYWwoY2FjaGUpIHtcbiAgICBpZiAoY2FjaGVbJ0RlZmF1bHRNYXRlcmlhbCddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlWydEZWZhdWx0TWF0ZXJpYWwnXSA9IG5ldyBNZXNoU3RhbmRhcmRNYXRlcmlhbCh7XG4gICAgICAgIGNvbG9yOiAweGZmZmZmZixcbiAgICAgICAgZW1pc3NpdmU6IDB4MDAwMDAwLFxuICAgICAgICBtZXRhbG5lc3M6IDEsXG4gICAgICAgIHJvdWdobmVzczogMSxcbiAgICAgICAgdHJhbnNwYXJlbnQ6IGZhbHNlLFxuICAgICAgICBkZXB0aFRlc3Q6IHRydWUsXG4gICAgICAgIHNpZGU6IEZyb250U2lkZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZVsnRGVmYXVsdE1hdGVyaWFsJ107XG4gIH1cblxuICBmdW5jdGlvbiBhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoa25vd25FeHRlbnNpb25zLCBvYmplY3QsIG9iamVjdERlZikge1xuICAgIC8vIEFkZCB1bmtub3duIGdsVEYgZXh0ZW5zaW9ucyB0byBhbiBvYmplY3QncyB1c2VyRGF0YS5cblxuICAgIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0RGVmLmV4dGVuc2lvbnMpIHtcbiAgICAgIGlmIChrbm93bkV4dGVuc2lvbnNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvYmplY3QudXNlckRhdGEuZ2x0ZkV4dGVuc2lvbnMgPSBvYmplY3QudXNlckRhdGEuZ2x0ZkV4dGVuc2lvbnMgfHwge307XG4gICAgICAgIG9iamVjdC51c2VyRGF0YS5nbHRmRXh0ZW5zaW9uc1tuYW1lXSA9IG9iamVjdERlZi5leHRlbnNpb25zW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdDNEfE1hdGVyaWFsfEJ1ZmZlckdlb21ldHJ5fSBvYmplY3RcbiAgICogQHBhcmFtIHtHTFRGLmRlZmluaXRpb259IGdsdGZEZWZcbiAgICovXG4gIGZ1bmN0aW9uIGFzc2lnbkV4dHJhc1RvVXNlckRhdGEob2JqZWN0LCBnbHRmRGVmKSB7XG4gICAgaWYgKGdsdGZEZWYuZXh0cmFzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgZ2x0ZkRlZi5leHRyYXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LnVzZXJEYXRhLCBnbHRmRGVmLmV4dHJhcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IElnbm9yaW5nIHByaW1pdGl2ZSB0eXBlIC5leHRyYXMsICcgKyBnbHRmRGVmLmV4dHJhcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjbW9ycGgtdGFyZ2V0c1xuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeVxuICAgKiBAcGFyYW0ge0FycmF5PEdMVEYuVGFyZ2V0Pn0gdGFyZ2V0c1xuICAgKiBAcGFyYW0ge0dMVEZQYXJzZXJ9IHBhcnNlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJ1ZmZlckdlb21ldHJ5Pn1cbiAgICovXG4gIGZ1bmN0aW9uIGFkZE1vcnBoVGFyZ2V0cyhnZW9tZXRyeSwgdGFyZ2V0cywgcGFyc2VyKSB7XG4gICAgdmFyIGhhc01vcnBoUG9zaXRpb24gPSBmYWxzZTtcbiAgICB2YXIgaGFzTW9ycGhOb3JtYWwgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgdmFyIHRhcmdldCA9IHRhcmdldHNbaV07XG5cbiAgICAgIGlmICh0YXJnZXQuUE9TSVRJT04gIT09IHVuZGVmaW5lZCkgaGFzTW9ycGhQb3NpdGlvbiA9IHRydWU7XG4gICAgICBpZiAodGFyZ2V0Lk5PUk1BTCAhPT0gdW5kZWZpbmVkKSBoYXNNb3JwaE5vcm1hbCA9IHRydWU7XG5cbiAgICAgIGlmIChoYXNNb3JwaFBvc2l0aW9uICYmIGhhc01vcnBoTm9ybWFsKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoIWhhc01vcnBoUG9zaXRpb24gJiYgIWhhc01vcnBoTm9ybWFsKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGdlb21ldHJ5KTtcblxuICAgIHZhciBwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMgPSBbXTtcbiAgICB2YXIgcGVuZGluZ05vcm1hbEFjY2Vzc29ycyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1tpXTtcblxuICAgICAgaWYgKGhhc01vcnBoUG9zaXRpb24pIHtcbiAgICAgICAgdmFyIHBlbmRpbmdBY2Nlc3NvciA9XG4gICAgICAgICAgICAgIHRhcmdldC5QT1NJVElPTiAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBwYXJzZXIuZ2V0RGVwZW5kZW5jeSgnYWNjZXNzb3InLCB0YXJnZXQuUE9TSVRJT04pXG4gICAgICAgICAgICAgICAgOiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG4gICAgICAgIHBlbmRpbmdQb3NpdGlvbkFjY2Vzc29ycy5wdXNoKHBlbmRpbmdBY2Nlc3Nvcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNNb3JwaE5vcm1hbCkge1xuICAgICAgICB2YXIgcGVuZGluZ0FjY2Vzc29yID1cbiAgICAgICAgICAgICAgdGFyZ2V0Lk5PUk1BTCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBwYXJzZXIuZ2V0RGVwZW5kZW5jeSgnYWNjZXNzb3InLCB0YXJnZXQuTk9STUFMKVxuICAgICAgICAgICAgICAgIDogZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7XG5cbiAgICAgICAgcGVuZGluZ05vcm1hbEFjY2Vzc29ycy5wdXNoKHBlbmRpbmdBY2Nlc3Nvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgIFByb21pc2UuYWxsKHBlbmRpbmdQb3NpdGlvbkFjY2Vzc29ycyksXG4gICAgICBQcm9taXNlLmFsbChwZW5kaW5nTm9ybWFsQWNjZXNzb3JzKSxcbiAgICBdKS50aGVuKGZ1bmN0aW9uIChhY2Nlc3NvcnMpIHtcbiAgICAgIHZhciBtb3JwaFBvc2l0aW9ucyA9IGFjY2Vzc29yc1swXTtcbiAgICAgIHZhciBtb3JwaE5vcm1hbHMgPSBhY2Nlc3NvcnNbMV07XG5cbiAgICAgIGlmIChoYXNNb3JwaFBvc2l0aW9uKSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gPSBtb3JwaFBvc2l0aW9ucztcbiAgICAgIGlmIChoYXNNb3JwaE5vcm1hbCkgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCA9IG1vcnBoTm9ybWFscztcbiAgICAgIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdHJ1ZTtcblxuICAgICAgcmV0dXJuIGdlb21ldHJ5O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TWVzaH0gbWVzaFxuICAgKiBAcGFyYW0ge0dMVEYuTWVzaH0gbWVzaERlZlxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlTW9ycGhUYXJnZXRzKG1lc2gsIG1lc2hEZWYpIHtcbiAgICBtZXNoLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG4gICAgaWYgKG1lc2hEZWYud2VpZ2h0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBtZXNoRGVmLndlaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICBtZXNoLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1tpXSA9IG1lc2hEZWYud2VpZ2h0c1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAuZXh0cmFzIGhhcyB1c2VyLWRlZmluZWQgZGF0YSwgc28gY2hlY2sgdGhhdCAuZXh0cmFzLnRhcmdldE5hbWVzIGlzIGFuIGFycmF5LlxuICAgIGlmIChtZXNoRGVmLmV4dHJhcyAmJiBBcnJheS5pc0FycmF5KG1lc2hEZWYuZXh0cmFzLnRhcmdldE5hbWVzKSkge1xuICAgICAgdmFyIHRhcmdldE5hbWVzID0gbWVzaERlZi5leHRyYXMudGFyZ2V0TmFtZXM7XG5cbiAgICAgIGlmIChtZXNoLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5sZW5ndGggPT09IHRhcmdldE5hbWVzLmxlbmd0aCkge1xuICAgICAgICBtZXNoLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHRhcmdldE5hbWVzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICBtZXNoLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVt0YXJnZXROYW1lc1tpXV0gPSBpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IEludmFsaWQgZXh0cmFzLnRhcmdldE5hbWVzIGxlbmd0aC4gSWdub3JpbmcgbmFtZXMuJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlS2V5KHByaW1pdGl2ZURlZikge1xuICAgIHZhciBkcmFjb0V4dGVuc2lvbiA9XG4gICAgICAgICAgcHJpbWl0aXZlRGVmLmV4dGVuc2lvbnMgJiYgcHJpbWl0aXZlRGVmLmV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTl07XG4gICAgdmFyIGdlb21ldHJ5S2V5O1xuXG4gICAgaWYgKGRyYWNvRXh0ZW5zaW9uKSB7XG4gICAgICBnZW9tZXRyeUtleSA9XG4gICAgICAgICdkcmFjbzonICtcbiAgICAgICAgZHJhY29FeHRlbnNpb24uYnVmZmVyVmlldyArXG4gICAgICAgICc6JyArXG4gICAgICAgIGRyYWNvRXh0ZW5zaW9uLmluZGljZXMgK1xuICAgICAgICAnOicgK1xuICAgICAgICBjcmVhdGVBdHRyaWJ1dGVzS2V5KGRyYWNvRXh0ZW5zaW9uLmF0dHJpYnV0ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW9tZXRyeUtleSA9XG4gICAgICAgIHByaW1pdGl2ZURlZi5pbmRpY2VzICtcbiAgICAgICAgJzonICtcbiAgICAgICAgY3JlYXRlQXR0cmlidXRlc0tleShwcmltaXRpdmVEZWYuYXR0cmlidXRlcykgK1xuICAgICAgICAnOicgK1xuICAgICAgICBwcmltaXRpdmVEZWYubW9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2VvbWV0cnlLZXk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVBdHRyaWJ1dGVzS2V5KGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgYXR0cmlidXRlc0tleSA9ICcnO1xuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5zb3J0KCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGF0dHJpYnV0ZXNLZXkgKz0ga2V5c1tpXSArICc6JyArIGF0dHJpYnV0ZXNba2V5c1tpXV0gKyAnOyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXNLZXk7XG4gIH1cblxuICAvKiBHTFRGIFBBUlNFUiAqL1xuXG4gIGZ1bmN0aW9uIEdMVEZQYXJzZXIoanNvbiwgZXh0ZW5zaW9ucywgb3B0aW9ucykge1xuICAgIHRoaXMuanNvbiA9IGpzb24gfHwge307XG4gICAgdGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucyB8fCB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gbG9hZGVyIG9iamVjdCBjYWNoZVxuICAgIHRoaXMuY2FjaGUgPSBuZXcgR0xURlJlZ2lzdHJ5KCk7XG5cbiAgICAvLyBCdWZmZXJHZW9tZXRyeSBjYWNoaW5nXG4gICAgdGhpcy5wcmltaXRpdmVDYWNoZSA9IHt9O1xuXG4gICAgdGhpcy50ZXh0dXJlTG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIodGhpcy5vcHRpb25zLm1hbmFnZXIpO1xuICAgIHRoaXMudGV4dHVyZUxvYWRlci5zZXRDcm9zc09yaWdpbih0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW4pO1xuXG4gICAgdGhpcy5maWxlTG9hZGVyID0gbmV3IEZpbGVMb2FkZXIodGhpcy5vcHRpb25zLm1hbmFnZXIpO1xuICAgIHRoaXMuZmlsZUxvYWRlci5zZXRSZXNwb25zZVR5cGUoJ2FycmF5YnVmZmVyJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNyb3NzT3JpZ2luID09PSAndXNlLWNyZWRlbnRpYWxzJykge1xuICAgICAgdGhpcy5maWxlTG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBHTFRGUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChvbkxvYWQsIG9uRXJyb3IpIHtcbiAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcbiAgICB2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcblxuICAgIC8vIENsZWFyIHRoZSBsb2FkZXIgY2FjaGVcbiAgICB0aGlzLmNhY2hlLnJlbW92ZUFsbCgpO1xuXG4gICAgLy8gTWFyayB0aGUgc3BlY2lhbCBub2Rlcy9tZXNoZXMgaW4ganNvbiBmb3IgZWZmaWNpZW50IHBhcnNlXG4gICAgdGhpcy5tYXJrRGVmcygpO1xuXG4gICAgUHJvbWlzZS5hbGwoW1xuICAgICAgdGhpcy5nZXREZXBlbmRlbmNpZXMoJ3NjZW5lJyksXG4gICAgICB0aGlzLmdldERlcGVuZGVuY2llcygnYW5pbWF0aW9uJyksXG4gICAgICB0aGlzLmdldERlcGVuZGVuY2llcygnY2FtZXJhJyksXG4gICAgXSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICBzY2VuZTogZGVwZW5kZW5jaWVzWzBdW2pzb24uc2NlbmUgfHwgMF0sXG4gICAgICAgICAgc2NlbmVzOiBkZXBlbmRlbmNpZXNbMF0sXG4gICAgICAgICAgYW5pbWF0aW9uczogZGVwZW5kZW5jaWVzWzFdLFxuICAgICAgICAgIGNhbWVyYXM6IGRlcGVuZGVuY2llc1syXSxcbiAgICAgICAgICBhc3NldDoganNvbi5hc3NldCxcbiAgICAgICAgICBwYXJzZXI6IHBhcnNlcixcbiAgICAgICAgICB1c2VyRGF0YToge30sXG4gICAgICAgIH07XG5cbiAgICAgICAgYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKGV4dGVuc2lvbnMsIHJlc3VsdCwganNvbik7XG5cbiAgICAgICAgYXNzaWduRXh0cmFzVG9Vc2VyRGF0YShyZXN1bHQsIGpzb24pO1xuXG4gICAgICAgIG9uTG9hZChyZXN1bHQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChvbkVycm9yKTtcbiAgfTtcblxuICAvKipcbiAgICogTWFya3MgdGhlIHNwZWNpYWwgbm9kZXMvbWVzaGVzIGluIGpzb24gZm9yIGVmZmljaWVudCBwYXJzZS5cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLm1hcmtEZWZzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBub2RlRGVmcyA9IHRoaXMuanNvbi5ub2RlcyB8fCBbXTtcbiAgICB2YXIgc2tpbkRlZnMgPSB0aGlzLmpzb24uc2tpbnMgfHwgW107XG4gICAgdmFyIG1lc2hEZWZzID0gdGhpcy5qc29uLm1lc2hlcyB8fCBbXTtcblxuICAgIHZhciBtZXNoUmVmZXJlbmNlcyA9IHt9O1xuICAgIHZhciBtZXNoVXNlcyA9IHt9O1xuXG4gICAgLy8gTm90aGluZyBpbiB0aGUgbm9kZSBkZWZpbml0aW9uIGluZGljYXRlcyB3aGV0aGVyIGl0IGlzIGEgQm9uZSBvciBhblxuICAgIC8vIE9iamVjdDNELiBVc2UgdGhlIHNraW5zJyBqb2ludCByZWZlcmVuY2VzIHRvIG1hcmsgYm9uZXMuXG4gICAgZm9yICh2YXIgc2tpbkluZGV4ID0gMCwgc2tpbkxlbmd0aCA9IHNraW5EZWZzLmxlbmd0aDsgc2tpbkluZGV4IDwgc2tpbkxlbmd0aDsgc2tpbkluZGV4KyspIHtcbiAgICAgIHZhciBqb2ludHMgPSBza2luRGVmc1tza2luSW5kZXhdLmpvaW50cztcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gam9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgbm9kZURlZnNbam9pbnRzW2ldXS5pc0JvbmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1lc2hlcyBjYW4gKGFuZCBzaG91bGQpIGJlIHJldXNlZCBieSBtdWx0aXBsZSBub2RlcyBpbiBhIGdsVEYgYXNzZXQuIFRvXG4gICAgLy8gYXZvaWQgaGF2aW5nIG1vcmUgdGhhbiBvbmUgTWVzaCB3aXRoIHRoZSBzYW1lIG5hbWUsIGNvdW50XG4gICAgLy8gcmVmZXJlbmNlcyBhbmQgcmVuYW1lIGluc3RhbmNlcyBiZWxvdy5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6IENlc2l1bU1pbGtUcnVjayBzYW1wbGUgbW9kZWwgcmV1c2VzIFwiV2hlZWxcIiBtZXNoZXMuXG4gICAgZm9yICh2YXIgbm9kZUluZGV4ID0gMCwgbm9kZUxlbmd0aCA9IG5vZGVEZWZzLmxlbmd0aDsgbm9kZUluZGV4IDwgbm9kZUxlbmd0aDsgbm9kZUluZGV4KyspIHtcbiAgICAgIHZhciBub2RlRGVmID0gbm9kZURlZnNbbm9kZUluZGV4XTtcblxuICAgICAgaWYgKG5vZGVEZWYubWVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChtZXNoUmVmZXJlbmNlc1tub2RlRGVmLm1lc2hdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBtZXNoUmVmZXJlbmNlc1tub2RlRGVmLm1lc2hdID0gbWVzaFVzZXNbbm9kZURlZi5tZXNoXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBtZXNoUmVmZXJlbmNlc1tub2RlRGVmLm1lc2hdKys7XG5cbiAgICAgICAgLy8gTm90aGluZyBpbiB0aGUgbWVzaCBkZWZpbml0aW9uIGluZGljYXRlcyB3aGV0aGVyIGl0IGlzXG4gICAgICAgIC8vIGEgU2tpbm5lZE1lc2ggb3IgTWVzaC4gVXNlIHRoZSBub2RlJ3MgbWVzaCByZWZlcmVuY2VcbiAgICAgICAgLy8gdG8gbWFyayBTa2lubmVkTWVzaCBpZiBub2RlIGhhcyBza2luLlxuICAgICAgICBpZiAobm9kZURlZi5za2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBtZXNoRGVmc1tub2RlRGVmLm1lc2hdLmlzU2tpbm5lZE1lc2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uLm1lc2hSZWZlcmVuY2VzID0gbWVzaFJlZmVyZW5jZXM7XG4gICAgdGhpcy5qc29uLm1lc2hVc2VzID0gbWVzaFVzZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIHRoZSBzcGVjaWZpZWQgZGVwZW5kZW5jeSBhc3luY2hyb25vdXNseSwgd2l0aCBjYWNoaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3QzRHxNYXRlcmlhbHxUSFJFRS5UZXh0dXJlfEFuaW1hdGlvbkNsaXB8QXJyYXlCdWZmZXJ8T2JqZWN0Pn1cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLmdldERlcGVuZGVuY3kgPSBmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcbiAgICB2YXIgY2FjaGVLZXkgPSB0eXBlICsgJzonICsgaW5kZXg7XG4gICAgdmFyIGRlcGVuZGVuY3kgPSB0aGlzLmNhY2hlLmdldChjYWNoZUtleSk7XG5cbiAgICBpZiAoIWRlcGVuZGVuY3kpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdzY2VuZSc6XG4gICAgICAgICAgZGVwZW5kZW5jeSA9IHRoaXMubG9hZFNjZW5lKGluZGV4KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdub2RlJzpcbiAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTm9kZShpbmRleCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbWVzaCc6XG4gICAgICAgICAgZGVwZW5kZW5jeSA9IHRoaXMubG9hZE1lc2goaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2FjY2Vzc29yJzpcbiAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQWNjZXNzb3IoaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2J1ZmZlclZpZXcnOlxuICAgICAgICAgIGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRCdWZmZXJWaWV3KGluZGV4KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdidWZmZXInOlxuICAgICAgICAgIGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRCdWZmZXIoaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ21hdGVyaWFsJzpcbiAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTWF0ZXJpYWwoaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgICAgIGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRUZXh0dXJlKGluZGV4KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdza2luJzpcbiAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkU2tpbihpbmRleCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQW5pbWF0aW9uKGluZGV4KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjYW1lcmEnOlxuICAgICAgICAgIGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRDYW1lcmEoaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTF0ubG9hZExpZ2h0KGluZGV4KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlOiAnICsgdHlwZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FjaGUuYWRkKGNhY2hlS2V5LCBkZXBlbmRlbmN5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVwZW5kZW5jeTtcbiAgfTtcblxuICAvKipcbiAgICogUmVxdWVzdHMgYWxsIGRlcGVuZGVuY2llcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgYXN5bmNocm9ub3VzbHksIHdpdGggY2FjaGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheTxPYmplY3Q+Pn1cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLmdldERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IHRoaXMuY2FjaGUuZ2V0KHR5cGUpO1xuXG4gICAgaWYgKCFkZXBlbmRlbmNpZXMpIHtcbiAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgICAgdmFyIGRlZnMgPSB0aGlzLmpzb25bdHlwZSArICh0eXBlID09PSAnbWVzaCcgPyAnZXMnIDogJ3MnKV0gfHwgW107XG5cbiAgICAgIGRlcGVuZGVuY2llcyA9IFByb21pc2UuYWxsKFxuICAgICAgICBkZWZzLm1hcChmdW5jdGlvbiAoZGVmLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSh0eXBlLCBpbmRleCk7XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICB0aGlzLmNhY2hlLmFkZCh0eXBlLCBkZXBlbmRlbmNpZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBkZXBlbmRlbmNpZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYnVmZmVycy1hbmQtYnVmZmVyLXZpZXdzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJJbmRleFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRCdWZmZXIgPSBmdW5jdGlvbiAoYnVmZmVySW5kZXgpIHtcbiAgICB2YXIgYnVmZmVyRGVmID0gdGhpcy5qc29uLmJ1ZmZlcnNbYnVmZmVySW5kZXhdO1xuICAgIHZhciBsb2FkZXIgPSB0aGlzLmZpbGVMb2FkZXI7XG5cbiAgICBpZiAoYnVmZmVyRGVmLnR5cGUgJiYgYnVmZmVyRGVmLnR5cGUgIT09ICdhcnJheWJ1ZmZlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogJyArIGJ1ZmZlckRlZi50eXBlICsgJyBidWZmZXIgdHlwZSBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgIH1cblxuICAgIC8vIElmIHByZXNlbnQsIEdMQiBjb250YWluZXIgaXMgcmVxdWlyZWQgdG8gYmUgdGhlIGZpcnN0IGJ1ZmZlci5cbiAgICBpZiAoYnVmZmVyRGVmLnVyaSA9PT0gdW5kZWZpbmVkICYmIGJ1ZmZlckluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9CSU5BUllfR0xURl0uYm9keSk7XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbG9hZGVyLmxvYWQocmVzb2x2ZVVSTChidWZmZXJEZWYudXJpLCBvcHRpb25zLnBhdGgpLCByZXNvbHZlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogRmFpbGVkIHRvIGxvYWQgYnVmZmVyIFwiJyArIGJ1ZmZlckRlZi51cmkgKyAnXCIuJykpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYnVmZmVycy1hbmQtYnVmZmVyLXZpZXdzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJWaWV3SW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59XG4gICAqL1xuICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQnVmZmVyVmlldyA9IGZ1bmN0aW9uIChidWZmZXJWaWV3SW5kZXgpIHtcbiAgICB2YXIgYnVmZmVyVmlld0RlZiA9IHRoaXMuanNvbi5idWZmZXJWaWV3c1tidWZmZXJWaWV3SW5kZXhdO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGVwZW5kZW5jeSgnYnVmZmVyJywgYnVmZmVyVmlld0RlZi5idWZmZXIpLnRoZW4oZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgdmFyIGJ5dGVMZW5ndGggPSBidWZmZXJWaWV3RGVmLmJ5dGVMZW5ndGggfHwgMDtcbiAgICAgIHZhciBieXRlT2Zmc2V0ID0gYnVmZmVyVmlld0RlZi5ieXRlT2Zmc2V0IHx8IDA7XG4gICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKGJ5dGVPZmZzZXQsIGJ5dGVPZmZzZXQgKyBieXRlTGVuZ3RoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNhY2Nlc3NvcnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFjY2Vzc29ySW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU+fVxuICAgKi9cbiAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZEFjY2Vzc29yID0gZnVuY3Rpb24gKGFjY2Vzc29ySW5kZXgpIHtcbiAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcblxuICAgIHZhciBhY2Nlc3NvckRlZiA9IHRoaXMuanNvbi5hY2Nlc3NvcnNbYWNjZXNzb3JJbmRleF07XG5cbiAgICBpZiAoYWNjZXNzb3JEZWYuYnVmZmVyVmlldyA9PT0gdW5kZWZpbmVkICYmIGFjY2Vzc29yRGVmLnNwYXJzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZ25vcmUgZW1wdHkgYWNjZXNzb3JzLCB3aGljaCBtYXkgYmUgdXNlZCB0byBkZWNsYXJlIHJ1bnRpbWVcbiAgICAgIC8vIGluZm9ybWF0aW9uIGFib3V0IGF0dHJpYnV0ZXMgY29taW5nIGZyb20gYW5vdGhlciBzb3VyY2UgKGUuZy4gRHJhY29cbiAgICAgIC8vIGNvbXByZXNzaW9uIGV4dGVuc2lvbikuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cblxuICAgIHZhciBwZW5kaW5nQnVmZmVyVmlld3MgPSBbXTtcblxuICAgIGlmIChhY2Nlc3NvckRlZi5idWZmZXJWaWV3ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKHRoaXMuZ2V0RGVwZW5kZW5jeSgnYnVmZmVyVmlldycsIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0J1ZmZlclZpZXdzLnB1c2gobnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKGFjY2Vzc29yRGVmLnNwYXJzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwZW5kaW5nQnVmZmVyVmlld3MucHVzaChcbiAgICAgICAgdGhpcy5nZXREZXBlbmRlbmN5KCdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuc3BhcnNlLmluZGljZXMuYnVmZmVyVmlldylcbiAgICAgICk7XG4gICAgICBwZW5kaW5nQnVmZmVyVmlld3MucHVzaChcbiAgICAgICAgdGhpcy5nZXREZXBlbmRlbmN5KCdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuc3BhcnNlLnZhbHVlcy5idWZmZXJWaWV3KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZ0J1ZmZlclZpZXdzKS50aGVuKGZ1bmN0aW9uIChidWZmZXJWaWV3cykge1xuICAgICAgdmFyIGJ1ZmZlclZpZXcgPSBidWZmZXJWaWV3c1swXTtcblxuICAgICAgdmFyIGl0ZW1TaXplID0gV0VCR0xfVFlQRV9TSVpFU1thY2Nlc3NvckRlZi50eXBlXTtcbiAgICAgIHZhciBUeXBlZEFycmF5ID0gV0VCR0xfQ09NUE9ORU5UX1RZUEVTW2FjY2Vzc29yRGVmLmNvbXBvbmVudFR5cGVdO1xuXG4gICAgICAvLyBGb3IgVkVDMzogaXRlbVNpemUgaXMgMywgZWxlbWVudEJ5dGVzIGlzIDQsIGl0ZW1CeXRlcyBpcyAxMi5cbiAgICAgIHZhciBlbGVtZW50Qnl0ZXMgPSBUeXBlZEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgdmFyIGl0ZW1CeXRlcyA9IGVsZW1lbnRCeXRlcyAqIGl0ZW1TaXplO1xuICAgICAgdmFyIGJ5dGVPZmZzZXQgPSBhY2Nlc3NvckRlZi5ieXRlT2Zmc2V0IHx8IDA7XG4gICAgICB2YXIgYnl0ZVN0cmlkZSA9XG4gICAgICAgICAgICBhY2Nlc3NvckRlZi5idWZmZXJWaWV3ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBqc29uLmJ1ZmZlclZpZXdzW2FjY2Vzc29yRGVmLmJ1ZmZlclZpZXddLmJ5dGVTdHJpZGVcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgbm9ybWFsaXplZCA9IGFjY2Vzc29yRGVmLm5vcm1hbGl6ZWQgPT09IHRydWU7XG4gICAgICB2YXIgYXJyYXksIGJ1ZmZlckF0dHJpYnV0ZTtcblxuICAgICAgLy8gVGhlIGJ1ZmZlciBpcyBub3QgaW50ZXJsZWF2ZWQgaWYgdGhlIHN0cmlkZSBpcyB0aGUgaXRlbSBzaXplIGluIGJ5dGVzLlxuICAgICAgaWYgKGJ5dGVTdHJpZGUgJiYgYnl0ZVN0cmlkZSAhPT0gaXRlbUJ5dGVzKSB7XG4gICAgICAgIC8vIEVhY2ggXCJzbGljZVwiIG9mIHRoZSBidWZmZXIsIGFzIGRlZmluZWQgYnkgJ2NvdW50JyBlbGVtZW50cyBvZiAnYnl0ZVN0cmlkZScgYnl0ZXMsIGdldHMgaXRzIG93biBJbnRlcmxlYXZlZEJ1ZmZlclxuICAgICAgICAvLyBUaGlzIG1ha2VzIHN1cmUgdGhhdCBJQkEuY291bnQgcmVmbGVjdHMgYWNjZXNzb3IuY291bnQgcHJvcGVybHlcbiAgICAgICAgdmFyIGliU2xpY2UgPSBNYXRoLmZsb29yKGJ5dGVPZmZzZXQgLyBieXRlU3RyaWRlKTtcbiAgICAgICAgdmFyIGliQ2FjaGVLZXkgPVxuICAgICAgICAgICAgICAnSW50ZXJsZWF2ZWRCdWZmZXI6JyArXG4gICAgICAgICAgICAgIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgK1xuICAgICAgICAgICAgICAnOicgK1xuICAgICAgICAgICAgICBhY2Nlc3NvckRlZi5jb21wb25lbnRUeXBlICtcbiAgICAgICAgICAgICAgJzonICtcbiAgICAgICAgICAgICAgaWJTbGljZSArXG4gICAgICAgICAgICAgICc6JyArXG4gICAgICAgICAgICAgIGFjY2Vzc29yRGVmLmNvdW50O1xuICAgICAgICB2YXIgaWIgPSBwYXJzZXIuY2FjaGUuZ2V0KGliQ2FjaGVLZXkpO1xuXG4gICAgICAgIGlmICghaWIpIHtcbiAgICAgICAgICBhcnJheSA9IG5ldyBUeXBlZEFycmF5KFxuICAgICAgICAgICAgYnVmZmVyVmlldyxcbiAgICAgICAgICAgIGliU2xpY2UgKiBieXRlU3RyaWRlLFxuICAgICAgICAgICAgKGFjY2Vzc29yRGVmLmNvdW50ICogYnl0ZVN0cmlkZSkgLyBlbGVtZW50Qnl0ZXNcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gSW50ZWdlciBwYXJhbWV0ZXJzIHRvIElCL0lCQSBhcmUgaW4gYXJyYXkgZWxlbWVudHMsIG5vdCBieXRlcy5cbiAgICAgICAgICBpYiA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlcihhcnJheSwgYnl0ZVN0cmlkZSAvIGVsZW1lbnRCeXRlcyk7XG5cbiAgICAgICAgICBwYXJzZXIuY2FjaGUuYWRkKGliQ2FjaGVLZXksIGliKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShcbiAgICAgICAgICBpYixcbiAgICAgICAgICBpdGVtU2l6ZSxcbiAgICAgICAgICAoYnl0ZU9mZnNldCAlIGJ5dGVTdHJpZGUpIC8gZWxlbWVudEJ5dGVzLFxuICAgICAgICAgIG5vcm1hbGl6ZWRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChidWZmZXJWaWV3ID09PSBudWxsKSB7XG4gICAgICAgICAgYXJyYXkgPSBuZXcgVHlwZWRBcnJheShhY2Nlc3NvckRlZi5jb3VudCAqIGl0ZW1TaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcnJheSA9IG5ldyBUeXBlZEFycmF5KGJ1ZmZlclZpZXcsIGJ5dGVPZmZzZXQsIGFjY2Vzc29yRGVmLmNvdW50ICogaXRlbVNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpO1xuICAgICAgfVxuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI3NwYXJzZS1hY2Nlc3NvcnNcbiAgICAgIGlmIChhY2Nlc3NvckRlZi5zcGFyc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgaXRlbVNpemVJbmRpY2VzID0gV0VCR0xfVFlQRV9TSVpFUy5TQ0FMQVI7XG4gICAgICAgIHZhciBUeXBlZEFycmF5SW5kaWNlcyA9IFdFQkdMX0NPTVBPTkVOVF9UWVBFU1thY2Nlc3NvckRlZi5zcGFyc2UuaW5kaWNlcy5jb21wb25lbnRUeXBlXTtcblxuICAgICAgICB2YXIgYnl0ZU9mZnNldEluZGljZXMgPSBhY2Nlc3NvckRlZi5zcGFyc2UuaW5kaWNlcy5ieXRlT2Zmc2V0IHx8IDA7XG4gICAgICAgIHZhciBieXRlT2Zmc2V0VmFsdWVzID0gYWNjZXNzb3JEZWYuc3BhcnNlLnZhbHVlcy5ieXRlT2Zmc2V0IHx8IDA7XG5cbiAgICAgICAgdmFyIHNwYXJzZUluZGljZXMgPSBuZXcgVHlwZWRBcnJheUluZGljZXMoXG4gICAgICAgICAgYnVmZmVyVmlld3NbMV0sXG4gICAgICAgICAgYnl0ZU9mZnNldEluZGljZXMsXG4gICAgICAgICAgYWNjZXNzb3JEZWYuc3BhcnNlLmNvdW50ICogaXRlbVNpemVJbmRpY2VzXG4gICAgICAgICk7XG4gICAgICAgIHZhciBzcGFyc2VWYWx1ZXMgPSBuZXcgVHlwZWRBcnJheShcbiAgICAgICAgICBidWZmZXJWaWV3c1syXSxcbiAgICAgICAgICBieXRlT2Zmc2V0VmFsdWVzLFxuICAgICAgICAgIGFjY2Vzc29yRGVmLnNwYXJzZS5jb3VudCAqIGl0ZW1TaXplXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGJ1ZmZlclZpZXcgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBBdm9pZCBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsIEFycmF5QnVmZmVyLCBpZiB0aGUgYnVmZmVyVmlldyB3YXNuJ3QgaW5pdGlhbGl6ZWQgd2l0aCB6ZXJvZXMuXG4gICAgICAgICAgYnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZShcbiAgICAgICAgICAgIGJ1ZmZlckF0dHJpYnV0ZS5hcnJheS5zbGljZSgpLFxuICAgICAgICAgICAgYnVmZmVyQXR0cmlidXRlLml0ZW1TaXplLFxuICAgICAgICAgICAgYnVmZmVyQXR0cmlidXRlLm5vcm1hbGl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gc3BhcnNlSW5kaWNlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gc3BhcnNlSW5kaWNlc1tpXTtcblxuICAgICAgICAgIGJ1ZmZlckF0dHJpYnV0ZS5zZXRYKGluZGV4LCBzcGFyc2VWYWx1ZXNbaSAqIGl0ZW1TaXplXSk7XG4gICAgICAgICAgaWYgKGl0ZW1TaXplID49IDIpIGJ1ZmZlckF0dHJpYnV0ZS5zZXRZKGluZGV4LCBzcGFyc2VWYWx1ZXNbaSAqIGl0ZW1TaXplICsgMV0pO1xuICAgICAgICAgIGlmIChpdGVtU2l6ZSA+PSAzKSBidWZmZXJBdHRyaWJ1dGUuc2V0WihpbmRleCwgc3BhcnNlVmFsdWVzW2kgKiBpdGVtU2l6ZSArIDJdKTtcbiAgICAgICAgICBpZiAoaXRlbVNpemUgPj0gNCkgYnVmZmVyQXR0cmlidXRlLnNldFcoaW5kZXgsIHNwYXJzZVZhbHVlc1tpICogaXRlbVNpemUgKyAzXSk7XG4gICAgICAgICAgaWYgKGl0ZW1TaXplID49IDUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RIUkVFLkdMVEZMb2FkZXI6IFVuc3VwcG9ydGVkIGl0ZW1TaXplIGluIHNwYXJzZSBCdWZmZXJBdHRyaWJ1dGUuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZmZlckF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI3RleHR1cmVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0dXJlSW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5UZXh0dXJlPn1cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKHRleHR1cmVJbmRleCkge1xuICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIHZhciB0ZXh0dXJlTG9hZGVyID0gdGhpcy50ZXh0dXJlTG9hZGVyO1xuXG4gICAgdmFyIFVSTCA9IHNlbGYuVVJMIHx8IHNlbGYud2Via2l0VVJMO1xuXG4gICAgdmFyIHRleHR1cmVEZWYgPSBqc29uLnRleHR1cmVzW3RleHR1cmVJbmRleF07XG5cbiAgICB2YXIgdGV4dHVyZUV4dGVuc2lvbnMgPSB0ZXh0dXJlRGVmLmV4dGVuc2lvbnMgfHwge307XG5cbiAgICB2YXIgc291cmNlO1xuXG4gICAgaWYgKHRleHR1cmVFeHRlbnNpb25zW0VYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REU10pIHtcbiAgICAgIHNvdXJjZSA9IGpzb24uaW1hZ2VzW3RleHR1cmVFeHRlbnNpb25zW0VYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REU10uc291cmNlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlID0ganNvbi5pbWFnZXNbdGV4dHVyZURlZi5zb3VyY2VdO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VVUkkgPSBzb3VyY2UudXJpO1xuICAgIHZhciBpc09iamVjdFVSTCA9IGZhbHNlO1xuXG4gICAgaWYgKHNvdXJjZS5idWZmZXJWaWV3ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIExvYWQgYmluYXJ5IGltYWdlIGRhdGEgZnJvbSBidWZmZXJWaWV3LCBpZiBwcm92aWRlZC5cblxuICAgICAgc291cmNlVVJJID0gcGFyc2VyLmdldERlcGVuZGVuY3koJ2J1ZmZlclZpZXcnLCBzb3VyY2UuYnVmZmVyVmlldykudGhlbihmdW5jdGlvbiAoYnVmZmVyVmlldykge1xuICAgICAgICBpc09iamVjdFVSTCA9IHRydWU7XG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2J1ZmZlclZpZXddLCB7IHR5cGU6IHNvdXJjZS5taW1lVHlwZSB9KTtcbiAgICAgICAgc291cmNlVVJJID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVVSSTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc291cmNlVVJJKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHNvdXJjZVVSSSkge1xuICAgICAgICAvLyBMb2FkIFRleHR1cmUgcmVzb3VyY2UuXG5cbiAgICAgICAgdmFyIGxvYWRlciA9IG9wdGlvbnMubWFuYWdlci5nZXRIYW5kbGVyKHNvdXJjZVVSSSk7XG5cbiAgICAgICAgaWYgKCFsb2FkZXIpIHtcbiAgICAgICAgICBsb2FkZXIgPSB0ZXh0dXJlRXh0ZW5zaW9uc1tFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFNdXG4gICAgICAgICAgICA/IHBhcnNlci5leHRlbnNpb25zW0VYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REU10uZGRzTG9hZGVyXG4gICAgICAgICAgICA6IHRleHR1cmVMb2FkZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGxvYWRlci5sb2FkKHJlc29sdmVVUkwoc291cmNlVVJJLCBvcHRpb25zLnBhdGgpLCByZXNvbHZlLCB1bmRlZmluZWQsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZXh0dXJlKSB7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlc291cmNlcyBhbmQgY29uZmlndXJlIFRleHR1cmUuXG5cbiAgICAgICAgaWYgKGlzT2JqZWN0VVJMID09PSB0cnVlKSB7XG4gICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChzb3VyY2VVUkkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGV4dHVyZS5mbGlwWSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0ZXh0dXJlRGVmLm5hbWUpIHRleHR1cmUubmFtZSA9IHRleHR1cmVEZWYubmFtZTtcblxuICAgICAgICAvLyBJZ25vcmUgdW5rbm93biBtaW1lIHR5cGVzLCBsaWtlIEREUyBmaWxlcy5cbiAgICAgICAgaWYgKHNvdXJjZS5taW1lVHlwZSBpbiBNSU1FX1RZUEVfRk9STUFUUykge1xuICAgICAgICAgIHRleHR1cmUuZm9ybWF0ID0gTUlNRV9UWVBFX0ZPUk1BVFNbc291cmNlLm1pbWVUeXBlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzYW1wbGVycyA9IGpzb24uc2FtcGxlcnMgfHwge307XG4gICAgICAgIHZhciBzYW1wbGVyID0gc2FtcGxlcnNbdGV4dHVyZURlZi5zYW1wbGVyXSB8fCB7fTtcblxuICAgICAgICB0ZXh0dXJlLm1hZ0ZpbHRlciA9IFdFQkdMX0ZJTFRFUlNbc2FtcGxlci5tYWdGaWx0ZXJdIHx8IExpbmVhckZpbHRlcjtcbiAgICAgICAgdGV4dHVyZS5taW5GaWx0ZXIgPSBXRUJHTF9GSUxURVJTW3NhbXBsZXIubWluRmlsdGVyXSB8fCBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI7XG4gICAgICAgIHRleHR1cmUud3JhcFMgPSBXRUJHTF9XUkFQUElOR1Nbc2FtcGxlci53cmFwU10gfHwgUmVwZWF0V3JhcHBpbmc7XG4gICAgICAgIHRleHR1cmUud3JhcFQgPSBXRUJHTF9XUkFQUElOR1Nbc2FtcGxlci53cmFwVF0gfHwgUmVwZWF0V3JhcHBpbmc7XG5cbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQXN5bmNocm9ub3VzbHkgYXNzaWducyBhIHRleHR1cmUgdG8gdGhlIGdpdmVuIG1hdGVyaWFsIHBhcmFtZXRlcnMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXRlcmlhbFBhcmFtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFwTmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwRGVmXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBHTFRGUGFyc2VyLnByb3RvdHlwZS5hc3NpZ25UZXh0dXJlID0gZnVuY3Rpb24gKG1hdGVyaWFsUGFyYW1zLCBtYXBOYW1lLCBtYXBEZWYpIHtcbiAgICB2YXIgcGFyc2VyID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koJ3RleHR1cmUnLCBtYXBEZWYuaW5kZXgpLnRoZW4oZnVuY3Rpb24gKHRleHR1cmUpIHtcbiAgICAgIGlmICghdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlKSB7XG4gICAgICAgIHN3aXRjaCAobWFwTmFtZSkge1xuICAgICAgICAgIGNhc2UgJ2FvTWFwJzpcbiAgICAgICAgICBjYXNlICdlbWlzc2l2ZU1hcCc6XG4gICAgICAgICAgY2FzZSAnbWV0YWxuZXNzTWFwJzpcbiAgICAgICAgICBjYXNlICdub3JtYWxNYXAnOlxuICAgICAgICAgIGNhc2UgJ3JvdWdobmVzc01hcCc6XG4gICAgICAgICAgICB0ZXh0dXJlLmZvcm1hdCA9IFJHQkZvcm1hdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE1hdGVyaWFscyBzYW1wbGUgYW9NYXAgZnJvbSBVViBzZXQgMSBhbmQgb3RoZXIgbWFwcyBmcm9tIFVWIHNldCAwIC0gdGhpcyBjYW4ndCBiZSBjb25maWd1cmVkXG4gICAgICAvLyBIb3dldmVyLCB3ZSB3aWxsIGNvcHkgVVYgc2V0IDAgdG8gVVYgc2V0IDEgb24gZGVtYW5kIGZvciBhb01hcFxuICAgICAgaWYgKFxuICAgICAgICBtYXBEZWYudGV4Q29vcmQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBtYXBEZWYudGV4Q29vcmQgIT0gMCAmJlxuICAgICAgICAhKG1hcE5hbWUgPT09ICdhb01hcCcgJiYgbWFwRGVmLnRleENvb3JkID09IDEpXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdUSFJFRS5HTFRGTG9hZGVyOiBDdXN0b20gVVYgc2V0ICcgK1xuICAgICAgICAgIG1hcERlZi50ZXhDb29yZCArXG4gICAgICAgICAgJyBmb3IgdGV4dHVyZSAnICtcbiAgICAgICAgICBtYXBOYW1lICtcbiAgICAgICAgICAnIG5vdCB5ZXQgc3VwcG9ydGVkLidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcnNlci5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX1RFWFRVUkVfVFJBTlNGT1JNXSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtID1cbiAgICAgICAgICAgICAgbWFwRGVmLmV4dGVuc2lvbnMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gbWFwRGVmLmV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfVEVYVFVSRV9UUkFOU0ZPUk1dXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgIHRleHR1cmUgPSBwYXJzZXIuZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STV0uZXh0ZW5kVGV4dHVyZShcbiAgICAgICAgICAgIHRleHR1cmUsXG4gICAgICAgICAgICB0cmFuc2Zvcm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1hdGVyaWFsUGFyYW1zW21hcE5hbWVdID0gdGV4dHVyZTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQXNzaWducyBmaW5hbCBtYXRlcmlhbCB0byBhIE1lc2gsIExpbmUsIG9yIFBvaW50cyBpbnN0YW5jZS4gVGhlIGluc3RhbmNlXG4gICAqIGFscmVhZHkgaGFzIGEgbWF0ZXJpYWwgKGdlbmVyYXRlZCBmcm9tIHRoZSBnbFRGIG1hdGVyaWFsIG9wdGlvbnMgYWxvbmUpXG4gICAqIGJ1dCByZXVzZSBvZiB0aGUgc2FtZSBnbFRGIG1hdGVyaWFsIG1heSByZXF1aXJlIG11bHRpcGxlIHRocmVlanMgbWF0ZXJpYWxzXG4gICAqIHRvIGFjY29tb2RhdGUgZGlmZmVyZW50IHByaW1pdGl2ZSB0eXBlcywgZGVmaW5lcywgZXRjLiBOZXcgbWF0ZXJpYWxzIHdpbGxcbiAgICogYmUgY3JlYXRlZCBpZiBuZWNlc3NhcnksIGFuZCByZXVzZWQgZnJvbSBhIGNhY2hlLlxuICAgKiBAcGFyYW0gIHtPYmplY3QzRH0gbWVzaCBNZXNoLCBMaW5lLCBvciBQb2ludHMgaW5zdGFuY2UuXG4gICAqL1xuICBHTFRGUGFyc2VyLnByb3RvdHlwZS5hc3NpZ25GaW5hbE1hdGVyaWFsID0gZnVuY3Rpb24gKG1lc2gpIHtcbiAgICB2YXIgZ2VvbWV0cnkgPSBtZXNoLmdlb21ldHJ5O1xuICAgIHZhciBtYXRlcmlhbCA9IG1lc2gubWF0ZXJpYWw7XG5cbiAgICB2YXIgdXNlVmVydGV4VGFuZ2VudHMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgdXNlVmVydGV4Q29sb3JzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciB1c2VGbGF0U2hhZGluZyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQ7XG4gICAgdmFyIHVzZVNraW5uaW5nID0gbWVzaC5pc1NraW5uZWRNZXNoID09PSB0cnVlO1xuICAgIHZhciB1c2VNb3JwaFRhcmdldHMgPSBPYmplY3Qua2V5cyhnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMpLmxlbmd0aCA+IDA7XG4gICAgdmFyIHVzZU1vcnBoTm9ybWFscyA9IHVzZU1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAobWVzaC5pc1BvaW50cykge1xuICAgICAgdmFyIGNhY2hlS2V5ID0gJ1BvaW50c01hdGVyaWFsOicgKyBtYXRlcmlhbC51dWlkO1xuXG4gICAgICB2YXIgcG9pbnRzTWF0ZXJpYWwgPSB0aGlzLmNhY2hlLmdldChjYWNoZUtleSk7XG5cbiAgICAgIGlmICghcG9pbnRzTWF0ZXJpYWwpIHtcbiAgICAgICAgcG9pbnRzTWF0ZXJpYWwgPSBuZXcgUG9pbnRzTWF0ZXJpYWwoKTtcbiAgICAgICAgTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbChwb2ludHNNYXRlcmlhbCwgbWF0ZXJpYWwpO1xuICAgICAgICBwb2ludHNNYXRlcmlhbC5jb2xvci5jb3B5KG1hdGVyaWFsLmNvbG9yKTtcbiAgICAgICAgcG9pbnRzTWF0ZXJpYWwubWFwID0gbWF0ZXJpYWwubWFwO1xuICAgICAgICBwb2ludHNNYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPSBmYWxzZTsgLy8gZ2xURiBzcGVjIHNheXMgcG9pbnRzIHNob3VsZCBiZSAxcHhcblxuICAgICAgICB0aGlzLmNhY2hlLmFkZChjYWNoZUtleSwgcG9pbnRzTWF0ZXJpYWwpO1xuICAgICAgfVxuXG4gICAgICBtYXRlcmlhbCA9IHBvaW50c01hdGVyaWFsO1xuICAgIH0gZWxzZSBpZiAobWVzaC5pc0xpbmUpIHtcbiAgICAgIHZhciBjYWNoZUtleSA9ICdMaW5lQmFzaWNNYXRlcmlhbDonICsgbWF0ZXJpYWwudXVpZDtcblxuICAgICAgdmFyIGxpbmVNYXRlcmlhbCA9IHRoaXMuY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblxuICAgICAgaWYgKCFsaW5lTWF0ZXJpYWwpIHtcbiAgICAgICAgbGluZU1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCk7XG4gICAgICAgIE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwobGluZU1hdGVyaWFsLCBtYXRlcmlhbCk7XG4gICAgICAgIGxpbmVNYXRlcmlhbC5jb2xvci5jb3B5KG1hdGVyaWFsLmNvbG9yKTtcblxuICAgICAgICB0aGlzLmNhY2hlLmFkZChjYWNoZUtleSwgbGluZU1hdGVyaWFsKTtcbiAgICAgIH1cblxuICAgICAgbWF0ZXJpYWwgPSBsaW5lTWF0ZXJpYWw7XG4gICAgfVxuXG4gICAgLy8gQ2xvbmUgdGhlIG1hdGVyaWFsIGlmIGl0IHdpbGwgYmUgbW9kaWZpZWRcbiAgICBpZiAodXNlVmVydGV4VGFuZ2VudHMgfHwgdXNlVmVydGV4Q29sb3JzIHx8IHVzZUZsYXRTaGFkaW5nIHx8IHVzZVNraW5uaW5nIHx8IHVzZU1vcnBoVGFyZ2V0cykge1xuICAgICAgdmFyIGNhY2hlS2V5ID0gJ0Nsb25lZE1hdGVyaWFsOicgKyBtYXRlcmlhbC51dWlkICsgJzonO1xuXG4gICAgICBpZiAobWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwpIGNhY2hlS2V5ICs9ICdzcGVjdWxhci1nbG9zc2luZXNzOic7XG4gICAgICBpZiAodXNlU2tpbm5pbmcpIGNhY2hlS2V5ICs9ICdza2lubmluZzonO1xuICAgICAgaWYgKHVzZVZlcnRleFRhbmdlbnRzKSBjYWNoZUtleSArPSAndmVydGV4LXRhbmdlbnRzOic7XG4gICAgICBpZiAodXNlVmVydGV4Q29sb3JzKSBjYWNoZUtleSArPSAndmVydGV4LWNvbG9yczonO1xuICAgICAgaWYgKHVzZUZsYXRTaGFkaW5nKSBjYWNoZUtleSArPSAnZmxhdC1zaGFkaW5nOic7XG4gICAgICBpZiAodXNlTW9ycGhUYXJnZXRzKSBjYWNoZUtleSArPSAnbW9ycGgtdGFyZ2V0czonO1xuICAgICAgaWYgKHVzZU1vcnBoTm9ybWFscykgY2FjaGVLZXkgKz0gJ21vcnBoLW5vcm1hbHM6JztcblxuICAgICAgdmFyIGNhY2hlZE1hdGVyaWFsID0gdGhpcy5jYWNoZS5nZXQoY2FjaGVLZXkpO1xuXG4gICAgICBpZiAoIWNhY2hlZE1hdGVyaWFsKSB7XG4gICAgICAgIGNhY2hlZE1hdGVyaWFsID0gbWF0ZXJpYWwuY2xvbmUoKTtcblxuICAgICAgICBpZiAodXNlU2tpbm5pbmcpIGNhY2hlZE1hdGVyaWFsLnNraW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHVzZVZlcnRleFRhbmdlbnRzKSBjYWNoZWRNYXRlcmlhbC52ZXJ0ZXhUYW5nZW50cyA9IHRydWU7XG4gICAgICAgIGlmICh1c2VWZXJ0ZXhDb2xvcnMpIGNhY2hlZE1hdGVyaWFsLnZlcnRleENvbG9ycyA9IHRydWU7XG4gICAgICAgIGlmICh1c2VGbGF0U2hhZGluZykgY2FjaGVkTWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSB0cnVlO1xuICAgICAgICBpZiAodXNlTW9ycGhUYXJnZXRzKSBjYWNoZWRNYXRlcmlhbC5tb3JwaFRhcmdldHMgPSB0cnVlO1xuICAgICAgICBpZiAodXNlTW9ycGhOb3JtYWxzKSBjYWNoZWRNYXRlcmlhbC5tb3JwaE5vcm1hbHMgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuY2FjaGUuYWRkKGNhY2hlS2V5LCBjYWNoZWRNYXRlcmlhbCk7XG4gICAgICB9XG5cbiAgICAgIG1hdGVyaWFsID0gY2FjaGVkTWF0ZXJpYWw7XG4gICAgfVxuXG4gICAgLy8gd29ya2Fyb3VuZHMgZm9yIG1lc2ggYW5kIGdlb21ldHJ5XG5cbiAgICBpZiAoXG4gICAgICBtYXRlcmlhbC5hb01hcCAmJlxuICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy51djIgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy51diAhPT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3V2MicsIGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYpO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzExNDM4I2lzc3VlY29tbWVudC01MDcwMDM5OTVcbiAgICBpZiAobWF0ZXJpYWwubm9ybWFsU2NhbGUgJiYgIXVzZVZlcnRleFRhbmdlbnRzKSB7XG4gICAgICBtYXRlcmlhbC5ub3JtYWxTY2FsZS55ID0gLW1hdGVyaWFsLm5vcm1hbFNjYWxlLnk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbFNjYWxlICYmICF1c2VWZXJ0ZXhUYW5nZW50cykge1xuICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUueSA9IC1tYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxTY2FsZS55O1xuICAgIH1cblxuICAgIG1lc2gubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgfTtcblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtYXRlcmlhbHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1hdGVyaWFsSW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxNYXRlcmlhbD59XG4gICAqL1xuICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkTWF0ZXJpYWwgPSBmdW5jdGlvbiAobWF0ZXJpYWxJbmRleCkge1xuICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgIHZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zO1xuICAgIHZhciBtYXRlcmlhbERlZiA9IGpzb24ubWF0ZXJpYWxzW21hdGVyaWFsSW5kZXhdO1xuXG4gICAgdmFyIG1hdGVyaWFsVHlwZTtcbiAgICB2YXIgbWF0ZXJpYWxQYXJhbXMgPSB7fTtcbiAgICB2YXIgbWF0ZXJpYWxFeHRlbnNpb25zID0gbWF0ZXJpYWxEZWYuZXh0ZW5zaW9ucyB8fCB7fTtcblxuICAgIHZhciBwZW5kaW5nID0gW107XG5cbiAgICBpZiAobWF0ZXJpYWxFeHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTU10pIHtcbiAgICAgIHZhciBzZ0V4dGVuc2lvbiA9IGV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTXTtcbiAgICAgIG1hdGVyaWFsVHlwZSA9IHNnRXh0ZW5zaW9uLmdldE1hdGVyaWFsVHlwZSgpO1xuICAgICAgcGVuZGluZy5wdXNoKHNnRXh0ZW5zaW9uLmV4dGVuZFBhcmFtcyhtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlcikpO1xuICAgIH0gZWxzZSBpZiAobWF0ZXJpYWxFeHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19VTkxJVF0pIHtcbiAgICAgIHZhciBrbXVFeHRlbnNpb24gPSBleHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19VTkxJVF07XG4gICAgICBtYXRlcmlhbFR5cGUgPSBrbXVFeHRlbnNpb24uZ2V0TWF0ZXJpYWxUeXBlKCk7XG4gICAgICBwZW5kaW5nLnB1c2goa211RXh0ZW5zaW9uLmV4dGVuZFBhcmFtcyhtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTcGVjaWZpY2F0aW9uOlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI21ldGFsbGljLXJvdWdobmVzcy1tYXRlcmlhbFxuXG4gICAgICBtYXRlcmlhbFR5cGUgPSBNZXNoU3RhbmRhcmRNYXRlcmlhbDtcblxuICAgICAgdmFyIG1ldGFsbGljUm91Z2huZXNzID0gbWF0ZXJpYWxEZWYucGJyTWV0YWxsaWNSb3VnaG5lc3MgfHwge307XG5cbiAgICAgIG1hdGVyaWFsUGFyYW1zLmNvbG9yID0gbmV3IENvbG9yKDEuMCwgMS4wLCAxLjApO1xuICAgICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IDEuMDtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yKSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3I7XG5cbiAgICAgICAgbWF0ZXJpYWxQYXJhbXMuY29sb3IuZnJvbUFycmF5KGFycmF5KTtcbiAgICAgICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IGFycmF5WzNdO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBlbmRpbmcucHVzaChcbiAgICAgICAgICBwYXJzZXIuYXNzaWduVGV4dHVyZShtYXRlcmlhbFBhcmFtcywgJ21hcCcsIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIG1hdGVyaWFsUGFyYW1zLm1ldGFsbmVzcyA9XG4gICAgICAgIG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yICE9PSB1bmRlZmluZWQgPyBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY0ZhY3RvciA6IDEuMDtcbiAgICAgIG1hdGVyaWFsUGFyYW1zLnJvdWdobmVzcyA9XG4gICAgICAgIG1ldGFsbGljUm91Z2huZXNzLnJvdWdobmVzc0ZhY3RvciAhPT0gdW5kZWZpbmVkID8gbWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yIDogMS4wO1xuXG4gICAgICBpZiAobWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGVuZGluZy5wdXNoKFxuICAgICAgICAgIHBhcnNlci5hc3NpZ25UZXh0dXJlKFxuICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMsXG4gICAgICAgICAgICAnbWV0YWxuZXNzTWFwJyxcbiAgICAgICAgICAgIG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgcGVuZGluZy5wdXNoKFxuICAgICAgICAgIHBhcnNlci5hc3NpZ25UZXh0dXJlKFxuICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMsXG4gICAgICAgICAgICAncm91Z2huZXNzTWFwJyxcbiAgICAgICAgICAgIG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWF0ZXJpYWxEZWYuZG91YmxlU2lkZWQgPT09IHRydWUpIHtcbiAgICAgIG1hdGVyaWFsUGFyYW1zLnNpZGUgPSBEb3VibGVTaWRlO1xuICAgIH1cblxuICAgIHZhciBhbHBoYU1vZGUgPSBtYXRlcmlhbERlZi5hbHBoYU1vZGUgfHwgQUxQSEFfTU9ERVMuT1BBUVVFO1xuXG4gICAgaWYgKGFscGhhTW9kZSA9PT0gQUxQSEFfTU9ERVMuQkxFTkQpIHtcbiAgICAgIG1hdGVyaWFsUGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8xNzcwNlxuICAgICAgbWF0ZXJpYWxQYXJhbXMuZGVwdGhXcml0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXRlcmlhbFBhcmFtcy50cmFuc3BhcmVudCA9IGZhbHNlO1xuXG4gICAgICBpZiAoYWxwaGFNb2RlID09PSBBTFBIQV9NT0RFUy5NQVNLKSB7XG4gICAgICAgIG1hdGVyaWFsUGFyYW1zLmFscGhhVGVzdCA9XG4gICAgICAgICAgbWF0ZXJpYWxEZWYuYWxwaGFDdXRvZmYgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsRGVmLmFscGhhQ3V0b2ZmIDogMC41O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXRlcmlhbERlZi5ub3JtYWxUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWxUeXBlICE9PSBNZXNoQmFzaWNNYXRlcmlhbCkge1xuICAgICAgcGVuZGluZy5wdXNoKHBhcnNlci5hc3NpZ25UZXh0dXJlKG1hdGVyaWFsUGFyYW1zLCAnbm9ybWFsTWFwJywgbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZSkpO1xuXG4gICAgICBtYXRlcmlhbFBhcmFtcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKDEsIDEpO1xuXG4gICAgICBpZiAobWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZS5zY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1hdGVyaWFsUGFyYW1zLm5vcm1hbFNjYWxlLnNldChcbiAgICAgICAgICBtYXRlcmlhbERlZi5ub3JtYWxUZXh0dXJlLnNjYWxlLFxuICAgICAgICAgIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZSAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsVHlwZSAhPT0gTWVzaEJhc2ljTWF0ZXJpYWwpIHtcbiAgICAgIHBlbmRpbmcucHVzaChwYXJzZXIuYXNzaWduVGV4dHVyZShtYXRlcmlhbFBhcmFtcywgJ2FvTWFwJywgbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZSkpO1xuXG4gICAgICBpZiAobWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZS5zdHJlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1hdGVyaWFsUGFyYW1zLmFvTWFwSW50ZW5zaXR5ID0gbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZS5zdHJlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWF0ZXJpYWxEZWYuZW1pc3NpdmVGYWN0b3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IE1lc2hCYXNpY01hdGVyaWFsKSB7XG4gICAgICBtYXRlcmlhbFBhcmFtcy5lbWlzc2l2ZSA9IG5ldyBDb2xvcigpLmZyb21BcnJheShtYXRlcmlhbERlZi5lbWlzc2l2ZUZhY3Rvcik7XG4gICAgfVxuXG4gICAgaWYgKG1hdGVyaWFsRGVmLmVtaXNzaXZlVGV4dHVyZSAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsVHlwZSAhPT0gTWVzaEJhc2ljTWF0ZXJpYWwpIHtcbiAgICAgIHBlbmRpbmcucHVzaChcbiAgICAgICAgcGFyc2VyLmFzc2lnblRleHR1cmUobWF0ZXJpYWxQYXJhbXMsICdlbWlzc2l2ZU1hcCcsIG1hdGVyaWFsRGVmLmVtaXNzaXZlVGV4dHVyZSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGVyaWFsRXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfQ0xFQVJDT0FUXSkge1xuICAgICAgdmFyIGNsZWFyY29hdEV4dGVuc2lvbiA9IGV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX0NMRUFSQ09BVF07XG4gICAgICBtYXRlcmlhbFR5cGUgPSBjbGVhcmNvYXRFeHRlbnNpb24uZ2V0TWF0ZXJpYWxUeXBlKCk7XG4gICAgICBwZW5kaW5nLnB1c2goXG4gICAgICAgIGNsZWFyY29hdEV4dGVuc2lvbi5leHRlbmRQYXJhbXMobWF0ZXJpYWxQYXJhbXMsIHsgZXh0ZW5zaW9uczogbWF0ZXJpYWxFeHRlbnNpb25zIH0sIHBhcnNlcilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1hdGVyaWFsO1xuXG4gICAgICBpZiAobWF0ZXJpYWxUeXBlID09PSBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbCkge1xuICAgICAgICBtYXRlcmlhbCA9IGV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTXS5jcmVhdGVNYXRlcmlhbChcbiAgICAgICAgICBtYXRlcmlhbFBhcmFtc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0ZXJpYWwgPSBuZXcgbWF0ZXJpYWxUeXBlKG1hdGVyaWFsUGFyYW1zKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hdGVyaWFsRGVmLm5hbWUpIG1hdGVyaWFsLm5hbWUgPSBtYXRlcmlhbERlZi5uYW1lO1xuXG4gICAgICAvLyBiYXNlQ29sb3JUZXh0dXJlLCBlbWlzc2l2ZVRleHR1cmUsIGFuZCBzcGVjdWxhckdsb3NzaW5lc3NUZXh0dXJlIHVzZSBzUkdCIGVuY29kaW5nLlxuICAgICAgaWYgKG1hdGVyaWFsLm1hcCkgbWF0ZXJpYWwubWFwLmVuY29kaW5nID0gc1JHQkVuY29kaW5nO1xuICAgICAgaWYgKG1hdGVyaWFsLmVtaXNzaXZlTWFwKSBtYXRlcmlhbC5lbWlzc2l2ZU1hcC5lbmNvZGluZyA9IHNSR0JFbmNvZGluZztcblxuICAgICAgYXNzaWduRXh0cmFzVG9Vc2VyRGF0YShtYXRlcmlhbCwgbWF0ZXJpYWxEZWYpO1xuXG4gICAgICBpZiAobWF0ZXJpYWxEZWYuZXh0ZW5zaW9ucykgYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKGV4dGVuc2lvbnMsIG1hdGVyaWFsLCBtYXRlcmlhbERlZik7XG5cbiAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnlcbiAgICogQHBhcmFtIHtHTFRGLlByaW1pdGl2ZX0gcHJpbWl0aXZlRGVmXG4gICAqIEBwYXJhbSB7R0xURlBhcnNlcn0gcGFyc2VyXG4gICAqL1xuICBmdW5jdGlvbiBjb21wdXRlQm91bmRzKGdlb21ldHJ5LCBwcmltaXRpdmVEZWYsIHBhcnNlcikge1xuICAgIHZhciBhdHRyaWJ1dGVzID0gcHJpbWl0aXZlRGVmLmF0dHJpYnV0ZXM7XG5cbiAgICB2YXIgYm94ID0gbmV3IEJveDMoKTtcblxuICAgIGlmIChhdHRyaWJ1dGVzLlBPU0lUSU9OICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBhY2Nlc3NvciA9IHBhcnNlci5qc29uLmFjY2Vzc29yc1thdHRyaWJ1dGVzLlBPU0lUSU9OXTtcblxuICAgICAgdmFyIG1pbiA9IGFjY2Vzc29yLm1pbjtcbiAgICAgIHZhciBtYXggPSBhY2Nlc3Nvci5tYXg7XG5cbiAgICAgIC8vIGdsVEYgcmVxdWlyZXMgJ21pbicgYW5kICdtYXgnLCBidXQgVlJNICh3aGljaCBleHRlbmRzIGdsVEYpIGN1cnJlbnRseSBpZ25vcmVzIHRoYXQgcmVxdWlyZW1lbnQuXG5cbiAgICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBtYXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBib3guc2V0KG5ldyBWZWN0b3IzKG1pblswXSwgbWluWzFdLCBtaW5bMl0pLCBuZXcgVmVjdG9yMyhtYXhbMF0sIG1heFsxXSwgbWF4WzJdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IE1pc3NpbmcgbWluL21heCBwcm9wZXJ0aWVzIGZvciBhY2Nlc3NvciBQT1NJVElPTi4nKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0cyA9IHByaW1pdGl2ZURlZi50YXJnZXRzO1xuXG4gICAgaWYgKHRhcmdldHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG1heERpc3BsYWNlbWVudCA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICB2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuXG4gICAgICAgIGlmICh0YXJnZXQuUE9TSVRJT04gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBhY2Nlc3NvciA9IHBhcnNlci5qc29uLmFjY2Vzc29yc1t0YXJnZXQuUE9TSVRJT05dO1xuICAgICAgICAgIHZhciBtaW4gPSBhY2Nlc3Nvci5taW47XG4gICAgICAgICAgdmFyIG1heCA9IGFjY2Vzc29yLm1heDtcblxuICAgICAgICAgIC8vIGdsVEYgcmVxdWlyZXMgJ21pbicgYW5kICdtYXgnLCBidXQgVlJNICh3aGljaCBleHRlbmRzIGdsVEYpIGN1cnJlbnRseSBpZ25vcmVzIHRoYXQgcmVxdWlyZW1lbnQuXG5cbiAgICAgICAgICBpZiAobWluICE9PSB1bmRlZmluZWQgJiYgbWF4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IG1heCBvZiBhYnNvbHV0ZSBjb21wb25lbnRzIGJlY2F1c2UgdGFyZ2V0IHdlaWdodCBpcyBbLTEsMV1cbiAgICAgICAgICAgIHZlY3Rvci5zZXRYKE1hdGgubWF4KE1hdGguYWJzKG1pblswXSksIE1hdGguYWJzKG1heFswXSkpKTtcbiAgICAgICAgICAgIHZlY3Rvci5zZXRZKE1hdGgubWF4KE1hdGguYWJzKG1pblsxXSksIE1hdGguYWJzKG1heFsxXSkpKTtcbiAgICAgICAgICAgIHZlY3Rvci5zZXRaKE1hdGgubWF4KE1hdGguYWJzKG1pblsyXSksIE1hdGguYWJzKG1heFsyXSkpKTtcblxuICAgICAgICAgICAgLy8gTm90ZTogdGhpcyBhc3N1bWVzIHRoYXQgdGhlIHN1bSBvZiBhbGwgd2VpZ2h0cyBpcyBhdCBtb3N0IDEuIFRoaXMgaXNuJ3QgcXVpdGUgY29ycmVjdCAtIGl0J3MgbW9yZSBjb25zZXJ2YXRpdmVcbiAgICAgICAgICAgIC8vIHRvIGFzc3VtZSB0aGF0IGVhY2ggdGFyZ2V0IGNhbiBoYXZlIGEgbWF4IHdlaWdodCBvZiAxLiBIb3dldmVyLCBmb3Igc29tZSB1c2UgY2FzZXMgLSBub3RhYmx5LCB3aGVuIG1vcnBoIHRhcmdldHNcbiAgICAgICAgICAgIC8vIGFyZSB1c2VkIHRvIGltcGxlbWVudCBrZXktZnJhbWUgYW5pbWF0aW9ucyBhbmQgYXMgc3VjaCBvbmx5IHR3byBhcmUgYWN0aXZlIGF0IGEgdGltZSAtIHRoaXMgcmVzdWx0cyBpbiB2ZXJ5IGxhcmdlXG4gICAgICAgICAgICAvLyBib3hlcy4gU28gZm9yIG5vdyB3ZSBtYWtlIGEgYm94IHRoYXQncyBzb21ldGltZXMgYSB0b3VjaCB0b28gc21hbGwgYnV0IGlzIGhvcGVmdWxseSBtb3N0bHkgb2YgcmVhc29uYWJsZSBzaXplLlxuICAgICAgICAgICAgbWF4RGlzcGxhY2VtZW50Lm1heCh2ZWN0b3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IE1pc3NpbmcgbWluL21heCBwcm9wZXJ0aWVzIGZvciBhY2Nlc3NvciBQT1NJVElPTi4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQXMgcGVyIGNvbW1lbnQgYWJvdmUgdGhpcyBib3ggaXNuJ3QgY29uc2VydmF0aXZlLCBidXQgaGFzIGEgcmVhc29uYWJsZSBzaXplIGZvciBhIHZlcnkgbGFyZ2UgbnVtYmVyIG9mIG1vcnBoIHRhcmdldHMuXG4gICAgICBib3guZXhwYW5kQnlWZWN0b3IobWF4RGlzcGxhY2VtZW50KTtcbiAgICB9XG5cbiAgICBnZW9tZXRyeS5ib3VuZGluZ0JveCA9IGJveDtcblxuICAgIHZhciBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cbiAgICBib3guZ2V0Q2VudGVyKHNwaGVyZS5jZW50ZXIpO1xuICAgIHNwaGVyZS5yYWRpdXMgPSBib3gubWluLmRpc3RhbmNlVG8oYm94Lm1heCkgLyAyO1xuXG4gICAgZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBzcGhlcmU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnlcbiAgICogQHBhcmFtIHtHTFRGLlByaW1pdGl2ZX0gcHJpbWl0aXZlRGVmXG4gICAqIEBwYXJhbSB7R0xURlBhcnNlcn0gcGFyc2VyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QnVmZmVyR2VvbWV0cnk+fVxuICAgKi9cbiAgZnVuY3Rpb24gYWRkUHJpbWl0aXZlQXR0cmlidXRlcyhnZW9tZXRyeSwgcHJpbWl0aXZlRGVmLCBwYXJzZXIpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHByaW1pdGl2ZURlZi5hdHRyaWJ1dGVzO1xuXG4gICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGFzc2lnbkF0dHJpYnV0ZUFjY2Vzc29yKGFjY2Vzc29ySW5kZXgsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgIHJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSgnYWNjZXNzb3InLCBhY2Nlc3NvckluZGV4KS50aGVuKGZ1bmN0aW9uIChhY2Nlc3Nvcikge1xuICAgICAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYWNjZXNzb3IpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZ2x0ZkF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykge1xuICAgICAgdmFyIHRocmVlQXR0cmlidXRlTmFtZSA9IEFUVFJJQlVURVNbZ2x0ZkF0dHJpYnV0ZU5hbWVdIHx8IGdsdGZBdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIC8vIFNraXAgYXR0cmlidXRlcyBhbHJlYWR5IHByb3ZpZGVkIGJ5IGUuZy4gRHJhY28gZXh0ZW5zaW9uLlxuICAgICAgaWYgKHRocmVlQXR0cmlidXRlTmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzKSBjb250aW51ZTtcblxuICAgICAgcGVuZGluZy5wdXNoKGFzc2lnbkF0dHJpYnV0ZUFjY2Vzc29yKGF0dHJpYnV0ZXNbZ2x0ZkF0dHJpYnV0ZU5hbWVdLCB0aHJlZUF0dHJpYnV0ZU5hbWUpKTtcbiAgICB9XG5cbiAgICBpZiAocHJpbWl0aXZlRGVmLmluZGljZXMgIT09IHVuZGVmaW5lZCAmJiAhZ2VvbWV0cnkuaW5kZXgpIHtcbiAgICAgIHZhciBhY2Nlc3NvciA9IHBhcnNlclxuICAgICAgICAuZ2V0RGVwZW5kZW5jeSgnYWNjZXNzb3InLCBwcmltaXRpdmVEZWYuaW5kaWNlcylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGFjY2Vzc29yKSB7XG4gICAgICAgICAgZ2VvbWV0cnkuc2V0SW5kZXgoYWNjZXNzb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgcGVuZGluZy5wdXNoKGFjY2Vzc29yKTtcbiAgICB9XG5cbiAgICBhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKGdlb21ldHJ5LCBwcmltaXRpdmVEZWYpO1xuXG4gICAgY29tcHV0ZUJvdW5kcyhnZW9tZXRyeSwgcHJpbWl0aXZlRGVmLCBwYXJzZXIpO1xuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHByaW1pdGl2ZURlZi50YXJnZXRzICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBhZGRNb3JwaFRhcmdldHMoZ2VvbWV0cnksIHByaW1pdGl2ZURlZi50YXJnZXRzLCBwYXJzZXIpXG4gICAgICAgIDogZ2VvbWV0cnk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRyYXdNb2RlXG4gICAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fVxuICAgKi9cbiAgZnVuY3Rpb24gdG9UcmlhbmdsZXNEcmF3TW9kZShnZW9tZXRyeSwgZHJhd01vZGUpIHtcbiAgICB2YXIgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xuXG4gICAgLy8gZ2VuZXJhdGUgaW5kZXggaWYgbm90IHByZXNlbnRcblxuICAgIGlmIChpbmRleCA9PT0gbnVsbCkge1xuICAgICAgdmFyIGluZGljZXMgPSBbXTtcblxuICAgICAgdmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdwb3NpdGlvbicpO1xuXG4gICAgICBpZiAocG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc2l0aW9uLmNvdW50OyBpKyspIHtcbiAgICAgICAgICBpbmRpY2VzLnB1c2goaSk7XG4gICAgICAgIH1cblxuICAgICAgICBnZW9tZXRyeS5zZXRJbmRleChpbmRpY2VzKTtcbiAgICAgICAgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAnVEhSRUUuR0xURkxvYWRlci50b1RyaWFuZ2xlc0RyYXdNb2RlKCk6IFVuZGVmaW5lZCBwb3NpdGlvbiBhdHRyaWJ1dGUuIFByb2Nlc3Npbmcgbm90IHBvc3NpYmxlLidcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGdlb21ldHJ5O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG5cbiAgICB2YXIgbnVtYmVyT2ZUcmlhbmdsZXMgPSBpbmRleC5jb3VudCAtIDI7XG4gICAgdmFyIG5ld0luZGljZXMgPSBbXTtcblxuICAgIGlmIChkcmF3TW9kZSA9PT0gVHJpYW5nbGVGYW5EcmF3TW9kZSkge1xuICAgICAgLy8gZ2wuVFJJQU5HTEVfRkFOXG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IG51bWJlck9mVHJpYW5nbGVzOyBpKyspIHtcbiAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoMCkpO1xuICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpKSk7XG4gICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAxKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGdsLlRSSUFOR0xFX1NUUklQXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZUcmlhbmdsZXM7IGkrKykge1xuICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpKSk7XG4gICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSArIDEpKTtcbiAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpICsgMikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAyKSk7XG4gICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSArIDEpKTtcbiAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3SW5kaWNlcy5sZW5ndGggLyAzICE9PSBudW1iZXJPZlRyaWFuZ2xlcykge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1RIUkVFLkdMVEZMb2FkZXIudG9UcmlhbmdsZXNEcmF3TW9kZSgpOiBVbmFibGUgdG8gZ2VuZXJhdGUgY29ycmVjdCBhbW91bnQgb2YgdHJpYW5nbGVzLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gYnVpbGQgZmluYWwgZ2VvbWV0cnlcblxuICAgIHZhciBuZXdHZW9tZXRyeSA9IGdlb21ldHJ5LmNsb25lKCk7XG4gICAgbmV3R2VvbWV0cnkuc2V0SW5kZXgobmV3SW5kaWNlcyk7XG5cbiAgICByZXR1cm4gbmV3R2VvbWV0cnk7XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNnZW9tZXRyeVxuICAgKlxuICAgKiBDcmVhdGVzIEJ1ZmZlckdlb21ldHJpZXMgZnJvbSBwcmltaXRpdmVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PEdMVEYuUHJpbWl0aXZlPn0gcHJpbWl0aXZlc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PEJ1ZmZlckdlb21ldHJ5Pj59XG4gICAqL1xuICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkR2VvbWV0cmllcyA9IGZ1bmN0aW9uIChwcmltaXRpdmVzKSB7XG4gICAgdmFyIHBhcnNlciA9IHRoaXM7XG4gICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG4gICAgdmFyIGNhY2hlID0gdGhpcy5wcmltaXRpdmVDYWNoZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURyYWNvUHJpbWl0aXZlKHByaW1pdGl2ZSkge1xuICAgICAgcmV0dXJuIGV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTl1cbiAgICAgICAgLmRlY29kZVByaW1pdGl2ZShwcmltaXRpdmUsIHBhcnNlcilcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGdlb21ldHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIGFkZFByaW1pdGl2ZUF0dHJpYnV0ZXMoZ2VvbWV0cnksIHByaW1pdGl2ZSwgcGFyc2VyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHByaW1pdGl2ZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgdmFyIHByaW1pdGl2ZSA9IHByaW1pdGl2ZXNbaV07XG4gICAgICB2YXIgY2FjaGVLZXkgPSBjcmVhdGVQcmltaXRpdmVLZXkocHJpbWl0aXZlKTtcblxuICAgICAgLy8gU2VlIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdlb21ldHJ5XG4gICAgICB2YXIgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuXG4gICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIC8vIFVzZSB0aGUgY2FjaGVkIGdlb21ldHJ5IGlmIGl0IGV4aXN0c1xuICAgICAgICBwZW5kaW5nLnB1c2goY2FjaGVkLnByb21pc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGdlb21ldHJ5UHJvbWlzZTtcblxuICAgICAgICBpZiAocHJpbWl0aXZlLmV4dGVuc2lvbnMgJiYgcHJpbWl0aXZlLmV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTl0pIHtcbiAgICAgICAgICAvLyBVc2UgRFJBQ08gZ2VvbWV0cnkgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgZ2VvbWV0cnlQcm9taXNlID0gY3JlYXRlRHJhY29QcmltaXRpdmUocHJpbWl0aXZlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGdlb21ldHJ5XG4gICAgICAgICAgZ2VvbWV0cnlQcm9taXNlID0gYWRkUHJpbWl0aXZlQXR0cmlidXRlcyhuZXcgQnVmZmVyR2VvbWV0cnkoKSwgcHJpbWl0aXZlLCBwYXJzZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FjaGUgdGhpcyBnZW9tZXRyeVxuICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSB7IHByaW1pdGl2ZTogcHJpbWl0aXZlLCBwcm9taXNlOiBnZW9tZXRyeVByb21pc2UgfTtcblxuICAgICAgICBwZW5kaW5nLnB1c2goZ2VvbWV0cnlQcm9taXNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjbWVzaGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtZXNoSW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxHcm91cHxNZXNofFNraW5uZWRNZXNoPn1cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRNZXNoID0gZnVuY3Rpb24gKG1lc2hJbmRleCkge1xuICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuXG4gICAgdmFyIG1lc2hEZWYgPSBqc29uLm1lc2hlc1ttZXNoSW5kZXhdO1xuICAgIHZhciBwcmltaXRpdmVzID0gbWVzaERlZi5wcmltaXRpdmVzO1xuXG4gICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHByaW1pdGl2ZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgdmFyIG1hdGVyaWFsID1cbiAgICAgICAgICAgIHByaW1pdGl2ZXNbaV0ubWF0ZXJpYWwgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IGNyZWF0ZURlZmF1bHRNYXRlcmlhbCh0aGlzLmNhY2hlKVxuICAgICAgICAgICAgICA6IHRoaXMuZ2V0RGVwZW5kZW5jeSgnbWF0ZXJpYWwnLCBwcmltaXRpdmVzW2ldLm1hdGVyaWFsKTtcblxuICAgICAgcGVuZGluZy5wdXNoKG1hdGVyaWFsKTtcbiAgICB9XG5cbiAgICBwZW5kaW5nLnB1c2gocGFyc2VyLmxvYWRHZW9tZXRyaWVzKHByaW1pdGl2ZXMpKTtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICB2YXIgbWF0ZXJpYWxzID0gcmVzdWx0cy5zbGljZSgwLCByZXN1bHRzLmxlbmd0aCAtIDEpO1xuICAgICAgdmFyIGdlb21ldHJpZXMgPSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgIHZhciBtZXNoZXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZ2VvbWV0cmllcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIHZhciBnZW9tZXRyeSA9IGdlb21ldHJpZXNbaV07XG4gICAgICAgIHZhciBwcmltaXRpdmUgPSBwcmltaXRpdmVzW2ldO1xuXG4gICAgICAgIC8vIDEuIGNyZWF0ZSBNZXNoXG5cbiAgICAgICAgdmFyIG1lc2g7XG5cbiAgICAgICAgdmFyIG1hdGVyaWFsID0gbWF0ZXJpYWxzW2ldO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFUyB8fFxuICAgICAgICAgIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfU1RSSVAgfHxcbiAgICAgICAgICBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX0ZBTiB8fFxuICAgICAgICAgIHByaW1pdGl2ZS5tb2RlID09PSB1bmRlZmluZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gLmlzU2tpbm5lZE1lc2ggaXNuJ3QgaW4gZ2xURiBzcGVjLiBTZWUgLm1hcmtEZWZzKClcbiAgICAgICAgICBtZXNoID1cbiAgICAgICAgICAgIG1lc2hEZWYuaXNTa2lubmVkTWVzaCA9PT0gdHJ1ZVxuICAgICAgICAgICAgICA/IG5ldyBTa2lubmVkTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpXG4gICAgICAgICAgICAgIDogbmV3IE1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcblxuICAgICAgICAgIGlmIChtZXNoLmlzU2tpbm5lZE1lc2ggPT09IHRydWUgJiYgIW1lc2guZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0Lm5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICAgIC8vIHdlIG5vcm1hbGl6ZSBmbG9hdGluZyBwb2ludCBza2luIHdlaWdodCBhcnJheSB0byBmaXggbWFsZm9ybWVkIGFzc2V0cyAoc2VlICMxNTMxOSlcbiAgICAgICAgICAgIC8vIGl0J3MgaW1wb3J0YW50IHRvIHNraXAgdGhpcyBmb3Igbm9uLWZsb2F0MzIgZGF0YSBzaW5jZSBub3JtYWxpemVTa2luV2VpZ2h0cyBhc3N1bWVzIG5vbi1ub3JtYWxpemVkIGlucHV0c1xuICAgICAgICAgICAgbWVzaC5ub3JtYWxpemVTa2luV2VpZ2h0cygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX1NUUklQKSB7XG4gICAgICAgICAgICBtZXNoLmdlb21ldHJ5ID0gdG9UcmlhbmdsZXNEcmF3TW9kZShtZXNoLmdlb21ldHJ5LCBUcmlhbmdsZVN0cmlwRHJhd01vZGUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRV9GQU4pIHtcbiAgICAgICAgICAgIG1lc2guZ2VvbWV0cnkgPSB0b1RyaWFuZ2xlc0RyYXdNb2RlKG1lc2guZ2VvbWV0cnksIFRyaWFuZ2xlRmFuRHJhd01vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVTKSB7XG4gICAgICAgICAgbWVzaCA9IG5ldyBMaW5lU2VnbWVudHMoZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVfU1RSSVApIHtcbiAgICAgICAgICBtZXNoID0gbmV3IExpbmUoZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVfTE9PUCkge1xuICAgICAgICAgIG1lc2ggPSBuZXcgTGluZUxvb3AoZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlBPSU5UUykge1xuICAgICAgICAgIG1lc2ggPSBuZXcgUG9pbnRzKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUSFJFRS5HTFRGTG9hZGVyOiBQcmltaXRpdmUgbW9kZSB1bnN1cHBvcnRlZDogJyArIHByaW1pdGl2ZS5tb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtZXNoLmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHVwZGF0ZU1vcnBoVGFyZ2V0cyhtZXNoLCBtZXNoRGVmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lc2gubmFtZSA9IG1lc2hEZWYubmFtZSB8fCAnbWVzaF8nICsgbWVzaEluZGV4O1xuXG4gICAgICAgIGlmIChnZW9tZXRyaWVzLmxlbmd0aCA+IDEpIG1lc2gubmFtZSArPSAnXycgKyBpO1xuXG4gICAgICAgIGFzc2lnbkV4dHJhc1RvVXNlckRhdGEobWVzaCwgbWVzaERlZik7XG5cbiAgICAgICAgcGFyc2VyLmFzc2lnbkZpbmFsTWF0ZXJpYWwobWVzaCk7XG5cbiAgICAgICAgbWVzaGVzLnB1c2gobWVzaCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZXNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBtZXNoZXNbMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBncm91cCA9IG5ldyBHcm91cCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBtZXNoZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICBncm91cC5hZGQobWVzaGVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjY2FtZXJhc1xuICAgKiBAcGFyYW0ge251bWJlcn0gY2FtZXJhSW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5DYW1lcmE+fVxuICAgKi9cbiAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZENhbWVyYSA9IGZ1bmN0aW9uIChjYW1lcmFJbmRleCkge1xuICAgIHZhciBjYW1lcmE7XG4gICAgdmFyIGNhbWVyYURlZiA9IHRoaXMuanNvbi5jYW1lcmFzW2NhbWVyYUluZGV4XTtcbiAgICB2YXIgcGFyYW1zID0gY2FtZXJhRGVmW2NhbWVyYURlZi50eXBlXTtcblxuICAgIGlmICghcGFyYW1zKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IE1pc3NpbmcgY2FtZXJhIHBhcmFtZXRlcnMuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNhbWVyYURlZi50eXBlID09PSAncGVyc3BlY3RpdmUnKSB7XG4gICAgICBjYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoXG4gICAgICAgIE1hdGhVdGlscy5yYWRUb0RlZyhwYXJhbXMueWZvdiksXG4gICAgICAgIHBhcmFtcy5hc3BlY3RSYXRpbyB8fCAxLFxuICAgICAgICBwYXJhbXMuem5lYXIgfHwgMSxcbiAgICAgICAgcGFyYW1zLnpmYXIgfHwgMmU2XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoY2FtZXJhRGVmLnR5cGUgPT09ICdvcnRob2dyYXBoaWMnKSB7XG4gICAgICBjYW1lcmEgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKFxuICAgICAgICAtcGFyYW1zLnhtYWcsXG4gICAgICAgIHBhcmFtcy54bWFnLFxuICAgICAgICBwYXJhbXMueW1hZyxcbiAgICAgICAgLXBhcmFtcy55bWFnLFxuICAgICAgICBwYXJhbXMuem5lYXIsXG4gICAgICAgIHBhcmFtcy56ZmFyXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChjYW1lcmFEZWYubmFtZSkgY2FtZXJhLm5hbWUgPSBjYW1lcmFEZWYubmFtZTtcblxuICAgIGFzc2lnbkV4dHJhc1RvVXNlckRhdGEoY2FtZXJhLCBjYW1lcmFEZWYpO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYW1lcmEpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjc2tpbnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNraW5JbmRleFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59XG4gICAqL1xuICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkU2tpbiA9IGZ1bmN0aW9uIChza2luSW5kZXgpIHtcbiAgICB2YXIgc2tpbkRlZiA9IHRoaXMuanNvbi5za2luc1tza2luSW5kZXhdO1xuXG4gICAgdmFyIHNraW5FbnRyeSA9IHsgam9pbnRzOiBza2luRGVmLmpvaW50cyB9O1xuXG4gICAgaWYgKHNraW5EZWYuaW52ZXJzZUJpbmRNYXRyaWNlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHNraW5FbnRyeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGVwZW5kZW5jeSgnYWNjZXNzb3InLCBza2luRGVmLmludmVyc2VCaW5kTWF0cmljZXMpLnRoZW4oZnVuY3Rpb24gKGFjY2Vzc29yKSB7XG4gICAgICBza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcyA9IGFjY2Vzc29yO1xuXG4gICAgICByZXR1cm4gc2tpbkVudHJ5O1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjYW5pbWF0aW9uc1xuICAgKiBAcGFyYW0ge251bWJlcn0gYW5pbWF0aW9uSW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxBbmltYXRpb25DbGlwPn1cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbWF0aW9uSW5kZXgpIHtcbiAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcblxuICAgIHZhciBhbmltYXRpb25EZWYgPSBqc29uLmFuaW1hdGlvbnNbYW5pbWF0aW9uSW5kZXhdO1xuXG4gICAgdmFyIHBlbmRpbmdOb2RlcyA9IFtdO1xuICAgIHZhciBwZW5kaW5nSW5wdXRBY2Nlc3NvcnMgPSBbXTtcbiAgICB2YXIgcGVuZGluZ091dHB1dEFjY2Vzc29ycyA9IFtdO1xuICAgIHZhciBwZW5kaW5nU2FtcGxlcnMgPSBbXTtcbiAgICB2YXIgcGVuZGluZ1RhcmdldHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGFuaW1hdGlvbkRlZi5jaGFubmVscy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICB2YXIgY2hhbm5lbCA9IGFuaW1hdGlvbkRlZi5jaGFubmVsc1tpXTtcbiAgICAgIHZhciBzYW1wbGVyID0gYW5pbWF0aW9uRGVmLnNhbXBsZXJzW2NoYW5uZWwuc2FtcGxlcl07XG4gICAgICB2YXIgdGFyZ2V0ID0gY2hhbm5lbC50YXJnZXQ7XG4gICAgICB2YXIgbmFtZSA9IHRhcmdldC5ub2RlICE9PSB1bmRlZmluZWQgPyB0YXJnZXQubm9kZSA6IHRhcmdldC5pZDsgLy8gTk9URTogdGFyZ2V0LmlkIGlzIGRlcHJlY2F0ZWQuXG4gICAgICB2YXIgaW5wdXQgPVxuICAgICAgICAgICAgYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzW3NhbXBsZXIuaW5wdXRdXG4gICAgICAgICAgICAgIDogc2FtcGxlci5pbnB1dDtcbiAgICAgIHZhciBvdXRwdXQgPVxuICAgICAgICAgICAgYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzW3NhbXBsZXIub3V0cHV0XVxuICAgICAgICAgICAgICA6IHNhbXBsZXIub3V0cHV0O1xuXG4gICAgICBwZW5kaW5nTm9kZXMucHVzaCh0aGlzLmdldERlcGVuZGVuY3koJ25vZGUnLCBuYW1lKSk7XG4gICAgICBwZW5kaW5nSW5wdXRBY2Nlc3NvcnMucHVzaCh0aGlzLmdldERlcGVuZGVuY3koJ2FjY2Vzc29yJywgaW5wdXQpKTtcbiAgICAgIHBlbmRpbmdPdXRwdXRBY2Nlc3NvcnMucHVzaCh0aGlzLmdldERlcGVuZGVuY3koJ2FjY2Vzc29yJywgb3V0cHV0KSk7XG4gICAgICBwZW5kaW5nU2FtcGxlcnMucHVzaChzYW1wbGVyKTtcbiAgICAgIHBlbmRpbmdUYXJnZXRzLnB1c2godGFyZ2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgUHJvbWlzZS5hbGwocGVuZGluZ05vZGVzKSxcbiAgICAgIFByb21pc2UuYWxsKHBlbmRpbmdJbnB1dEFjY2Vzc29ycyksXG4gICAgICBQcm9taXNlLmFsbChwZW5kaW5nT3V0cHV0QWNjZXNzb3JzKSxcbiAgICAgIFByb21pc2UuYWxsKHBlbmRpbmdTYW1wbGVycyksXG4gICAgICBQcm9taXNlLmFsbChwZW5kaW5nVGFyZ2V0cyksXG4gICAgXSkudGhlbihmdW5jdGlvbiAoZGVwZW5kZW5jaWVzKSB7XG4gICAgICB2YXIgbm9kZXMgPSBkZXBlbmRlbmNpZXNbMF07XG4gICAgICB2YXIgaW5wdXRBY2Nlc3NvcnMgPSBkZXBlbmRlbmNpZXNbMV07XG4gICAgICB2YXIgb3V0cHV0QWNjZXNzb3JzID0gZGVwZW5kZW5jaWVzWzJdO1xuICAgICAgdmFyIHNhbXBsZXJzID0gZGVwZW5kZW5jaWVzWzNdO1xuICAgICAgdmFyIHRhcmdldHMgPSBkZXBlbmRlbmNpZXNbNF07XG5cbiAgICAgIHZhciB0cmFja3MgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbm9kZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICB2YXIgaW5wdXRBY2Nlc3NvciA9IGlucHV0QWNjZXNzb3JzW2ldO1xuICAgICAgICB2YXIgb3V0cHV0QWNjZXNzb3IgPSBvdXRwdXRBY2Nlc3NvcnNbaV07XG4gICAgICAgIHZhciBzYW1wbGVyID0gc2FtcGxlcnNbaV07XG4gICAgICAgIHZhciB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuXG4gICAgICAgIGlmIChub2RlID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgIG5vZGUudXBkYXRlTWF0cml4KCk7XG4gICAgICAgIG5vZGUubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cbiAgICAgICAgdmFyIFR5cGVkS2V5ZnJhbWVUcmFjaztcblxuICAgICAgICBzd2l0Y2ggKFBBVEhfUFJPUEVSVElFU1t0YXJnZXQucGF0aF0pIHtcbiAgICAgICAgICBjYXNlIFBBVEhfUFJPUEVSVElFUy53ZWlnaHRzOlxuICAgICAgICAgICAgVHlwZWRLZXlmcmFtZVRyYWNrID0gTnVtYmVyS2V5ZnJhbWVUcmFjaztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBQQVRIX1BST1BFUlRJRVMucm90YXRpb246XG4gICAgICAgICAgICBUeXBlZEtleWZyYW1lVHJhY2sgPSBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBQQVRIX1BST1BFUlRJRVMucG9zaXRpb246XG4gICAgICAgICAgY2FzZSBQQVRIX1BST1BFUlRJRVMuc2NhbGU6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIFR5cGVkS2V5ZnJhbWVUcmFjayA9IFZlY3RvcktleWZyYW1lVHJhY2s7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXROYW1lID0gbm9kZS5uYW1lID8gbm9kZS5uYW1lIDogbm9kZS51dWlkO1xuXG4gICAgICAgIHZhciBpbnRlcnBvbGF0aW9uID1cbiAgICAgICAgICAgICAgc2FtcGxlci5pbnRlcnBvbGF0aW9uICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IElOVEVSUE9MQVRJT05bc2FtcGxlci5pbnRlcnBvbGF0aW9uXVxuICAgICAgICAgICAgICAgIDogSW50ZXJwb2xhdGVMaW5lYXI7XG5cbiAgICAgICAgdmFyIHRhcmdldE5hbWVzID0gW107XG5cbiAgICAgICAgaWYgKFBBVEhfUFJPUEVSVElFU1t0YXJnZXQucGF0aF0gPT09IFBBVEhfUFJPUEVSVElFUy53ZWlnaHRzKSB7XG4gICAgICAgICAgLy8gTm9kZSBtYXkgYmUgYSBHcm91cCAoZ2xURiBtZXNoIHdpdGggc2V2ZXJhbCBwcmltaXRpdmVzKSBvciBhIE1lc2guXG4gICAgICAgICAgbm9kZS50cmF2ZXJzZShmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAob2JqZWN0LmlzTWVzaCA9PT0gdHJ1ZSAmJiBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzKSB7XG4gICAgICAgICAgICAgIHRhcmdldE5hbWVzLnB1c2gob2JqZWN0Lm5hbWUgPyBvYmplY3QubmFtZSA6IG9iamVjdC51dWlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXROYW1lcy5wdXNoKHRhcmdldE5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG91dHB1dEFycmF5ID0gb3V0cHV0QWNjZXNzb3IuYXJyYXk7XG5cbiAgICAgICAgaWYgKG91dHB1dEFjY2Vzc29yLm5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICB2YXIgc2NhbGU7XG5cbiAgICAgICAgICBpZiAob3V0cHV0QXJyYXkuY29uc3RydWN0b3IgPT09IEludDhBcnJheSkge1xuICAgICAgICAgICAgc2NhbGUgPSAxIC8gMTI3O1xuICAgICAgICAgIH0gZWxzZSBpZiAob3V0cHV0QXJyYXkuY29uc3RydWN0b3IgPT09IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgIHNjYWxlID0gMSAvIDI1NTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG91dHB1dEFycmF5LmNvbnN0cnVjdG9yID09IEludDE2QXJyYXkpIHtcbiAgICAgICAgICAgIHNjYWxlID0gMSAvIDMyNzY3O1xuICAgICAgICAgIH0gZWxzZSBpZiAob3V0cHV0QXJyYXkuY29uc3RydWN0b3IgPT09IFVpbnQxNkFycmF5KSB7XG4gICAgICAgICAgICBzY2FsZSA9IDEgLyA2NTUzNTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBvdXRwdXQgYWNjZXNzb3IgY29tcG9uZW50IHR5cGUuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNjYWxlZCA9IG5ldyBGbG9hdDMyQXJyYXkob3V0cHV0QXJyYXkubGVuZ3RoKTtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqbCA9IG91dHB1dEFycmF5Lmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICAgIHNjYWxlZFtqXSA9IG91dHB1dEFycmF5W2pdICogc2NhbGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb3V0cHV0QXJyYXkgPSBzY2FsZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMCwgamwgPSB0YXJnZXROYW1lcy5sZW5ndGg7IGogPCBqbDsgaisrKSB7XG4gICAgICAgICAgdmFyIHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjayhcbiAgICAgICAgICAgIHRhcmdldE5hbWVzW2pdICsgJy4nICsgUEFUSF9QUk9QRVJUSUVTW3RhcmdldC5wYXRoXSxcbiAgICAgICAgICAgIGlucHV0QWNjZXNzb3IuYXJyYXksXG4gICAgICAgICAgICBvdXRwdXRBcnJheSxcbiAgICAgICAgICAgIGludGVycG9sYXRpb25cbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gT3ZlcnJpZGUgaW50ZXJwb2xhdGlvbiB3aXRoIGN1c3RvbSBmYWN0b3J5IG1ldGhvZC5cbiAgICAgICAgICBpZiAoc2FtcGxlci5pbnRlcnBvbGF0aW9uID09PSAnQ1VCSUNTUExJTkUnKSB7XG4gICAgICAgICAgICB0cmFjay5jcmVhdGVJbnRlcnBvbGFudCA9IGZ1bmN0aW9uIEludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZShyZXN1bHQpIHtcbiAgICAgICAgICAgICAgLy8gQSBDVUJJQ1NQTElORSBrZXlmcmFtZSBpbiBnbFRGIGhhcyB0aHJlZSBvdXRwdXQgdmFsdWVzIGZvciBlYWNoIGlucHV0IHZhbHVlLFxuICAgICAgICAgICAgICAvLyByZXByZXNlbnRpbmcgaW5UYW5nZW50LCBzcGxpbmVWZXJ0ZXgsIGFuZCBvdXRUYW5nZW50LiBBcyBhIHJlc3VsdCwgdHJhY2suZ2V0VmFsdWVTaXplKClcbiAgICAgICAgICAgICAgLy8gbXVzdCBiZSBkaXZpZGVkIGJ5IHRocmVlIHRvIGdldCB0aGUgaW50ZXJwb2xhbnQncyBzYW1wbGVTaXplIGFyZ3VtZW50LlxuXG4gICAgICAgICAgICAgIHJldHVybiBuZXcgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQoXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcyxcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcyxcbiAgICAgICAgICAgICAgICB0aGlzLmdldFZhbHVlU2l6ZSgpIC8gMyxcbiAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIE1hcmsgYXMgQ1VCSUNTUExJTkUuIGB0cmFjay5nZXRJbnRlcnBvbGF0aW9uKClgIGRvZXNuJ3Qgc3VwcG9ydCBjdXN0b20gaW50ZXJwb2xhbnRzLlxuICAgICAgICAgICAgdHJhY2suY3JlYXRlSW50ZXJwb2xhbnQuaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyYWNrcy5wdXNoKHRyYWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgbmFtZSA9IGFuaW1hdGlvbkRlZi5uYW1lID8gYW5pbWF0aW9uRGVmLm5hbWUgOiAnYW5pbWF0aW9uXycgKyBhbmltYXRpb25JbmRleDtcblxuICAgICAgcmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKG5hbWUsIHVuZGVmaW5lZCwgdHJhY2tzKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI25vZGVzLWFuZC1oaWVyYXJjaHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG5vZGVJbmRleFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdDNEPn1cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWROb2RlID0gZnVuY3Rpb24gKG5vZGVJbmRleCkge1xuICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgIHZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zO1xuICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuXG4gICAgdmFyIG1lc2hSZWZlcmVuY2VzID0ganNvbi5tZXNoUmVmZXJlbmNlcztcbiAgICB2YXIgbWVzaFVzZXMgPSBqc29uLm1lc2hVc2VzO1xuXG4gICAgdmFyIG5vZGVEZWYgPSBqc29uLm5vZGVzW25vZGVJbmRleF07XG5cbiAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwZW5kaW5nID0gW107XG5cbiAgICAgIGlmIChub2RlRGVmLm1lc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwZW5kaW5nLnB1c2goXG4gICAgICAgICAgcGFyc2VyLmdldERlcGVuZGVuY3koJ21lc2gnLCBub2RlRGVmLm1lc2gpLnRoZW4oZnVuY3Rpb24gKG1lc2gpIHtcbiAgICAgICAgICAgIHZhciBub2RlO1xuXG4gICAgICAgICAgICBpZiAobWVzaFJlZmVyZW5jZXNbbm9kZURlZi5tZXNoXSA+IDEpIHtcbiAgICAgICAgICAgICAgdmFyIGluc3RhbmNlTnVtID0gbWVzaFVzZXNbbm9kZURlZi5tZXNoXSsrO1xuXG4gICAgICAgICAgICAgIG5vZGUgPSBtZXNoLmNsb25lKCk7XG4gICAgICAgICAgICAgIG5vZGUubmFtZSArPSAnX2luc3RhbmNlXycgKyBpbnN0YW5jZU51bTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5vZGUgPSBtZXNoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB3ZWlnaHRzIGFyZSBwcm92aWRlZCBvbiB0aGUgbm9kZSwgb3ZlcnJpZGUgd2VpZ2h0cyBvbiB0aGUgbWVzaC5cbiAgICAgICAgICAgIGlmIChub2RlRGVmLndlaWdodHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBub2RlLnRyYXZlcnNlKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvLmlzTWVzaCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbm9kZURlZi53ZWlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIG8ubW9ycGhUYXJnZXRJbmZsdWVuY2VzW2ldID0gbm9kZURlZi53ZWlnaHRzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlRGVmLmNhbWVyYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBlbmRpbmcucHVzaChwYXJzZXIuZ2V0RGVwZW5kZW5jeSgnY2FtZXJhJywgbm9kZURlZi5jYW1lcmEpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBub2RlRGVmLmV4dGVuc2lvbnMgJiZcbiAgICAgICAgbm9kZURlZi5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTF0gJiZcbiAgICAgICAgbm9kZURlZi5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTF0ubGlnaHQgIT09IHVuZGVmaW5lZFxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmcucHVzaChcbiAgICAgICAgICBwYXJzZXIuZ2V0RGVwZW5kZW5jeSgnbGlnaHQnLCBub2RlRGVmLmV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMXS5saWdodClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpO1xuICAgIH0pKCkudGhlbihmdW5jdGlvbiAob2JqZWN0cykge1xuICAgICAgdmFyIG5vZGU7XG5cbiAgICAgIC8vIC5pc0JvbmUgaXNuJ3QgaW4gZ2xURiBzcGVjLiBTZWUgLm1hcmtEZWZzXG4gICAgICBpZiAobm9kZURlZi5pc0JvbmUgPT09IHRydWUpIHtcbiAgICAgICAgbm9kZSA9IG5ldyBCb25lKCk7XG4gICAgICB9IGVsc2UgaWYgKG9iamVjdHMubGVuZ3RoID4gMSkge1xuICAgICAgICBub2RlID0gbmV3IEdyb3VwKCk7XG4gICAgICB9IGVsc2UgaWYgKG9iamVjdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIG5vZGUgPSBvYmplY3RzWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZSA9IG5ldyBPYmplY3QzRCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAobm9kZSAhPT0gb2JqZWN0c1swXSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICBub2RlLmFkZChvYmplY3RzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobm9kZURlZi5uYW1lKSB7XG4gICAgICAgIG5vZGUudXNlckRhdGEubmFtZSA9IG5vZGVEZWYubmFtZTtcbiAgICAgICAgbm9kZS5uYW1lID0gUHJvcGVydHlCaW5kaW5nLnNhbml0aXplTm9kZU5hbWUobm9kZURlZi5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgYXNzaWduRXh0cmFzVG9Vc2VyRGF0YShub2RlLCBub2RlRGVmKTtcblxuICAgICAgaWYgKG5vZGVEZWYuZXh0ZW5zaW9ucykgYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKGV4dGVuc2lvbnMsIG5vZGUsIG5vZGVEZWYpO1xuXG4gICAgICBpZiAobm9kZURlZi5tYXRyaXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbiAgICAgICAgbWF0cml4LmZyb21BcnJheShub2RlRGVmLm1hdHJpeCk7XG4gICAgICAgIG5vZGUuYXBwbHlNYXRyaXg0KG1hdHJpeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZURlZi50cmFuc2xhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9kZS5wb3NpdGlvbi5mcm9tQXJyYXkobm9kZURlZi50cmFuc2xhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZURlZi5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9kZS5xdWF0ZXJuaW9uLmZyb21BcnJheShub2RlRGVmLnJvdGF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlRGVmLnNjYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub2RlLnNjYWxlLmZyb21BcnJheShub2RlRGVmLnNjYWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI3NjZW5lc1xuICAgKiBAcGFyYW0ge251bWJlcn0gc2NlbmVJbmRleFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEdyb3VwPn1cbiAgICovXG4gIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRTY2VuZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gc2NlbmUgbm9kZSBoaWVyYWNoeSBidWlsZGVyXG5cbiAgICBmdW5jdGlvbiBidWlsZE5vZGVIaWVyYWNoeShub2RlSWQsIHBhcmVudE9iamVjdCwganNvbiwgcGFyc2VyKSB7XG4gICAgICB2YXIgbm9kZURlZiA9IGpzb24ubm9kZXNbbm9kZUlkXTtcblxuICAgICAgcmV0dXJuIHBhcnNlclxuICAgICAgICAuZ2V0RGVwZW5kZW5jeSgnbm9kZScsIG5vZGVJZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICBpZiAobm9kZURlZi5za2luID09PSB1bmRlZmluZWQpIHJldHVybiBub2RlO1xuXG4gICAgICAgICAgLy8gYnVpbGQgc2tlbGV0b24gaGVyZSBhcyB3ZWxsXG5cbiAgICAgICAgICB2YXIgc2tpbkVudHJ5O1xuXG4gICAgICAgICAgcmV0dXJuIHBhcnNlclxuICAgICAgICAgICAgLmdldERlcGVuZGVuY3koJ3NraW4nLCBub2RlRGVmLnNraW4pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc2tpbikge1xuICAgICAgICAgICAgICBza2luRW50cnkgPSBza2luO1xuXG4gICAgICAgICAgICAgIHZhciBwZW5kaW5nSm9pbnRzID0gW107XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gc2tpbkVudHJ5LmpvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZ0pvaW50cy5wdXNoKHBhcnNlci5nZXREZXBlbmRlbmN5KCdub2RlJywgc2tpbkVudHJ5LmpvaW50c1tpXSkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmdKb2ludHMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChqb2ludE5vZGVzKSB7XG4gICAgICAgICAgICAgIG5vZGUudHJhdmVyc2UoZnVuY3Rpb24gKG1lc2gpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW1lc2guaXNNZXNoKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB2YXIgYm9uZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgYm9uZUludmVyc2VzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgamwgPSBqb2ludE5vZGVzLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgIHZhciBqb2ludE5vZGUgPSBqb2ludE5vZGVzW2pdO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoam9pbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvbmVzLnB1c2goam9pbnROb2RlKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ID0gbmV3IE1hdHJpeDQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2tpbkVudHJ5LmludmVyc2VCaW5kTWF0cmljZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgIG1hdC5mcm9tQXJyYXkoc2tpbkVudHJ5LmludmVyc2VCaW5kTWF0cmljZXMuYXJyYXksIGogKiAxNik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBib25lSW52ZXJzZXMucHVzaChtYXQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICdUSFJFRS5HTFRGTG9hZGVyOiBKb2ludCBcIiVzXCIgY291bGQgbm90IGJlIGZvdW5kLicsXG4gICAgICAgICAgICAgICAgICAgICAgc2tpbkVudHJ5LmpvaW50c1tqXVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1lc2guYmluZChuZXcgU2tlbGV0b24oYm9uZXMsIGJvbmVJbnZlcnNlcyksIG1lc2gubWF0cml4V29ybGQpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIC8vIGJ1aWxkIG5vZGUgaGllcmFjaHlcblxuICAgICAgICAgIHBhcmVudE9iamVjdC5hZGQobm9kZSk7XG5cbiAgICAgICAgICB2YXIgcGVuZGluZyA9IFtdO1xuXG4gICAgICAgICAgaWYgKG5vZGVEZWYuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGVEZWYuY2hpbGRyZW47XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgIHBlbmRpbmcucHVzaChidWlsZE5vZGVIaWVyYWNoeShjaGlsZCwgbm9kZSwganNvbiwgcGFyc2VyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbG9hZFNjZW5lKHNjZW5lSW5kZXgpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG4gICAgICB2YXIgc2NlbmVEZWYgPSB0aGlzLmpzb24uc2NlbmVzW3NjZW5lSW5kZXhdO1xuICAgICAgdmFyIHBhcnNlciA9IHRoaXM7XG5cbiAgICAgIC8vIExvYWRlciByZXR1cm5zIEdyb3VwLCBub3QgU2NlbmUuXG4gICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzE4MzQyI2lzc3VlY29tbWVudC01Nzg5ODExNzJcbiAgICAgIHZhciBzY2VuZSA9IG5ldyBHcm91cCgpO1xuICAgICAgaWYgKHNjZW5lRGVmLm5hbWUpIHNjZW5lLm5hbWUgPSBzY2VuZURlZi5uYW1lO1xuXG4gICAgICBhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKHNjZW5lLCBzY2VuZURlZik7XG5cbiAgICAgIGlmIChzY2VuZURlZi5leHRlbnNpb25zKSBhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoZXh0ZW5zaW9ucywgc2NlbmUsIHNjZW5lRGVmKTtcblxuICAgICAgdmFyIG5vZGVJZHMgPSBzY2VuZURlZi5ub2RlcyB8fCBbXTtcblxuICAgICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbm9kZUlkcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIHBlbmRpbmcucHVzaChidWlsZE5vZGVIaWVyYWNoeShub2RlSWRzW2ldLCBzY2VuZSwganNvbiwgcGFyc2VyKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNjZW5lO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSkoKTtcblxuICByZXR1cm4gR0xURkxvYWRlcjtcbn0pKCk7XG5cbmV4cG9ydCB7IEdMVEZMb2FkZXIgfTtcbiIsIi8vIEdsb2JhbCBpbXBvcnRzIC1cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCBUV0VFTiBmcm9tICdAdHdlZW5qcy90d2Vlbi5qcyc7XG5cbi8vIExvY2FsIGltcG9ydHMgLVxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IFJlbmRlcmVyIGZyb20gJy4vY29tcG9uZW50cy9yZW5kZXJlcic7XG5pbXBvcnQgQ2FtZXJhIGZyb20gJy4vY29tcG9uZW50cy9jYW1lcmEnO1xuaW1wb3J0IExpZ2h0IGZyb20gJy4vY29tcG9uZW50cy9saWdodCc7XG5cbi8vIEhlbHBlcnNcbmltcG9ydCBTdGF0cyBmcm9tICcuL2hlbHBlcnMvc3RhdHMnO1xuaW1wb3J0IE1lc2hIZWxwZXIgZnJvbSAnLi9oZWxwZXJzL21lc2hIZWxwZXInO1xuXG4vLyBNb2RlbFxuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi9tb2RlbC90ZXh0dXJlJztcbmltcG9ydCBNb2RlbCBmcm9tICcuL21vZGVsL21vZGVsJztcblxuLy8gTWFuYWdlcnNcbmltcG9ydCBJbnRlcmFjdGlvbiBmcm9tICcuL21hbmFnZXJzL2ludGVyYWN0aW9uJztcblxuLy8gZGF0YVxuaW1wb3J0IENvbmZpZyBmcm9tICcuLy4uL2RhdGEvY29uZmlnJztcbi8vIC0tIEVuZCBvZiBpbXBvcnRzXG5cbi8vIFRoaXMgY2xhc3MgaW5zdGFudGlhdGVzIGFuZCB0aWVzIGFsbCBvZiB0aGUgY29tcG9uZW50cyB0b2dldGhlciwgc3RhcnRzIHRoZSBsb2FkaW5nIHByb2Nlc3MgYW5kIHJlbmRlcnMgdGhlIG1haW4gbG9vcFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpbiB7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgIC8vIFNldCBjb250YWluZXIgcHJvcGVydHkgdG8gY29udGFpbmVyIGVsZW1lbnRcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcblxuICAgIC8vIFN0YXJ0IFRocmVlIGNsb2NrXG4gICAgdGhpcy5jbG9jayA9IG5ldyBUSFJFRS5DbG9jaygpO1xuXG4gICAgLy8gTWFpbiBzY2VuZSBjcmVhdGlvblxuICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICB0aGlzLnNjZW5lLmZvZyA9IG5ldyBUSFJFRS5Gb2dFeHAyKENvbmZpZy5mb2cuY29sb3IsIENvbmZpZy5mb2cubmVhcik7XG5cbiAgICAvLyBHZXQgRGV2aWNlIFBpeGVsIFJhdGlvIGZpcnN0IGZvciByZXRpbmFcbiAgICBpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgQ29uZmlnLmRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIH1cblxuICAgIC8vIE1haW4gcmVuZGVyZXIgY29uc3RydWN0b3JcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKHRoaXMuc2NlbmUsIGNvbnRhaW5lcik7XG5cbiAgICAvLyBDb21wb25lbnRzIGluc3RhbnRpYXRpb25zXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKHRoaXMucmVuZGVyZXIudGhyZWVSZW5kZXJlcik7XG4gICAgdGhpcy5saWdodCA9IG5ldyBMaWdodCh0aGlzLnNjZW5lKTtcblxuICAgIC8vIENyZWF0ZSBhbmQgcGxhY2UgbGlnaHRzIGluIHNjZW5lXG4gICAgY29uc3QgbGlnaHRzID0gWydhbWJpZW50JywgJ2RpcmVjdGlvbmFsJywgJ3BvaW50JywgJ2hlbWknXTtcbiAgICBsaWdodHMuZm9yRWFjaCgobGlnaHQpID0+IHRoaXMubGlnaHQucGxhY2UobGlnaHQpKTtcblxuICAgIC8vIFNldCB1cCByU3RhdHMgaWYgZGV2IGVudmlyb25tZW50XG4gICAgaWYoQ29uZmlnLmlzRGV2ICYmIENvbmZpZy5pc1Nob3dpbmdTdGF0cykge1xuICAgICAgdGhpcy5zdGF0cyA9IG5ldyBTdGF0cyh0aGlzLnJlbmRlcmVyKTtcbiAgICAgIHRoaXMuc3RhdHMuc2V0VXAoKTtcbiAgICB9XG5cbiAgICAvLyBJbnN0YW50aWF0ZSB0ZXh0dXJlIGNsYXNzXG4gICAgdGhpcy50ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuICAgIC8vIFN0YXJ0IGxvYWRpbmcgdGhlIHRleHR1cmVzIGFuZCB0aGVuIGdvIG9uIHRvIGxvYWQgdGhlIG1vZGVsIGFmdGVyIHRoZSB0ZXh0dXJlIFByb21pc2VzIGhhdmUgcmVzb2x2ZWRcbiAgICB0aGlzLnRleHR1cmUubG9hZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5tYW5hZ2VyID0gbmV3IFRIUkVFLkxvYWRpbmdNYW5hZ2VyKCk7XG5cbiAgICAgIC8vIFRleHR1cmVzIGxvYWRlZCwgbG9hZCBtb2RlbFxuICAgICAgdGhpcy5wbGF5ZXJNb2RlbCA9IG5ldyBNb2RlbCh0aGlzLnNjZW5lLCB0aGlzLm1hbmFnZXIsIHRoaXMudGV4dHVyZS50ZXh0dXJlcyk7XG4gICAgICB0aGlzLnBsYXllck1vZGVsLmxvYWQoQ29uZmlnLm1vZGVscy5wbGF5ZXIpO1xuXG4gICAgICAvLyBvblByb2dyZXNzIGNhbGxiYWNrXG4gICAgICB0aGlzLm1hbmFnZXIub25Qcm9ncmVzcyA9IChpdGVtLCBsb2FkZWQsIHRvdGFsKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2l0ZW19OiAke2xvYWRlZH0gJHt0b3RhbH1gKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEFsbCBsb2FkZXJzIGRvbmUgbm93XG4gICAgICB0aGlzLm1hbmFnZXIub25Mb2FkID0gKCkgPT4ge1xuICAgICAgICAvLyBTZXQgdXAgaW50ZXJhY3Rpb24gbWFuYWdlciB3aXRoIHRoZSBhcHAgbm93IHRoYXQgdGhlIG1vZGVsIGlzIGZpbmlzaGVkIGxvYWRpbmdcbiAgICAgICAgbmV3IEludGVyYWN0aW9uKHRoaXMucmVuZGVyZXIudGhyZWVSZW5kZXJlciwgdGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEudGhyZWVDYW1lcmEpO1xuXG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgaXMgbm93IGZ1bGx5IGxvYWRlZFxuICAgICAgICBDb25maWcuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjbG9hZGluZycpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnQgcmVuZGVyIHdoaWNoIGRvZXMgbm90IHdhaXQgZm9yIG1vZGVsIGZ1bGx5IGxvYWRlZFxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIHJTdGF0cyBpZiBEZXZcbiAgICBpZihDb25maWcuaXNEZXYgJiYgQ29uZmlnLmlzU2hvd2luZ1N0YXRzKSB7XG4gICAgICBTdGF0cy5zdGFydCgpO1xuICAgIH1cblxuICAgIC8vIENhbGwgcmVuZGVyIGZ1bmN0aW9uIGFuZCBwYXNzIGluIGNyZWF0ZWQgc2NlbmUgYW5kIGNhbWVyYVxuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhLnRocmVlQ2FtZXJhKTtcblxuICAgIC8vIHJTdGF0cyBoYXMgZmluaXNoZWQgZGV0ZXJtaW5pbmcgcmVuZGVyIGNhbGwgbm93XG4gICAgaWYoQ29uZmlnLmlzRGV2ICYmIENvbmZpZy5pc1Nob3dpbmdTdGF0cykge1xuICAgICAgU3RhdHMuZW5kKCk7XG4gICAgfVxuXG4gICAgLy8gRGVsdGEgdGltZSBpcyBzb21ldGltZXMgbmVlZGVkIGZvciBjZXJ0YWluIHVwZGF0ZXNcbiAgICAvL2NvbnN0IGRlbHRhID0gdGhpcy5jbG9jay5nZXREZWx0YSgpO1xuXG4gICAgLy8gQ2FsbCBhbnkgdmVuZG9yIG9yIG1vZHVsZSBmcmFtZSB1cGRhdGVzIGhlcmVcbiAgICBUV0VFTi51cGRhdGUoKTtcblxuICAgIC8vIFJBRlxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTsgLy8gQmluZCB0aGUgbWFpbiBjbGFzcyBpbnN0ZWFkIG9mIHdpbmRvdyBvYmplY3RcbiAgfVxufVxuIiwiaW1wb3J0IEtleWJvYXJkIGZyb20gJy4uLy4uL3V0aWxzL2tleWJvYXJkJztcbmltcG9ydCBIZWxwZXJzIGZyb20gJy4uLy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIE1hbmFnZXMgYWxsIGlucHV0IGludGVyYWN0aW9uc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJhY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgc2NlbmUsIGNhbWVyYSkge1xuICAgIC8vIFByb3BlcnRpZXNcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcblxuICAgIC8vIEluc3RhbnRpYXRlIGtleWJvYXJkIGhlbHBlclxuICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTtcblxuICAgIC8vIExpc3RlbmVyc1xuICAgIC8vIE1vdXNlIGV2ZW50c1xuICAgIHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZXZlbnQpID0+IEhlbHBlcnMudGhyb3R0bGUodGhpcy5vbk1vdXNlTW92ZShldmVudCksIDI1MCksIGZhbHNlKTtcbiAgICB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIChldmVudCkgPT4gdGhpcy5vbk1vdXNlTGVhdmUoZXZlbnQpLCBmYWxzZSk7XG4gICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIChldmVudCkgPT4gdGhpcy5vbk1vdXNlT3ZlcihldmVudCksIGZhbHNlKTtcblxuICAgIC8vIEtleWJvYXJkIGV2ZW50c1xuICAgIHRoaXMua2V5Ym9hcmQuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBPbmx5IG9uY2VcbiAgICAgIGlmKGV2ZW50LnJlcGVhdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKHRoaXMua2V5Ym9hcmQuZXZlbnRNYXRjaGVzKGV2ZW50LCAnZXNjYXBlJykpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0VzY2FwZSBwcmVzc2VkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBvbk1vdXNlT3ZlcihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBDb25maWcuaXNNb3VzZU92ZXIgPSB0cnVlO1xuICB9XG5cbiAgb25Nb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIENvbmZpZy5pc01vdXNlT3ZlciA9IGZhbHNlO1xuICB9XG5cbiAgb25Nb3VzZU1vdmUoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG5cbiAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgQ29uZmlnLmlzTW91c2VNb3ZpbmcgPSBmYWxzZTtcbiAgICB9LCAyMDApO1xuXG4gICAgQ29uZmlnLmlzTW91c2VNb3ZpbmcgPSB0cnVlO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmltcG9ydCBNYXRlcmlhbCBmcm9tICcuLi9jb21wb25lbnRzL21hdGVyaWFsJztcbmltcG9ydCBIZWxwZXJzIGZyb20gJy4uLy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnlVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzL2J1ZmZlckdlb21ldHJ5VXRpbHMnO1xuaW1wb3J0IHsgR0xURkxvYWRlciB9IGZyb20gJy4uL2xvYWRlcnMvR0xURkxvYWRlcic7XG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL2RhdGEvY29uZmlnJztcblxuLy8gTG9hZHMgaW4gYSBzaW5nbGUgb2JqZWN0IGZyb20gdGhlIGNvbmZpZyBmaWxlXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKHNjZW5lLCBtYW5hZ2VyLCB0ZXh0dXJlcykge1xuICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICB0aGlzLnRleHR1cmVzID0gdGV4dHVyZXM7XG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcblxuICAgIHRoaXMub2JqID0gbnVsbDtcbiAgICB0aGlzLnJlZiA9IG51bGw7XG4gIH1cblxuICBsb2FkKG1vZGVsRGF0YSkge1xuICAgIC8vIE1hbmFnZXIgaXMgcGFzc2VkIGluIHRvIGxvYWRlciB0byBkZXRlcm1pbmUgd2hlbiBsb2FkaW5nIGRvbmUgaW4gbWFpblxuICAgIG5ldyBHTFRGTG9hZGVyKHRoaXMubWFuYWdlcikubG9hZChcbiAgICAgIG1vZGVsRGF0YS5wYXRoLFxuICAgICAgKGdsdGYpID0+IHtcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBnbHRmLnNjZW5lO1xuICAgICAgICBsZXQgbWVzaDtcbiAgICAgICAgaWYgKENvbmZpZy5zaGFkb3cuZW5hYmxlZCkge1xuICAgICAgICAgIHNjZW5lLnRyYXZlcnNlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmlzTWVzaCB8fCBub2RlLmlzTGlnaHQpIG5vZGUuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobm9kZS5pc01lc2gpIHtcbiAgICAgICAgICAgICAgbm9kZS5tYXRlcmlhbC53aXJlZnJhbWUgPSBDb25maWcubWVzaC53aXJlZnJhbWU7XG4gICAgICAgICAgICAgIG1lc2ggPSBub2RlO1xuICAgICAgICAgICAgICBtZXNoLnNjYWxlLm11bHRpcGx5U2NhbGFyKG1vZGVsRGF0YS5zY2FsZSk7XG4gICAgICAgICAgICAgIC8vIG1lc2gucG9zaXRpb24uc2V0KC4uLm1vZGVsRGF0YS5wb3NpdGlvbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub2JqID0gbWVzaDtcblxuICAgICAgICBCdWZmZXJHZW9tZXRyeVV0aWxzLmNvbXB1dGVUYW5nZW50cyhtZXNoLmdlb21ldHJ5KTtcblxuICAgICAgICB2YXIgZ3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcbiAgICAgICAgZ3JvdXAuc2NhbGUubXVsdGlwbHlTY2FsYXIoMC4yNSk7XG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKCBncm91cCApO1xuXG4gICAgICAgIHRoaXMucmVmID0gZ3JvdXA7XG5cbiAgICAgICAgLy8gVG8gbWFrZSBzdXJlIHRoYXQgdGhlIG1hdHJpeFdvcmxkIGlzIHVwIHRvIGRhdGUgZm9yIHRoZSBib3hoZWxwZXJzXG4gICAgICAgIGdyb3VwLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xuICAgICAgICBncm91cC5hZGQobWVzaCk7XG5cbiAgICAgICAgLy8gQWRkIHRvIHNjZW5lXG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKHNjZW5lKTtcbiAgICAgIH0sXG4gICAgICBIZWxwZXJzLmxvZ1Byb2dyZXNzKCksXG4gICAgICBIZWxwZXJzLmxvZ0Vycm9yKClcbiAgICApO1xuICB9XG5cbiAgdW5sb2FkKCkge1xuICAgIHRoaXMuc2NlbmUucmVtb3ZlKHRoaXMucmVmKTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuLy8gUHJvbWlzZSBwb2x5ZmlsbCBmb3IgSUVcbmltcG9ydCB7IFByb21pc2UgfSBmcm9tICdlczYtcHJvbWlzZSc7XG5cbmltcG9ydCBIZWxwZXJzIGZyb20gJy4uLy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIFRoaXMgY2xhc3MgcHJlbG9hZHMgYWxsIHRleHR1cmVzIGluIHRoZSBpbWFnZUZpbGVzIGFycmF5IGluIHRoZSBDb25maWcgdmlhIEVTNiBQcm9taXNlcy5cbi8vIE9uY2UgYWxsIHRleHR1cmVzIGFyZSBkb25lIGxvYWRpbmcgdGhlIG1vZGVsIGl0c2VsZiB3aWxsIGJlIGxvYWRlZCBhZnRlciB0aGUgUHJvbWlzZSAudGhlbigpIGNhbGxiYWNrLlxuLy8gVXNpbmcgcHJvbWlzZXMgdG8gcHJlbG9hZCB0ZXh0dXJlcyBwcmV2ZW50cyBpc3N1ZXMgd2hlbiBhcHBseWluZyB0ZXh0dXJlcyB0byBtYXRlcmlhbHNcbi8vIGJlZm9yZSB0aGUgdGV4dHVyZXMgaGF2ZSBsb2FkZWQuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0dXJlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gUHJvcCB0aGF0IHdpbGwgY29udGFpbiBhbGwgbG9hZGVkIHRleHR1cmVzXG4gICAgdGhpcy50ZXh0dXJlcyA9IHt9O1xuICB9XG5cbiAgbG9hZCgpIHtcbiAgICBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpO1xuICAgIGNvbnN0IG1heEFuaXNvdHJvcHkgPSBDb25maWcubWF4QW5pc290cm9weTtcbiAgICBjb25zdCBpbWFnZUZpbGVzID0gQ29uZmlnLnRleHR1cmUuaW1hZ2VGaWxlcztcbiAgICBjb25zdCBwcm9taXNlQXJyYXkgPSBbXTtcblxuICAgIGxvYWRlci5zZXRQYXRoKENvbmZpZy50ZXh0dXJlLnBhdGgpO1xuXG4gICAgaW1hZ2VGaWxlcy5mb3JFYWNoKGltYWdlRmlsZSA9PiB7XG4gICAgICAvLyBBZGQgYW4gaW5kaXZpZHVhbCBQcm9taXNlIGZvciBlYWNoIGltYWdlIGluIGFycmF5XG4gICAgICBwcm9taXNlQXJyYXkucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIEVhY2ggUHJvbWlzZSB3aWxsIGF0dGVtcHQgdG8gbG9hZCB0aGUgaW1hZ2UgZmlsZVxuICAgICAgICBsb2FkZXIubG9hZChpbWFnZUZpbGUuaW1hZ2UsXG4gICAgICAgICAgLy8gVGhpcyBnZXRzIGNhbGxlZCBvbiBsb2FkIHdpdGggdGhlIGxvYWRlZCB0ZXh0dXJlXG4gICAgICAgICAgdGV4dHVyZSA9PiB7XG4gICAgICAgICAgICB0ZXh0dXJlLmFuaXNvdHJvcHkgPSBtYXhBbmlzb3Ryb3B5O1xuXG4gICAgICAgICAgICAvLyBSZXNvbHZlIFByb21pc2Ugd2l0aCBvYmplY3Qgb2YgdGV4dHVyZSBpZiBpdCBpcyBpbnN0YW5jZSBvZiBUSFJFRS5UZXh0dXJlXG4gICAgICAgICAgICBjb25zdCBtb2RlbE9CSiA9IHt9O1xuICAgICAgICAgICAgbW9kZWxPQkpbaW1hZ2VGaWxlLm5hbWVdID0gdGV4dHVyZTtcbiAgICAgICAgICAgIGlmKG1vZGVsT0JKW2ltYWdlRmlsZS5uYW1lXSBpbnN0YW5jZW9mIFRIUkVFLlRleHR1cmUpXG4gICAgICAgICAgICAgIHJlc29sdmUobW9kZWxPQkopO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgSGVscGVycy5sb2dQcm9ncmVzcygpLFxuICAgICAgICAgIHhociA9PiByZWplY3QobmV3IEVycm9yKHhociArICdBbiBlcnJvciBvY2N1cnJlZCBsb2FkaW5nIHdoaWxlIGxvYWRpbmcgJyArIGltYWdlRmlsZS5pbWFnZSkpXG4gICAgICAgIClcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBhbGwgUHJvbWlzZXMgaW4gYXJyYXkgYW5kIHJldHVybiBhbm90aGVyIFByb21pc2Ugd2hlbiBhbGwgaGF2ZSByZXNvbHZlZCBvciBjb25zb2xlIGxvZyByZWFzb24gd2hlbiBhbnkgcmVqZWN0XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VBcnJheSkudGhlbih0ZXh0dXJlcyA9PiB7XG4gICAgICAvLyBTZXQgdGhlIHRleHR1cmVzIHByb3Agb2JqZWN0IHRvIGhhdmUgbmFtZSBiZSB0aGUgcmVzb2x2ZWQgdGV4dHVyZVxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMudGV4dHVyZXNbT2JqZWN0LmtleXModGV4dHVyZXNbaV0pWzBdXSA9IHRleHR1cmVzW2ldW09iamVjdC5rZXlzKHRleHR1cmVzW2ldKVswXV07XG4gICAgICB9XG4gICAgfSwgcmVhc29uID0+IGNvbnNvbGUubG9nKHJlYXNvbikpO1xuICB9XG59XG4iLCJpbXBvcnQgVFdFRU4gZnJvbSAnQHR3ZWVuanMvdHdlZW4uanMnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnd2VicGFjayc7XG5cbi8vIFRoaXMgb2JqZWN0IGNvbnRhaW5zIHRoZSBzdGF0ZSBvZiB0aGUgYXBwXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzRGV2OiBmYWxzZSxcbiAgaXNTaG93aW5nU3RhdHM6IHRydWUsXG4gIGlzTG9hZGVkOiBmYWxzZSxcbiAgaXNUd2VlbmluZzogZmFsc2UsXG4gIGlzUm90YXRpbmc6IHRydWUsXG4gIGlzTW91c2VNb3Zpbmc6IGZhbHNlLFxuICBpc01vdXNlT3ZlcjogZmFsc2UsXG4gIG1heEFuaXNvdHJvcHk6IDEsXG4gIGRwcjogMSxcbiAgZWFzaW5nOiBUV0VFTi5FYXNpbmcuUXVhZHJhdGljLkluT3V0LFxuICBkdXJhdGlvbjogNTAwLFxuICBtb2RlbHM6IHsgXG4gICAgcGxheWVyOiB7XG4gICAgICBwYXRoOiAnLi9hc3NldHMvbW9kZWxzL3BsYXllclNwYWNlc2hpcC5nbGInLFxuICAgICAgc2NhbGU6IDEsXG4gICAgfSxcbiAgfSxcbiAgdGV4dHVyZToge1xuICAgIHBhdGg6ICcuL2Fzc2V0cy90ZXh0dXJlcy8nLFxuICAgIGltYWdlRmlsZXM6IFtcbiAgICAgIHsgbmFtZTogJ1VWJywgaW1hZ2U6ICdVVl9HcmlkX1NtLmpwZycgfVxuICAgIF1cbiAgfSxcbiAgbWVzaDoge1xuICAgIGVuYWJsZUhlbHBlcjogZmFsc2UsXG4gICAgd2lyZWZyYW1lOiBmYWxzZSxcbiAgICB0cmFuc2x1Y2VudDogdHJ1ZSxcbiAgICBtYXRlcmlhbDoge1xuICAgICAgY29sb3I6IDB4ZmZmZmZmLFxuICAgICAgZW1pc3NpdmU6IDB4ZmZmZmZmXG4gICAgfVxuICB9LFxuICBmb2c6IHtcbiAgICBjb2xvcjogMHhmZmZmZmYsXG4gICAgbmVhcjogMC4wMDA4XG4gIH0sXG4gIGNhbWVyYToge1xuICAgIGZvdjogMzUsXG4gICAgbmVhcjogMixcbiAgICBmYXI6IDEwMDAsXG4gICAgYXNwZWN0OiAxNi85LFxuICAgIHBvc1g6IDAsXG4gICAgcG9zWTogNSxcbiAgICBwb3NaOiAtMTUsXG4gIH0sXG4gIGNvbnRyb2xzOiB7XG4gICAgYXV0b1JvdGF0ZTogZmFsc2UsXG4gICAgYXV0b1JvdGF0ZVNwZWVkOiAtMC41LFxuICAgIHJvdGF0ZVNwZWVkOiAwLjUsXG4gICAgem9vbVNwZWVkOiAwLjgsXG4gICAgbWluRGlzdGFuY2U6IDIwMCxcbiAgICBtYXhEaXN0YW5jZTogNjAwLFxuICAgIG1pblBvbGFyQW5nbGU6IE1hdGguUEkgLyA1LFxuICAgIG1heFBvbGFyQW5nbGU6IE1hdGguUEkgLyAyLFxuICAgIG1pbkF6aW11dGhBbmdsZTogLUluZmluaXR5LFxuICAgIG1heEF6aW11dGhBbmdsZTogSW5maW5pdHksXG4gICAgZW5hYmxlRGFtcGluZzogdHJ1ZSxcbiAgICBkYW1waW5nRmFjdG9yOiAwLjUsXG4gICAgZW5hYmxlWm9vbTogdHJ1ZSxcbiAgICB0YXJnZXQ6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgejogMFxuICAgIH1cbiAgfSxcbiAgYW1iaWVudExpZ2h0OiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBjb2xvcjogMHgxNDE0MTRcbiAgfSxcbiAgZGlyZWN0aW9uYWxMaWdodDoge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgY29sb3I6IDB4ZjBmMGYwLFxuICAgIGludGVuc2l0eTogMC40LFxuICAgIHg6IC03NSxcbiAgICB5OiAyODAsXG4gICAgejogMTUwXG4gIH0sXG4gIHNoYWRvdzoge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgaGVscGVyRW5hYmxlZDogdHJ1ZSxcbiAgICBiaWFzOiAwLFxuICAgIG1hcFdpZHRoOiAyMDQ4LFxuICAgIG1hcEhlaWdodDogMjA0OCxcbiAgICBuZWFyOiAyNTAsXG4gICAgZmFyOiA0MDAsXG4gICAgdG9wOiAxMDAsXG4gICAgcmlnaHQ6IDEwMCxcbiAgICBib3R0b206IC0xMDAsXG4gICAgbGVmdDogLTEwMFxuICB9LFxuICBwb2ludExpZ2h0OiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBjb2xvcjogMHhmZmZmZmYsXG4gICAgaW50ZW5zaXR5OiAwLjM0LFxuICAgIGRpc3RhbmNlOiAxMTUsXG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHo6IDBcbiAgfSxcbiAgaGVtaUxpZ2h0OiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBjb2xvcjogMHhjOGM4YzgsXG4gICAgZ3JvdW5kQ29sb3I6IDB4ZmZmZmZmLFxuICAgIGludGVuc2l0eTogMC41NSxcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgejogMFxuICB9XG59O1xuIiwiLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmltcG9ydCB7XG4gIEJ1ZmZlckF0dHJpYnV0ZSxcbiAgQnVmZmVyR2VvbWV0cnksXG4gIEludGVybGVhdmVkQnVmZmVyLFxuICBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSxcbiAgVHJpYW5nbGVGYW5EcmF3TW9kZSxcbiAgVHJpYW5nbGVTdHJpcERyYXdNb2RlLFxuICBUcmlhbmdsZXNEcmF3TW9kZSxcbiAgVmVjdG9yMixcbiAgVmVjdG9yMyxcbn0gZnJvbSAndGhyZWUnO1xuXG52YXIgQnVmZmVyR2VvbWV0cnlVdGlscyA9IHtcbiAgY29tcHV0ZVRhbmdlbnRzOiBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcbiAgICB2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcbiAgICB2YXIgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cbiAgICAvLyBiYXNlZCBvbiBodHRwOi8vd3d3LnRlcmF0aG9uLmNvbS9jb2RlL3RhbmdlbnQuaHRtbFxuICAgIC8vIChwZXIgdmVydGV4IHRhbmdlbnRzKVxuXG4gICAgaWYgKFxuICAgICAgaW5kZXggPT09IG51bGwgfHxcbiAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgYXR0cmlidXRlcy51diA9PT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLmNvbXB1dGVUYW5nZW50cygpIGZhaWxlZC4gTWlzc2luZyByZXF1aXJlZCBhdHRyaWJ1dGVzIChpbmRleCwgcG9zaXRpb24sIG5vcm1hbCBvciB1diknXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpbmRpY2VzID0gaW5kZXguYXJyYXk7XG4gICAgdmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG4gICAgdmFyIG5vcm1hbHMgPSBhdHRyaWJ1dGVzLm5vcm1hbC5hcnJheTtcbiAgICB2YXIgdXZzID0gYXR0cmlidXRlcy51di5hcnJheTtcblxuICAgIHZhciBuVmVydGljZXMgPSBwb3NpdGlvbnMubGVuZ3RoIC8gMztcblxuICAgIGlmIChhdHRyaWJ1dGVzLnRhbmdlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCd0YW5nZW50JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KDQgKiBuVmVydGljZXMpLCA0KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhbmdlbnRzID0gYXR0cmlidXRlcy50YW5nZW50LmFycmF5O1xuXG4gICAgdmFyIHRhbjEgPSBbXSxcbiAgICAgICAgdGFuMiA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuVmVydGljZXM7IGkrKykge1xuICAgICAgdGFuMVtpXSA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICB0YW4yW2ldID0gbmV3IFZlY3RvcjMoKTtcbiAgICB9XG5cbiAgICB2YXIgdkEgPSBuZXcgVmVjdG9yMygpLFxuICAgICAgICB2QiA9IG5ldyBWZWN0b3IzKCksXG4gICAgICAgIHZDID0gbmV3IFZlY3RvcjMoKSxcbiAgICAgICAgdXZBID0gbmV3IFZlY3RvcjIoKSxcbiAgICAgICAgdXZCID0gbmV3IFZlY3RvcjIoKSxcbiAgICAgICAgdXZDID0gbmV3IFZlY3RvcjIoKSxcbiAgICAgICAgc2RpciA9IG5ldyBWZWN0b3IzKCksXG4gICAgICAgIHRkaXIgPSBuZXcgVmVjdG9yMygpO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlVHJpYW5nbGUoYSwgYiwgYykge1xuICAgICAgdkEuZnJvbUFycmF5KHBvc2l0aW9ucywgYSAqIDMpO1xuICAgICAgdkIuZnJvbUFycmF5KHBvc2l0aW9ucywgYiAqIDMpO1xuICAgICAgdkMuZnJvbUFycmF5KHBvc2l0aW9ucywgYyAqIDMpO1xuXG4gICAgICB1dkEuZnJvbUFycmF5KHV2cywgYSAqIDIpO1xuICAgICAgdXZCLmZyb21BcnJheSh1dnMsIGIgKiAyKTtcbiAgICAgIHV2Qy5mcm9tQXJyYXkodXZzLCBjICogMik7XG5cbiAgICAgIHZCLnN1Yih2QSk7XG4gICAgICB2Qy5zdWIodkEpO1xuXG4gICAgICB1dkIuc3ViKHV2QSk7XG4gICAgICB1dkMuc3ViKHV2QSk7XG5cbiAgICAgIHZhciByID0gMS4wIC8gKHV2Qi54ICogdXZDLnkgLSB1dkMueCAqIHV2Qi55KTtcblxuICAgICAgLy8gc2lsZW50bHkgaWdub3JlIGRlZ2VuZXJhdGUgdXYgdHJpYW5nbGVzIGhhdmluZyBjb2luY2lkZW50IG9yIGNvbGluZWFyIHZlcnRpY2VzXG5cbiAgICAgIGlmICghaXNGaW5pdGUocikpIHJldHVybjtcblxuICAgICAgc2Rpci5jb3B5KHZCKS5tdWx0aXBseVNjYWxhcih1dkMueSkuYWRkU2NhbGVkVmVjdG9yKHZDLCAtdXZCLnkpLm11bHRpcGx5U2NhbGFyKHIpO1xuICAgICAgdGRpci5jb3B5KHZDKS5tdWx0aXBseVNjYWxhcih1dkIueCkuYWRkU2NhbGVkVmVjdG9yKHZCLCAtdXZDLngpLm11bHRpcGx5U2NhbGFyKHIpO1xuXG4gICAgICB0YW4xW2FdLmFkZChzZGlyKTtcbiAgICAgIHRhbjFbYl0uYWRkKHNkaXIpO1xuICAgICAgdGFuMVtjXS5hZGQoc2Rpcik7XG5cbiAgICAgIHRhbjJbYV0uYWRkKHRkaXIpO1xuICAgICAgdGFuMltiXS5hZGQodGRpcik7XG4gICAgICB0YW4yW2NdLmFkZCh0ZGlyKTtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG4gICAgaWYgKGdyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGdyb3VwcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgIGNvdW50OiBpbmRpY2VzLmxlbmd0aCxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgIHZhciBncm91cCA9IGdyb3Vwc1tpXTtcblxuICAgICAgdmFyIHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG4gICAgICB2YXIgY291bnQgPSBncm91cC5jb3VudDtcblxuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzKSB7XG4gICAgICAgIGhhbmRsZVRyaWFuZ2xlKGluZGljZXNbaiArIDBdLCBpbmRpY2VzW2ogKyAxXSwgaW5kaWNlc1tqICsgMl0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0bXAgPSBuZXcgVmVjdG9yMygpLFxuICAgICAgICB0bXAyID0gbmV3IFZlY3RvcjMoKTtcbiAgICB2YXIgbiA9IG5ldyBWZWN0b3IzKCksXG4gICAgICAgIG4yID0gbmV3IFZlY3RvcjMoKTtcbiAgICB2YXIgdywgdCwgdGVzdDtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZVZlcnRleCh2KSB7XG4gICAgICBuLmZyb21BcnJheShub3JtYWxzLCB2ICogMyk7XG4gICAgICBuMi5jb3B5KG4pO1xuXG4gICAgICB0ID0gdGFuMVt2XTtcblxuICAgICAgLy8gR3JhbS1TY2htaWR0IG9ydGhvZ29uYWxpemVcblxuICAgICAgdG1wLmNvcHkodCk7XG4gICAgICB0bXAuc3ViKG4ubXVsdGlwbHlTY2FsYXIobi5kb3QodCkpKS5ub3JtYWxpemUoKTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGhhbmRlZG5lc3NcblxuICAgICAgdG1wMi5jcm9zc1ZlY3RvcnMobjIsIHQpO1xuICAgICAgdGVzdCA9IHRtcDIuZG90KHRhbjJbdl0pO1xuICAgICAgdyA9IHRlc3QgPCAwLjAgPyAtMS4wIDogMS4wO1xuXG4gICAgICB0YW5nZW50c1t2ICogNF0gPSB0bXAueDtcbiAgICAgIHRhbmdlbnRzW3YgKiA0ICsgMV0gPSB0bXAueTtcbiAgICAgIHRhbmdlbnRzW3YgKiA0ICsgMl0gPSB0bXAuejtcbiAgICAgIHRhbmdlbnRzW3YgKiA0ICsgM10gPSB3O1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XG4gICAgICB2YXIgZ3JvdXAgPSBncm91cHNbaV07XG5cbiAgICAgIHZhciBzdGFydCA9IGdyb3VwLnN0YXJ0O1xuICAgICAgdmFyIGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cbiAgICAgIGZvciAodmFyIGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMykge1xuICAgICAgICBoYW5kbGVWZXJ0ZXgoaW5kaWNlc1tqICsgMF0pO1xuICAgICAgICBoYW5kbGVWZXJ0ZXgoaW5kaWNlc1tqICsgMV0pO1xuICAgICAgICBoYW5kbGVWZXJ0ZXgoaW5kaWNlc1tqICsgMl0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtICB7QXJyYXk8QnVmZmVyR2VvbWV0cnk+fSBnZW9tZXRyaWVzXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IHVzZUdyb3Vwc1xuICAgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX1cbiAgICovXG4gIG1lcmdlQnVmZmVyR2VvbWV0cmllczogZnVuY3Rpb24gKGdlb21ldHJpZXMsIHVzZUdyb3Vwcykge1xuICAgIHZhciBpc0luZGV4ZWQgPSBnZW9tZXRyaWVzWzBdLmluZGV4ICE9PSBudWxsO1xuXG4gICAgdmFyIGF0dHJpYnV0ZXNVc2VkID0gbmV3IFNldChPYmplY3Qua2V5cyhnZW9tZXRyaWVzWzBdLmF0dHJpYnV0ZXMpKTtcbiAgICB2YXIgbW9ycGhBdHRyaWJ1dGVzVXNlZCA9IG5ldyBTZXQoT2JqZWN0LmtleXMoZ2VvbWV0cmllc1swXS5tb3JwaEF0dHJpYnV0ZXMpKTtcblxuICAgIHZhciBhdHRyaWJ1dGVzID0ge307XG4gICAgdmFyIG1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXG4gICAgdmFyIG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cmllc1swXS5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuICAgIHZhciBtZXJnZWRHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG4gICAgdmFyIG9mZnNldCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb21ldHJpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBnZW9tZXRyeSA9IGdlb21ldHJpZXNbaV07XG4gICAgICB2YXIgYXR0cmlidXRlc0NvdW50ID0gMDtcblxuICAgICAgLy8gZW5zdXJlIHRoYXQgYWxsIGdlb21ldHJpZXMgYXJlIGluZGV4ZWQsIG9yIG5vbmVcblxuICAgICAgaWYgKGlzSW5kZXhlZCAhPT0gKGdlb21ldHJ5LmluZGV4ICE9PSBudWxsKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzOiAubWVyZ2VCdWZmZXJHZW9tZXRyaWVzKCkgZmFpbGVkIHdpdGggZ2VvbWV0cnkgYXQgaW5kZXggJyArXG4gICAgICAgICAgaSArXG4gICAgICAgICAgJy4gQWxsIGdlb21ldHJpZXMgbXVzdCBoYXZlIGNvbXBhdGlibGUgYXR0cmlidXRlczsgbWFrZSBzdXJlIGluZGV4IGF0dHJpYnV0ZSBleGlzdHMgYW1vbmcgYWxsIGdlb21ldHJpZXMsIG9yIGluIG5vbmUgb2YgdGhlbS4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBnYXRoZXIgYXR0cmlidXRlcywgZXhpdCBlYXJseSBpZiB0aGV5J3JlIGRpZmZlcmVudFxuXG4gICAgICBmb3IgKHZhciBuYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKCFhdHRyaWJ1dGVzVXNlZC5oYXMobmFtZSkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmYWlsZWQgd2l0aCBnZW9tZXRyeSBhdCBpbmRleCAnICtcbiAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgJy4gQWxsIGdlb21ldHJpZXMgbXVzdCBoYXZlIGNvbXBhdGlibGUgYXR0cmlidXRlczsgbWFrZSBzdXJlIFwiJyArXG4gICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICdcIiBhdHRyaWJ1dGUgZXhpc3RzIGFtb25nIGFsbCBnZW9tZXRyaWVzLCBvciBpbiBub25lIG9mIHRoZW0uJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXR0cmlidXRlc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSBhdHRyaWJ1dGVzW25hbWVdID0gW107XG5cbiAgICAgICAgYXR0cmlidXRlc1tuYW1lXS5wdXNoKGdlb21ldHJ5LmF0dHJpYnV0ZXNbbmFtZV0pO1xuXG4gICAgICAgIGF0dHJpYnV0ZXNDb3VudCsrO1xuICAgICAgfVxuXG4gICAgICAvLyBlbnN1cmUgZ2VvbWV0cmllcyBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBhdHRyaWJ1dGVzXG5cbiAgICAgIGlmIChhdHRyaWJ1dGVzQ291bnQgIT09IGF0dHJpYnV0ZXNVc2VkLnNpemUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZhaWxlZCB3aXRoIGdlb21ldHJ5IGF0IGluZGV4ICcgK1xuICAgICAgICAgIGkgK1xuICAgICAgICAgICcuIE1ha2Ugc3VyZSBhbGwgZ2VvbWV0cmllcyBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBhdHRyaWJ1dGVzLidcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIGdhdGhlciBtb3JwaCBhdHRyaWJ1dGVzLCBleGl0IGVhcmx5IGlmIHRoZXkncmUgZGlmZmVyZW50XG5cbiAgICAgIGlmIChtb3JwaFRhcmdldHNSZWxhdGl2ZSAhPT0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZhaWxlZCB3aXRoIGdlb21ldHJ5IGF0IGluZGV4ICcgK1xuICAgICAgICAgIGkgK1xuICAgICAgICAgICcuIC5tb3JwaFRhcmdldHNSZWxhdGl2ZSBtdXN0IGJlIGNvbnNpc3RlbnQgdGhyb3VnaG91dCBhbGwgZ2VvbWV0cmllcy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBuYW1lIGluIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcykge1xuICAgICAgICBpZiAoIW1vcnBoQXR0cmlidXRlc1VzZWQuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzOiAubWVyZ2VCdWZmZXJHZW9tZXRyaWVzKCkgZmFpbGVkIHdpdGggZ2VvbWV0cnkgYXQgaW5kZXggJyArXG4gICAgICAgICAgICBpICtcbiAgICAgICAgICAgICcuICAubW9ycGhBdHRyaWJ1dGVzIG11c3QgYmUgY29uc2lzdGVudCB0aHJvdWdob3V0IGFsbCBnZW9tZXRyaWVzLidcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vcnBoQXR0cmlidXRlc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSBtb3JwaEF0dHJpYnV0ZXNbbmFtZV0gPSBbXTtcblxuICAgICAgICBtb3JwaEF0dHJpYnV0ZXNbbmFtZV0ucHVzaChnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXNbbmFtZV0pO1xuICAgICAgfVxuXG4gICAgICAvLyBnYXRoZXIgLnVzZXJEYXRhXG5cbiAgICAgIG1lcmdlZEdlb21ldHJ5LnVzZXJEYXRhLm1lcmdlZFVzZXJEYXRhID0gbWVyZ2VkR2VvbWV0cnkudXNlckRhdGEubWVyZ2VkVXNlckRhdGEgfHwgW107XG4gICAgICBtZXJnZWRHZW9tZXRyeS51c2VyRGF0YS5tZXJnZWRVc2VyRGF0YS5wdXNoKGdlb21ldHJ5LnVzZXJEYXRhKTtcblxuICAgICAgaWYgKHVzZUdyb3Vwcykge1xuICAgICAgICB2YXIgY291bnQ7XG5cbiAgICAgICAgaWYgKGlzSW5kZXhlZCkge1xuICAgICAgICAgIGNvdW50ID0gZ2VvbWV0cnkuaW5kZXguY291bnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY291bnQgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZhaWxlZCB3aXRoIGdlb21ldHJ5IGF0IGluZGV4ICcgK1xuICAgICAgICAgICAgaSArXG4gICAgICAgICAgICAnLiBUaGUgZ2VvbWV0cnkgbXVzdCBoYXZlIGVpdGhlciBhbiBpbmRleCBvciBhIHBvc2l0aW9uIGF0dHJpYnV0ZSdcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVyZ2VkR2VvbWV0cnkuYWRkR3JvdXAob2Zmc2V0LCBjb3VudCwgaSk7XG5cbiAgICAgICAgb2Zmc2V0ICs9IGNvdW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG1lcmdlIGluZGljZXNcblxuICAgIGlmIChpc0luZGV4ZWQpIHtcbiAgICAgIHZhciBpbmRleE9mZnNldCA9IDA7XG4gICAgICB2YXIgbWVyZ2VkSW5kZXggPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tZXRyaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGdlb21ldHJpZXNbaV0uaW5kZXg7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpbmRleC5jb3VudDsgKytqKSB7XG4gICAgICAgICAgbWVyZ2VkSW5kZXgucHVzaChpbmRleC5nZXRYKGopICsgaW5kZXhPZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXhPZmZzZXQgKz0gZ2VvbWV0cmllc1tpXS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50O1xuICAgICAgfVxuXG4gICAgICBtZXJnZWRHZW9tZXRyeS5zZXRJbmRleChtZXJnZWRJbmRleCk7XG4gICAgfVxuXG4gICAgLy8gbWVyZ2UgYXR0cmlidXRlc1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICB2YXIgbWVyZ2VkQXR0cmlidXRlID0gdGhpcy5tZXJnZUJ1ZmZlckF0dHJpYnV0ZXMoYXR0cmlidXRlc1tuYW1lXSk7XG5cbiAgICAgIGlmICghbWVyZ2VkQXR0cmlidXRlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmYWlsZWQgd2hpbGUgdHJ5aW5nIHRvIG1lcmdlIHRoZSAnICtcbiAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAnIGF0dHJpYnV0ZS4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBtZXJnZWRHZW9tZXRyeS5zZXRBdHRyaWJ1dGUobmFtZSwgbWVyZ2VkQXR0cmlidXRlKTtcbiAgICB9XG5cbiAgICAvLyBtZXJnZSBtb3JwaCBhdHRyaWJ1dGVzXG5cbiAgICBmb3IgKHZhciBuYW1lIGluIG1vcnBoQXR0cmlidXRlcykge1xuICAgICAgdmFyIG51bU1vcnBoVGFyZ2V0cyA9IG1vcnBoQXR0cmlidXRlc1tuYW1lXVswXS5sZW5ndGg7XG5cbiAgICAgIGlmIChudW1Nb3JwaFRhcmdldHMgPT09IDApIGJyZWFrO1xuXG4gICAgICBtZXJnZWRHZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgPSBtZXJnZWRHZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgfHwge307XG4gICAgICBtZXJnZWRHZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXNbbmFtZV0gPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Nb3JwaFRhcmdldHM7ICsraSkge1xuICAgICAgICB2YXIgbW9ycGhBdHRyaWJ1dGVzVG9NZXJnZSA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbW9ycGhBdHRyaWJ1dGVzW25hbWVdLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgbW9ycGhBdHRyaWJ1dGVzVG9NZXJnZS5wdXNoKG1vcnBoQXR0cmlidXRlc1tuYW1lXVtqXVtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWVyZ2VkTW9ycGhBdHRyaWJ1dGUgPSB0aGlzLm1lcmdlQnVmZmVyQXR0cmlidXRlcyhtb3JwaEF0dHJpYnV0ZXNUb01lcmdlKTtcblxuICAgICAgICBpZiAoIW1lcmdlZE1vcnBoQXR0cmlidXRlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzOiAubWVyZ2VCdWZmZXJHZW9tZXRyaWVzKCkgZmFpbGVkIHdoaWxlIHRyeWluZyB0byBtZXJnZSB0aGUgJyArXG4gICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICcgbW9ycGhBdHRyaWJ1dGUuJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBtZXJnZWRHZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXNbbmFtZV0ucHVzaChtZXJnZWRNb3JwaEF0dHJpYnV0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZEdlb21ldHJ5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PEJ1ZmZlckF0dHJpYnV0ZT59IGF0dHJpYnV0ZXNcbiAgICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfVxuICAgKi9cbiAgbWVyZ2VCdWZmZXJBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoYXR0cmlidXRlcykge1xuICAgIHZhciBUeXBlZEFycmF5O1xuICAgIHZhciBpdGVtU2l6ZTtcbiAgICB2YXIgbm9ybWFsaXplZDtcbiAgICB2YXIgYXJyYXlMZW5ndGggPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcblxuICAgICAgaWYgKGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckF0dHJpYnV0ZXMoKSBmYWlsZWQuIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZC4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoVHlwZWRBcnJheSA9PT0gdW5kZWZpbmVkKSBUeXBlZEFycmF5ID0gYXR0cmlidXRlLmFycmF5LmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKFR5cGVkQXJyYXkgIT09IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzOiAubWVyZ2VCdWZmZXJBdHRyaWJ1dGVzKCkgZmFpbGVkLiBCdWZmZXJBdHRyaWJ1dGUuYXJyYXkgbXVzdCBiZSBvZiBjb25zaXN0ZW50IGFycmF5IHR5cGVzIGFjcm9zcyBtYXRjaGluZyBhdHRyaWJ1dGVzLidcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtU2l6ZSA9PT0gdW5kZWZpbmVkKSBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcbiAgICAgIGlmIChpdGVtU2l6ZSAhPT0gYXR0cmlidXRlLml0ZW1TaXplKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckF0dHJpYnV0ZXMoKSBmYWlsZWQuIEJ1ZmZlckF0dHJpYnV0ZS5pdGVtU2l6ZSBtdXN0IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG1hdGNoaW5nIGF0dHJpYnV0ZXMuJ1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vcm1hbGl6ZWQgPT09IHVuZGVmaW5lZCkgbm9ybWFsaXplZCA9IGF0dHJpYnV0ZS5ub3JtYWxpemVkO1xuICAgICAgaWYgKG5vcm1hbGl6ZWQgIT09IGF0dHJpYnV0ZS5ub3JtYWxpemVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckF0dHJpYnV0ZXMoKSBmYWlsZWQuIEJ1ZmZlckF0dHJpYnV0ZS5ub3JtYWxpemVkIG11c3QgYmUgY29uc2lzdGVudCBhY3Jvc3MgbWF0Y2hpbmcgYXR0cmlidXRlcy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBhcnJheUxlbmd0aCArPSBhdHRyaWJ1dGUuYXJyYXkubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBhcnJheSA9IG5ldyBUeXBlZEFycmF5KGFycmF5TGVuZ3RoKTtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7ICsraSkge1xuICAgICAgYXJyYXkuc2V0KGF0dHJpYnV0ZXNbaV0uYXJyYXksIG9mZnNldCk7XG5cbiAgICAgIG9mZnNldCArPSBhdHRyaWJ1dGVzW2ldLmFycmF5Lmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PEJ1ZmZlckF0dHJpYnV0ZT59IGF0dHJpYnV0ZXNcbiAgICogQHJldHVybiB7QXJyYXk8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU+fVxuICAgKi9cbiAgaW50ZXJsZWF2ZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgLy8gSW50ZXJsZWF2ZXMgdGhlIHByb3ZpZGVkIGF0dHJpYnV0ZXMgaW50byBhbiBJbnRlcmxlYXZlZEJ1ZmZlciBhbmQgcmV0dXJuc1xuICAgIC8vIGEgc2V0IG9mIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlcyBmb3IgZWFjaCBhdHRyaWJ1dGVcbiAgICB2YXIgVHlwZWRBcnJheTtcbiAgICB2YXIgYXJyYXlMZW5ndGggPSAwO1xuICAgIHZhciBzdHJpZGUgPSAwO1xuXG4gICAgLy8gY2FsY3VsYXRlIHRoZSB0aGUgbGVuZ3RoIGFuZCB0eXBlIG9mIHRoZSBpbnRlcmxlYXZlZEJ1ZmZlclxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2ldO1xuXG4gICAgICBpZiAoVHlwZWRBcnJheSA9PT0gdW5kZWZpbmVkKSBUeXBlZEFycmF5ID0gYXR0cmlidXRlLmFycmF5LmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKFR5cGVkQXJyYXkgIT09IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRyaWJ1dGVCdWZmZXJzIG9mIGRpZmZlcmVudCB0eXBlcyBjYW5ub3QgYmUgaW50ZXJsZWF2ZWQnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGFycmF5TGVuZ3RoICs9IGF0dHJpYnV0ZS5hcnJheS5sZW5ndGg7XG4gICAgICBzdHJpZGUgKz0gYXR0cmlidXRlLml0ZW1TaXplO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0aGUgc2V0IG9mIGJ1ZmZlciBhdHRyaWJ1dGVzXG4gICAgdmFyIGludGVybGVhdmVkQnVmZmVyID0gbmV3IEludGVybGVhdmVkQnVmZmVyKG5ldyBUeXBlZEFycmF5KGFycmF5TGVuZ3RoKSwgc3RyaWRlKTtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGdldHRlcnMgPSBbJ2dldFgnLCAnZ2V0WScsICdnZXRaJywgJ2dldFcnXTtcbiAgICB2YXIgc2V0dGVycyA9IFsnc2V0WCcsICdzZXRZJywgJ3NldFonLCAnc2V0VyddO1xuXG4gICAgZm9yICh2YXIgaiA9IDAsIGwgPSBhdHRyaWJ1dGVzLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbal07XG4gICAgICB2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG4gICAgICB2YXIgY291bnQgPSBhdHRyaWJ1dGUuY291bnQ7XG4gICAgICB2YXIgaWJhID0gbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKFxuICAgICAgICBpbnRlcmxlYXZlZEJ1ZmZlcixcbiAgICAgICAgaXRlbVNpemUsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgYXR0cmlidXRlLm5vcm1hbGl6ZWRcbiAgICAgICk7XG4gICAgICByZXMucHVzaChpYmEpO1xuXG4gICAgICBvZmZzZXQgKz0gaXRlbVNpemU7XG5cbiAgICAgIC8vIE1vdmUgdGhlIGRhdGEgZm9yIGVhY2ggYXR0cmlidXRlIGludG8gdGhlIG5ldyBpbnRlcmxlYXZlZEJ1ZmZlclxuICAgICAgLy8gYXQgdGhlIGFwcHJvcHJpYXRlIG9mZnNldFxuICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjb3VudDsgYysrKSB7XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlbVNpemU7IGsrKykge1xuICAgICAgICAgIGliYVtzZXR0ZXJzW2tdXShjLCBhdHRyaWJ1dGVbZ2V0dGVyc1trXV0oYykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxCdWZmZXJHZW9tZXRyeT59IGdlb21ldHJ5XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGVzdGltYXRlQnl0ZXNVc2VkOiBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGVzdGltYXRlZCBtZW1vcnkgdXNlZCBieSB0aGlzIGdlb21ldHJ5IGluIGJ5dGVzXG4gICAgLy8gQ2FsY3VsYXRlIHVzaW5nIGl0ZW1TaXplLCBjb3VudCwgYW5kIEJZVEVTX1BFUl9FTEVNRU5UIHRvIGFjY291bnRcbiAgICAvLyBmb3IgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGVzLlxuICAgIHZhciBtZW0gPSAwO1xuICAgIGZvciAodmFyIG5hbWUgaW4gZ2VvbWV0cnkuYXR0cmlidXRlcykge1xuICAgICAgdmFyIGF0dHIgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICBtZW0gKz0gYXR0ci5jb3VudCAqIGF0dHIuaXRlbVNpemUgKiBhdHRyLmFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgIH1cblxuICAgIHZhciBpbmRpY2VzID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcbiAgICBtZW0gKz0gaW5kaWNlcyA/IGluZGljZXMuY291bnQgKiBpbmRpY2VzLml0ZW1TaXplICogaW5kaWNlcy5hcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IDA7XG4gICAgcmV0dXJuIG1lbTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvbGVyYW5jZVxuICAgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeT59XG4gICAqL1xuICBtZXJnZVZlcnRpY2VzOiBmdW5jdGlvbiAoZ2VvbWV0cnksIHRvbGVyYW5jZSA9IDFlLTQpIHtcbiAgICB0b2xlcmFuY2UgPSBNYXRoLm1heCh0b2xlcmFuY2UsIE51bWJlci5FUFNJTE9OKTtcblxuICAgIC8vIEdlbmVyYXRlIGFuIGluZGV4IGJ1ZmZlciBpZiB0aGUgZ2VvbWV0cnkgZG9lc24ndCBoYXZlIG9uZSwgb3Igb3B0aW1pemUgaXRcbiAgICAvLyBpZiBpdCdzIGFscmVhZHkgYXZhaWxhYmxlLlxuICAgIHZhciBoYXNoVG9JbmRleCA9IHt9O1xuICAgIHZhciBpbmRpY2VzID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcbiAgICB2YXIgcG9zaXRpb25zID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdwb3NpdGlvbicpO1xuICAgIHZhciB2ZXJ0ZXhDb3VudCA9IGluZGljZXMgPyBpbmRpY2VzLmNvdW50IDogcG9zaXRpb25zLmNvdW50O1xuXG4gICAgLy8gbmV4dCB2YWx1ZSBmb3IgdHJpYW5nbGUgaW5kaWNlc1xuICAgIHZhciBuZXh0SW5kZXggPSAwO1xuXG4gICAgLy8gYXR0cmlidXRlcyBhbmQgbmV3IGF0dHJpYnV0ZSBhcnJheXNcbiAgICB2YXIgYXR0cmlidXRlTmFtZXMgPSBPYmplY3Qua2V5cyhnZW9tZXRyeS5hdHRyaWJ1dGVzKTtcbiAgICB2YXIgYXR0ckFycmF5cyA9IHt9O1xuICAgIHZhciBtb3JwaEF0dHJzQXJyYXlzID0ge307XG4gICAgdmFyIG5ld0luZGljZXMgPSBbXTtcbiAgICB2YXIgZ2V0dGVycyA9IFsnZ2V0WCcsICdnZXRZJywgJ2dldFonLCAnZ2V0VyddO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgYXJyYXlzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGVOYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZXNbaV07XG5cbiAgICAgIGF0dHJBcnJheXNbbmFtZV0gPSBbXTtcblxuICAgICAgdmFyIG1vcnBoQXR0ciA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1tuYW1lXTtcbiAgICAgIGlmIChtb3JwaEF0dHIpIHtcbiAgICAgICAgbW9ycGhBdHRyc0FycmF5c1tuYW1lXSA9IG5ldyBBcnJheShtb3JwaEF0dHIubGVuZ3RoKS5maWxsKCkubWFwKCgpID0+IFtdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IHRoZSBlcnJvciB0b2xlcmFuY2UgdG8gYW4gYW1vdW50IG9mIGRlY2ltYWwgcGxhY2VzIHRvIHRydW5jYXRlIHRvXG4gICAgdmFyIGRlY2ltYWxTaGlmdCA9IE1hdGgubG9nMTAoMSAvIHRvbGVyYW5jZSk7XG4gICAgdmFyIHNoaWZ0TXVsdGlwbGllciA9IE1hdGgucG93KDEwLCBkZWNpbWFsU2hpZnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7IGkrKykge1xuICAgICAgdmFyIGluZGV4ID0gaW5kaWNlcyA/IGluZGljZXMuZ2V0WChpKSA6IGk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGEgaGFzaCBmb3IgdGhlIHZlcnRleCBhdHRyaWJ1dGVzIGF0IHRoZSBjdXJyZW50IGluZGV4ICdpJ1xuICAgICAgdmFyIGhhc2ggPSAnJztcbiAgICAgIGZvciAodmFyIGogPSAwLCBsID0gYXR0cmlidXRlTmFtZXMubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZXNbal07XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHZhciBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZW1TaXplOyBrKyspIHtcbiAgICAgICAgICAvLyBkb3VibGUgdGlsZGUgdHJ1bmNhdGVzIHRoZSBkZWNpbWFsIHZhbHVlXG4gICAgICAgICAgaGFzaCArPSBgJHt+fihhdHRyaWJ1dGVbZ2V0dGVyc1trXV0oaW5kZXgpICogc2hpZnRNdWx0aXBsaWVyKX0sYDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBZGQgYW5vdGhlciByZWZlcmVuY2UgdG8gdGhlIHZlcnRleCBpZiBpdCdzIGFscmVhZHlcbiAgICAgIC8vIHVzZWQgYnkgYW5vdGhlciBpbmRleFxuICAgICAgaWYgKGhhc2ggaW4gaGFzaFRvSW5kZXgpIHtcbiAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGhhc2hUb0luZGV4W2hhc2hdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvcHkgZGF0YSB0byB0aGUgbmV3IGluZGV4IGluIHRoZSBhdHRyaWJ1dGUgYXJyYXlzXG4gICAgICAgIGZvciAodmFyIGogPSAwLCBsID0gYXR0cmlidXRlTmFtZXMubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgICAgICAgdmFyIG5hbWUgPSBhdHRyaWJ1dGVOYW1lc1tqXTtcbiAgICAgICAgICB2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgIHZhciBtb3JwaEF0dHIgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgICAgdmFyIGl0ZW1TaXplID0gYXR0cmlidXRlLml0ZW1TaXplO1xuICAgICAgICAgIHZhciBuZXdhcnJheSA9IGF0dHJBcnJheXNbbmFtZV07XG4gICAgICAgICAgdmFyIG5ld01vcnBoQXJyYXlzID0gbW9ycGhBdHRyc0FycmF5c1tuYW1lXTtcblxuICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlbVNpemU7IGsrKykge1xuICAgICAgICAgICAgdmFyIGdldHRlckZ1bmMgPSBnZXR0ZXJzW2tdO1xuICAgICAgICAgICAgbmV3YXJyYXkucHVzaChhdHRyaWJ1dGVbZ2V0dGVyRnVuY10oaW5kZXgpKTtcblxuICAgICAgICAgICAgaWYgKG1vcnBoQXR0cikge1xuICAgICAgICAgICAgICBmb3IgKHZhciBtID0gMCwgbWwgPSBtb3JwaEF0dHIubGVuZ3RoOyBtIDwgbWw7IG0rKykge1xuICAgICAgICAgICAgICAgIG5ld01vcnBoQXJyYXlzW21dLnB1c2gobW9ycGhBdHRyW21dW2dldHRlckZ1bmNdKGluZGV4KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBoYXNoVG9JbmRleFtoYXNoXSA9IG5leHRJbmRleDtcbiAgICAgICAgbmV3SW5kaWNlcy5wdXNoKG5leHRJbmRleCk7XG4gICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIHR5cGVkIGFycmF5cyBmcm9tIG5ldyBhdHRyaWJ1dGUgYXJyYXlzIGFuZCB1cGRhdGVcbiAgICAvLyB0aGUgYXR0cmlidXRlQnVmZmVyc1xuICAgIGNvbnN0IHJlc3VsdCA9IGdlb21ldHJ5LmNsb25lKCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGVOYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZXNbaV07XG4gICAgICB2YXIgb2xkQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG4gICAgICB2YXIgYnVmZmVyID0gbmV3IG9sZEF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3RvcihhdHRyQXJyYXlzW25hbWVdKTtcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKGJ1ZmZlciwgb2xkQXR0cmlidXRlLml0ZW1TaXplLCBvbGRBdHRyaWJ1dGUubm9ybWFsaXplZCk7XG5cbiAgICAgIHJlc3VsdC5zZXRBdHRyaWJ1dGUobmFtZSwgYXR0cmlidXRlKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBhdHRyaWJ1dGUgYXJyYXlzXG4gICAgICBpZiAobmFtZSBpbiBtb3JwaEF0dHJzQXJyYXlzKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbW9ycGhBdHRyc0FycmF5c1tuYW1lXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBvbGRNb3JwaEF0dHJpYnV0ZSA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1tuYW1lXVtqXTtcblxuICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgb2xkTW9ycGhBdHRyaWJ1dGUuYXJyYXkuY29uc3RydWN0b3IobW9ycGhBdHRyc0FycmF5c1tuYW1lXVtqXSk7XG4gICAgICAgICAgdmFyIG1vcnBoQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZShcbiAgICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICAgIG9sZE1vcnBoQXR0cmlidXRlLml0ZW1TaXplLFxuICAgICAgICAgICAgb2xkTW9ycGhBdHRyaWJ1dGUubm9ybWFsaXplZFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzdWx0Lm1vcnBoQXR0cmlidXRlc1tuYW1lXVtqXSA9IG1vcnBoQXR0cmlidXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaW5kaWNlc1xuXG4gICAgcmVzdWx0LnNldEluZGV4KG5ld0luZGljZXMpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnlcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRyYXdNb2RlXG4gICAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5Pn1cbiAgICovXG4gIHRvVHJpYW5nbGVzRHJhd01vZGU6IGZ1bmN0aW9uIChnZW9tZXRyeSwgZHJhd01vZGUpIHtcbiAgICBpZiAoZHJhd01vZGUgPT09IFRyaWFuZ2xlc0RyYXdNb2RlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKTogR2VvbWV0cnkgYWxyZWFkeSBkZWZpbmVkIGFzIHRyaWFuZ2xlcy4nXG4gICAgICApO1xuICAgICAgcmV0dXJuIGdlb21ldHJ5O1xuICAgIH1cblxuICAgIGlmIChkcmF3TW9kZSA9PT0gVHJpYW5nbGVGYW5EcmF3TW9kZSB8fCBkcmF3TW9kZSA9PT0gVHJpYW5nbGVTdHJpcERyYXdNb2RlKSB7XG4gICAgICB2YXIgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xuXG4gICAgICAvLyBnZW5lcmF0ZSBpbmRleCBpZiBub3QgcHJlc2VudFxuXG4gICAgICBpZiAoaW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgdmFyIGluZGljZXMgPSBbXTtcblxuICAgICAgICB2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJyk7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc2l0aW9uLmNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGluZGljZXMucHVzaChpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnZW9tZXRyeS5zZXRJbmRleChpbmRpY2VzKTtcbiAgICAgICAgICBpbmRleCA9IGdlb21ldHJ5LmdldEluZGV4KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKTogVW5kZWZpbmVkIHBvc2l0aW9uIGF0dHJpYnV0ZS4gUHJvY2Vzc2luZyBub3QgcG9zc2libGUuJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGdlb21ldHJ5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vXG5cbiAgICAgIHZhciBudW1iZXJPZlRyaWFuZ2xlcyA9IGluZGV4LmNvdW50IC0gMjtcbiAgICAgIHZhciBuZXdJbmRpY2VzID0gW107XG5cbiAgICAgIGlmIChkcmF3TW9kZSA9PT0gVHJpYW5nbGVGYW5EcmF3TW9kZSkge1xuICAgICAgICAvLyBnbC5UUklBTkdMRV9GQU5cblxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBudW1iZXJPZlRyaWFuZ2xlczsgaSsrKSB7XG4gICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoMCkpO1xuICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkpKTtcbiAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpICsgMSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnbC5UUklBTkdMRV9TVFJJUFxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZUcmlhbmdsZXM7IGkrKykge1xuICAgICAgICAgIGlmIChpICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSkpO1xuICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSArIDEpKTtcbiAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAyKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAyKSk7XG4gICAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpICsgMSkpO1xuICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobmV3SW5kaWNlcy5sZW5ndGggLyAzICE9PSBudW1iZXJPZlRyaWFuZ2xlcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKTogVW5hYmxlIHRvIGdlbmVyYXRlIGNvcnJlY3QgYW1vdW50IG9mIHRyaWFuZ2xlcy4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIGJ1aWxkIGZpbmFsIGdlb21ldHJ5XG5cbiAgICAgIHZhciBuZXdHZW9tZXRyeSA9IGdlb21ldHJ5LmNsb25lKCk7XG4gICAgICBuZXdHZW9tZXRyeS5zZXRJbmRleChuZXdJbmRpY2VzKTtcbiAgICAgIG5ld0dlb21ldHJ5LmNsZWFyR3JvdXBzKCk7XG5cbiAgICAgIHJldHVybiBuZXdHZW9tZXRyeTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmVycm9yKCdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKTogVW5rbm93biBkcmF3IG1vZGU6JywgZHJhd01vZGUpO1xuICAgIHJldHVybiBnZW9tZXRyeTtcbiAgfSxcbn07XG5cbmV4cG9ydCB7IEJ1ZmZlckdlb21ldHJ5VXRpbHMgfTtcbiIsIi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXIuZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY2FudmFzOiAhIXdpbmRvdy5DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIHdlYmdsOiAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgICAgcmV0dXJuICEhKHdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHQgJiYgKGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKSkpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSkoKSxcblxuICB3b3JrZXJzOiAhIXdpbmRvdy5Xb3JrZXIsXG4gIGZpbGVhcGk6IHdpbmRvdy5GaWxlICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5GaWxlTGlzdCAmJiB3aW5kb3cuQmxvYixcblxuICBnZXRXZWJHTEVycm9yTWVzc2FnZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmlkID0gJ3dlYmdsLWVycm9yLW1lc3NhZ2UnO1xuICAgIGVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9ICdtb25vc3BhY2UnO1xuICAgIGVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSAnMTNweCc7XG4gICAgZWxlbWVudC5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XG4gICAgZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSAnI2ZmZic7XG4gICAgZWxlbWVudC5zdHlsZS5jb2xvciA9ICcjMDAwJztcbiAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMS41ZW0nO1xuICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSAnNDAwcHgnO1xuICAgIGVsZW1lbnQuc3R5bGUubWFyZ2luID0gJzVlbSBhdXRvIDAnO1xuXG4gICAgaWYoIXRoaXMud2ViZ2wpIHtcbiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gd2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCA/IFtcbiAgICAgICAgJ1lvdXIgZ3JhcGhpY3MgY2FyZCBkb2VzIG5vdCBzZWVtIHRvIHN1cHBvcnQgPGEgaHJlZj1cImh0dHA6Ly9raHJvbm9zLm9yZy93ZWJnbC93aWtpL0dldHRpbmdfYV9XZWJHTF9JbXBsZW1lbnRhdGlvblwiIHN0eWxlPVwiY29sb3I6IzAwMDAwMFwiPldlYkdMPC9hPi48YnIgLz4nLFxuICAgICAgICAnRmluZCBvdXQgaG93IHRvIGdldCBpdCA8YSBocmVmPVwiaHR0cDovL2dldC53ZWJnbC5vcmcvXCIgc3R5bGU9XCJjb2xvcjojMDAwMDAwXCI+aGVyZTwvYT4uJ1xuICAgICAgXS5qb2luKCdcXG4nKSA6IFtcbiAgICAgICAgJ1lvdXIgYnJvd3NlciBkb2VzIG5vdCBzZWVtIHRvIHN1cHBvcnQgPGEgaHJlZj1cImh0dHA6Ly9raHJvbm9zLm9yZy93ZWJnbC93aWtpL0dldHRpbmdfYV9XZWJHTF9JbXBsZW1lbnRhdGlvblwiIHN0eWxlPVwiY29sb3I6IzAwMDAwMFwiPldlYkdMPC9hPi48YnIvPicsXG4gICAgICAgICdGaW5kIG91dCBob3cgdG8gZ2V0IGl0IDxhIGhyZWY9XCJodHRwOi8vZ2V0LndlYmdsLm9yZy9cIiBzdHlsZT1cImNvbG9yOiMwMDAwMDBcIj5oZXJlPC9hPi4nXG4gICAgICBdLmpvaW4oJ1xcbicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50O1xuICB9LFxuXG4gIGFkZEdldFdlYkdMTWVzc2FnZTogZnVuY3Rpb24ocGFyYW1ldGVycykge1xuICAgIHZhciBwYXJlbnQsIGlkLCBlbGVtZW50O1xuXG4gICAgcGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XG5cbiAgICBwYXJlbnQgPSBwYXJhbWV0ZXJzLnBhcmVudCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wYXJlbnQgOiBkb2N1bWVudC5ib2R5O1xuICAgIGlkID0gcGFyYW1ldGVycy5pZCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5pZCA6ICdvbGRpZSc7XG5cbiAgICBlbGVtZW50ID0gdGhpcy5nZXRXZWJHTEVycm9yTWVzc2FnZSgpO1xuICAgIGVsZW1lbnQuaWQgPSBpZDtcblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfVxufTtcbiIsIi8vIFByb3ZpZGVzIHNpbXBsZSBzdGF0aWMgZnVuY3Rpb25zIHRoYXQgYXJlIHVzZWQgbXVsdGlwbGUgdGltZXMgaW4gdGhlIGFwcFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVscGVycyB7XG4gIHN0YXRpYyB0aHJvdHRsZShmbiwgdGhyZXNoaG9sZCwgc2NvcGUpIHtcbiAgICB0aHJlc2hob2xkIHx8ICh0aHJlc2hob2xkID0gMjUwKTtcbiAgICBsZXQgbGFzdCwgZGVmZXJUaW1lcjtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBzY29wZSB8fCB0aGlzO1xuXG4gICAgICBjb25zdCBub3cgID0gK25ldyBEYXRlLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICBpZihsYXN0ICYmIG5vdyA8IGxhc3QgKyB0aHJlc2hob2xkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChkZWZlclRpbWVyKTtcbiAgICAgICAgZGVmZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfSwgdGhyZXNoaG9sZCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBsb2dQcm9ncmVzcygpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oeGhyKSB7XG4gICAgICBpZih4aHIubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICBjb25zdCBwZXJjZW50Q29tcGxldGUgPSB4aHIubG9hZGVkIC8geGhyLnRvdGFsICogMTAwO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKE1hdGgucm91bmQocGVyY2VudENvbXBsZXRlLCAyKSArICclIGRvd25sb2FkZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgbG9nRXJyb3IoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHhocikge1xuICAgICAgY29uc29sZS5lcnJvcih4aHIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBoYW5kbGVDb2xvckNoYW5nZShjb2xvcikge1xuICAgIHJldHVybiAodmFsdWUpID0+IHtcbiAgICAgIGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCcjJywgJzB4Jyk7XG4gICAgICB9XG5cbiAgICAgIGNvbG9yLnNldEhleCh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGUobWVzaCkge1xuICAgIHRoaXMubmVlZHNVcGRhdGUobWVzaC5tYXRlcmlhbCwgbWVzaC5nZW9tZXRyeSk7XG4gIH1cblxuICBzdGF0aWMgbmVlZHNVcGRhdGUobWF0ZXJpYWwsIGdlb21ldHJ5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgbWF0ZXJpYWwuc2hhZGluZyA9ICttYXRlcmlhbC5zaGFkaW5nOyAvL0Vuc3VyZSBudW1iZXJcbiAgICAgIG1hdGVyaWFsLnZlcnRleENvbG9ycyA9ICttYXRlcmlhbC52ZXJ0ZXhDb2xvcnM7IC8vRW5zdXJlIG51bWJlclxuICAgICAgbWF0ZXJpYWwuc2lkZSA9ICttYXRlcmlhbC5zaWRlOyAvL0Vuc3VyZSBudW1iZXJcbiAgICAgIG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgICBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgICBnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZVRleHR1cmUobWF0ZXJpYWwsIG1hdGVyaWFsS2V5LCB0ZXh0dXJlcykge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIG1hdGVyaWFsW21hdGVyaWFsS2V5XSA9IHRleHR1cmVzW2tleV07XG4gICAgICBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfTtcbiAgfVxufVxuIiwiY29uc3QgQUxJQVMgPSB7XG4gICdsZWZ0J1x0XHQ6IDM3LFxuICAndXAnXHRcdCAgOiAzOCxcbiAgJ3JpZ2h0J1x0XHQ6IDM5LFxuICAnZG93bidcdFx0OiA0MCxcbiAgJ3NwYWNlJ1x0XHQ6IDMyLFxuICAndGFiJ1x0XHQgIDogOSxcbiAgJ2VzY2FwZSdcdDogMjdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtleWJvYXJkIHtcbiAgY29uc3RydWN0b3IoZG9tRWxlbWVudCkge1xuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgdGhpcy5rZXlDb2RlcyA9IHt9O1xuXG4gICAgLy8gYmluZCBrZXlFdmVudHNcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4gdGhpcy5vbktleUNoYW5nZShldmVudCksIGZhbHNlKTtcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHRoaXMub25LZXlDaGFuZ2UoZXZlbnQpLCBmYWxzZSk7XG5cbiAgICAvLyBiaW5kIHdpbmRvdyBibHVyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB0aGlzLm9uQmx1ciwgZmFsc2UpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4gdGhpcy5vbktleUNoYW5nZShldmVudCksIGZhbHNlKTtcbiAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHRoaXMub25LZXlDaGFuZ2UoZXZlbnQpLCBmYWxzZSk7XG5cbiAgICAvLyB1bmJpbmQgd2luZG93IGJsdXIgZXZlbnRcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHRoaXMub25CbHVyLCBmYWxzZSk7XG4gIH1cblxuICBvbkJsdXIoKSB7XG4gICAgZm9yKGNvbnN0IHByb3AgaW4gdGhpcy5rZXlDb2RlcylcbiAgICAgIHRoaXMua2V5Q29kZXNbcHJvcF0gPSBmYWxzZTtcbiAgfVxuXG4gIG9uS2V5Q2hhbmdlKGV2ZW50KSB7XG4gICAgLy8gbG9nIHRvIGRlYnVnXG4gICAgLy9jb25zb2xlLmxvZygnb25LZXlDaGFuZ2UnLCBldmVudCwgZXZlbnQua2V5Q29kZSwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmN0cmxLZXksIGV2ZW50LmFsdEtleSwgZXZlbnQubWV0YUtleSlcblxuICAgIC8vIHVwZGF0ZSB0aGlzLmtleUNvZGVzXG4gICAgY29uc3Qga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gICAgdGhpcy5rZXlDb2Rlc1trZXlDb2RlXSA9IGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJztcbiAgfVxuXG4gIHByZXNzZWQoa2V5RGVzYykge1xuICAgIGNvbnN0IGtleXMgPSBrZXlEZXNjLnNwbGl0KCcrJyk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBsZXQgcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgaWYoT2JqZWN0LmtleXMoQUxJQVMpLmluZGV4T2Yoa2V5KSAhPSAtMSkge1xuICAgICAgICBwcmVzc2VkID0gdGhpcy5rZXlDb2Rlc1tBTElBU1trZXldXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXNzZWQgPSB0aGlzLmtleUNvZGVzW2tleS50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCldO1xuICAgICAgfVxuICAgICAgaWYoIXByZXNzZWQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGV2ZW50TWF0Y2hlcyhldmVudCwga2V5RGVzYykge1xuICAgIGNvbnN0IGFsaWFzZXMgPSBBTElBUztcbiAgICBjb25zdCBhbGlhc0tleXMgPSBPYmplY3Qua2V5cyhhbGlhc2VzKTtcbiAgICBjb25zdCBrZXlzID0ga2V5RGVzYy5zcGxpdCgnKycpO1xuICAgIC8vIGxvZyB0byBkZWJ1Z1xuICAgIC8vIGNvbnNvbGUubG9nKCdldmVudE1hdGNoZXMnLCBldmVudCwgZXZlbnQua2V5Q29kZSwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmN0cmxLZXksIGV2ZW50LmFsdEtleSwgZXZlbnQubWV0YUtleSlcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGxldCBwcmVzc2VkID0gZmFsc2U7XG4gICAgICBpZihrZXkgPT09ICdzaGlmdCcpIHtcbiAgICAgICAgcHJlc3NlZCA9IGV2ZW50LnNoaWZ0S2V5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmKGtleSA9PT0gJ2N0cmwnKSB7XG4gICAgICAgIHByZXNzZWQgPSBldmVudC5jdHJsS2V5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmKGtleSA9PT0gJ2FsdCcpIHtcbiAgICAgICAgcHJlc3NlZCA9IGV2ZW50LmFsdEtleSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZihrZXkgPT09ICdtZXRhJykge1xuICAgICAgICBwcmVzc2VkID0gZXZlbnQubWV0YUtleSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZihhbGlhc0tleXMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICBwcmVzc2VkID0gZXZlbnQua2V5Q29kZSA9PT0gYWxpYXNlc1trZXldO1xuICAgICAgfSBlbHNlIGlmKGV2ZW50LmtleUNvZGUgPT09IGtleS50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgcHJlc3NlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZighcHJlc3NlZClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0dGhyb3cgZTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9ICgpID0+IChbXSk7XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IFwiLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvYmFzZSBzeW5jIHJlY3Vyc2l2ZVwiO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlDb250ZXh0OyIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHR0aHJvdyBlO1xufVxud2VicGFja0VtcHR5Q29udGV4dC5rZXlzID0gKCkgPT4gKFtdKTtcbndlYnBhY2tFbXB0eUNvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG53ZWJwYWNrRW1wdHlDb250ZXh0LmlkID0gXCIuL25vZGVfbW9kdWxlcy9qZXN0LXdvcmtlci9idWlsZC93b3JrZXJzIHN5bmMgcmVjdXJzaXZlXCI7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7IiwiZnVuY3Rpb24gd2VicGFja0VtcHR5Q29udGV4dChyZXEpIHtcblx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdHRocm93IGU7XG59XG53ZWJwYWNrRW1wdHlDb250ZXh0LmtleXMgPSAoKSA9PiAoW10pO1xud2VicGFja0VtcHR5Q29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5Q29udGV4dDtcbndlYnBhY2tFbXB0eUNvbnRleHQuaWQgPSBcIi4vbm9kZV9tb2R1bGVzL2plc3Qtd29ya2VyL2J1aWxkIHN5bmMgcmVjdXJzaXZlXCI7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7IiwiZnVuY3Rpb24gd2VicGFja0VtcHR5Q29udGV4dChyZXEpIHtcblx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdHRocm93IGU7XG59XG53ZWJwYWNrRW1wdHlDb250ZXh0LmtleXMgPSAoKSA9PiAoW10pO1xud2VicGFja0VtcHR5Q29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5Q29udGV4dDtcbndlYnBhY2tFbXB0eUNvbnRleHQuaWQgPSBcIi4vbm9kZV9tb2R1bGVzL2xvYWRlci1ydW5uZXIvbGliIHN5bmMgcmVjdXJzaXZlXCI7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7IiwiZnVuY3Rpb24gd2VicGFja0VtcHR5Q29udGV4dChyZXEpIHtcblx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdHRocm93IGU7XG59XG53ZWJwYWNrRW1wdHlDb250ZXh0LmtleXMgPSAoKSA9PiAoW10pO1xud2VicGFja0VtcHR5Q29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5Q29udGV4dDtcbndlYnBhY2tFbXB0eUNvbnRleHQuaWQgPSBcIi4vbm9kZV9tb2R1bGVzL3RlcnNlci13ZWJwYWNrLXBsdWdpbi9kaXN0IHN5bmMgcmVjdXJzaXZlXCI7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7IiwidmFyIG1hcCA9IHtcblx0XCIuL2xhenktY29tcGlsYXRpb24tbm9kZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xhenktY29tcGlsYXRpb24tbm9kZS5qc1wiLFxuXHRcIi4vbGF6eS1jb21waWxhdGlvbi13ZWIuanNcIjogXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sYXp5LWNvbXBpbGF0aW9uLXdlYi5qc1wiXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdCBzeW5jIHJlY3Vyc2l2ZSBeXFxcXC5cXFxcL2xhenlcXFxcLWNvbXBpbGF0aW9uXFxcXC0uKlxcXFwuanMkXCI7IiwiZnVuY3Rpb24gd2VicGFja0VtcHR5Q29udGV4dChyZXEpIHtcblx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdHRocm93IGU7XG59XG53ZWJwYWNrRW1wdHlDb250ZXh0LmtleXMgPSAoKSA9PiAoW10pO1xud2VicGFja0VtcHR5Q29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5Q29udGV4dDtcbndlYnBhY2tFbXB0eUNvbnRleHQuaWQgPSBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL3NlcmlhbGl6YXRpb24gc3luYyByZWN1cnNpdmVcIjtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0VtcHR5Q29udGV4dDsiXSwic291cmNlUm9vdCI6IiJ9